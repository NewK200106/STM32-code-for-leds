
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006330  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065d4  080065d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065dc  080065dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065dc  080065dc  000165dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08006654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006654  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228f  00000000  00000000  0002f657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000318e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00032588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002747a  00000000  00000000  00033150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef36  00000000  00000000  0005a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec5e2  00000000  00000000  00069500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155ae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  00155b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064a8 	.word	0x080064a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080064a8 	.word	0x080064a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_write>:
/* USER CODE BEGIN 0 */

#define MainBuf_SIZE 20
uint8_t MainBuf[MainBuf_SIZE];

int _write(int file, char *ptr, int len) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
		ITM_SendChar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffc9 	bl	8000574 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
	}
	return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <byte_to_bin>:
void byte_to_bin(uint8_t byte, bool* output) {
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	6039      	str	r1, [r7, #0]
 8000604:	71fb      	strb	r3, [r7, #7]
  for (size_t i = 0; i < 8; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e013      	b.n	8000634 <byte_to_bin+0x3a>
    output[7 - i] = (byte >> i) & 1;
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	fa42 f303 	asr.w	r3, r2, r3
 8000614:	f003 0201 	and.w	r2, r3, #1
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f1c3 0307 	rsb	r3, r3, #7
 800061e:	6839      	ldr	r1, [r7, #0]
 8000620:	440b      	add	r3, r1
 8000622:	2a00      	cmp	r2, #0
 8000624:	bf14      	ite	ne
 8000626:	2201      	movne	r2, #1
 8000628:	2200      	moveq	r2, #0
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b07      	cmp	r3, #7
 8000638:	d9e8      	bls.n	800060c <byte_to_bin+0x12>
  }
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <boolgenSPI>:
  }
  printf("\n");
}

void boolgenSPI(bool* R,bool* G,bool* B,bool* R2,bool* G2,bool* B2,unsigned char* Data )
{
 8000648:	b480      	push	{r7}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
  for(uint8_t i=0;i<8;i++)
 8000656:	2300      	movs	r3, #0
 8000658:	75fb      	strb	r3, [r7, #23]
 800065a:	e01c      	b.n	8000696 <boolgenSPI+0x4e>
  {
    if(R[i]==true)
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <boolgenSPI+0x2c>
    {
      Data[i]=one;
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800066c:	4413      	add	r3, r2
 800066e:	22f0      	movs	r2, #240	; 0xf0
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e00d      	b.n	8000690 <boolgenSPI+0x48>
    }
    else if(R[i]==false)
 8000674:	7dfb      	ldrb	r3, [r7, #23]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d004      	beq.n	8000690 <boolgenSPI+0x48>
    {
      Data[i]=zero;
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800068a:	4413      	add	r3, r2
 800068c:	22c0      	movs	r2, #192	; 0xc0
 800068e:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	3301      	adds	r3, #1
 8000694:	75fb      	strb	r3, [r7, #23]
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d9df      	bls.n	800065c <boolgenSPI+0x14>
    }
  }
  for(uint8_t i=0;i<8;i++)
 800069c:	2300      	movs	r3, #0
 800069e:	75bb      	strb	r3, [r7, #22]
 80006a0:	e020      	b.n	80006e4 <boolgenSPI+0x9c>
  {
    if(G[i]==true)
 80006a2:	7dbb      	ldrb	r3, [r7, #22]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <boolgenSPI+0x76>
    {
      Data[8+i]=one;
 80006ae:	7dbb      	ldrb	r3, [r7, #22]
 80006b0:	3308      	adds	r3, #8
 80006b2:	461a      	mov	r2, r3
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	4413      	add	r3, r2
 80006b8:	22f0      	movs	r2, #240	; 0xf0
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e00f      	b.n	80006de <boolgenSPI+0x96>
    }
    else if(G[i]==false)
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	f083 0301 	eor.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d006      	beq.n	80006de <boolgenSPI+0x96>
    {
      Data[8+i]=zero;
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	3308      	adds	r3, #8
 80006d4:	461a      	mov	r2, r3
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	4413      	add	r3, r2
 80006da:	22c0      	movs	r2, #192	; 0xc0
 80006dc:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 80006de:	7dbb      	ldrb	r3, [r7, #22]
 80006e0:	3301      	adds	r3, #1
 80006e2:	75bb      	strb	r3, [r7, #22]
 80006e4:	7dbb      	ldrb	r3, [r7, #22]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d9db      	bls.n	80006a2 <boolgenSPI+0x5a>
    }
  }
  for(uint8_t i=0;i<8;i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	757b      	strb	r3, [r7, #21]
 80006ee:	e020      	b.n	8000732 <boolgenSPI+0xea>
  {
    if(B[i]==true)
 80006f0:	7d7b      	ldrb	r3, [r7, #21]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d007      	beq.n	800070c <boolgenSPI+0xc4>
    {
      Data[16+i]=one;
 80006fc:	7d7b      	ldrb	r3, [r7, #21]
 80006fe:	3310      	adds	r3, #16
 8000700:	461a      	mov	r2, r3
 8000702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000704:	4413      	add	r3, r2
 8000706:	22f0      	movs	r2, #240	; 0xf0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e00f      	b.n	800072c <boolgenSPI+0xe4>
    }
    else if(B[i]==false)
 800070c:	7d7b      	ldrb	r3, [r7, #21]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f083 0301 	eor.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <boolgenSPI+0xe4>
    {
      Data[16+i]=zero;
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	3310      	adds	r3, #16
 8000722:	461a      	mov	r2, r3
 8000724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000726:	4413      	add	r3, r2
 8000728:	22c0      	movs	r2, #192	; 0xc0
 800072a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 800072c:	7d7b      	ldrb	r3, [r7, #21]
 800072e:	3301      	adds	r3, #1
 8000730:	757b      	strb	r3, [r7, #21]
 8000732:	7d7b      	ldrb	r3, [r7, #21]
 8000734:	2b07      	cmp	r3, #7
 8000736:	d9db      	bls.n	80006f0 <boolgenSPI+0xa8>
    }
  }
  for(uint8_t i=0;i<40;i++)
 8000738:	2300      	movs	r3, #0
 800073a:	753b      	strb	r3, [r7, #20]
 800073c:	e009      	b.n	8000752 <boolgenSPI+0x10a>
   {
	  Data[24+i]=life;
 800073e:	7d3b      	ldrb	r3, [r7, #20]
 8000740:	3318      	adds	r3, #24
 8000742:	461a      	mov	r2, r3
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	4413      	add	r3, r2
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<40;i++)
 800074c:	7d3b      	ldrb	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	753b      	strb	r3, [r7, #20]
 8000752:	7d3b      	ldrb	r3, [r7, #20]
 8000754:	2b27      	cmp	r3, #39	; 0x27
 8000756:	d9f2      	bls.n	800073e <boolgenSPI+0xf6>
   }
  for(uint8_t i=0;i<8;i++)
 8000758:	2300      	movs	r3, #0
 800075a:	74fb      	strb	r3, [r7, #19]
 800075c:	e020      	b.n	80007a0 <boolgenSPI+0x158>
    {
      if(R2[i]==true)
 800075e:	7cfb      	ldrb	r3, [r7, #19]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d007      	beq.n	800077a <boolgenSPI+0x132>
      {
        Data[64+i]=one;
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	3340      	adds	r3, #64	; 0x40
 800076e:	461a      	mov	r2, r3
 8000770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000772:	4413      	add	r3, r2
 8000774:	22f0      	movs	r2, #240	; 0xf0
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e00f      	b.n	800079a <boolgenSPI+0x152>
      }
      else if(R2[i]==false)
 800077a:	7cfb      	ldrb	r3, [r7, #19]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f083 0301 	eor.w	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d006      	beq.n	800079a <boolgenSPI+0x152>
      {
        Data[64+i]=zero;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	3340      	adds	r3, #64	; 0x40
 8000790:	461a      	mov	r2, r3
 8000792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000794:	4413      	add	r3, r2
 8000796:	22c0      	movs	r2, #192	; 0xc0
 8000798:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 800079a:	7cfb      	ldrb	r3, [r7, #19]
 800079c:	3301      	adds	r3, #1
 800079e:	74fb      	strb	r3, [r7, #19]
 80007a0:	7cfb      	ldrb	r3, [r7, #19]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	d9db      	bls.n	800075e <boolgenSPI+0x116>
      }
    }
  for(uint8_t i=0;i<8;i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	74bb      	strb	r3, [r7, #18]
 80007aa:	e020      	b.n	80007ee <boolgenSPI+0x1a6>
    {
      if(G2[i]==true)
 80007ac:	7cbb      	ldrb	r3, [r7, #18]
 80007ae:	6a3a      	ldr	r2, [r7, #32]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <boolgenSPI+0x180>
      {
        Data[72+i]=one;
 80007b8:	7cbb      	ldrb	r3, [r7, #18]
 80007ba:	3348      	adds	r3, #72	; 0x48
 80007bc:	461a      	mov	r2, r3
 80007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c0:	4413      	add	r3, r2
 80007c2:	22f0      	movs	r2, #240	; 0xf0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e00f      	b.n	80007e8 <boolgenSPI+0x1a0>
      }
      else if(G2[i]==false)
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	6a3a      	ldr	r2, [r7, #32]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f083 0301 	eor.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <boolgenSPI+0x1a0>
      {
        Data[72+i]=zero;
 80007da:	7cbb      	ldrb	r3, [r7, #18]
 80007dc:	3348      	adds	r3, #72	; 0x48
 80007de:	461a      	mov	r2, r3
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	4413      	add	r3, r2
 80007e4:	22c0      	movs	r2, #192	; 0xc0
 80007e6:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 80007e8:	7cbb      	ldrb	r3, [r7, #18]
 80007ea:	3301      	adds	r3, #1
 80007ec:	74bb      	strb	r3, [r7, #18]
 80007ee:	7cbb      	ldrb	r3, [r7, #18]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9db      	bls.n	80007ac <boolgenSPI+0x164>
      }
    }
  for(uint8_t i=0;i<8;i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	747b      	strb	r3, [r7, #17]
 80007f8:	e020      	b.n	800083c <boolgenSPI+0x1f4>
    {
      if(B2[i]==true)
 80007fa:	7c7b      	ldrb	r3, [r7, #17]
 80007fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <boolgenSPI+0x1ce>
      {
        Data[80+i]=one;
 8000806:	7c7b      	ldrb	r3, [r7, #17]
 8000808:	3350      	adds	r3, #80	; 0x50
 800080a:	461a      	mov	r2, r3
 800080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080e:	4413      	add	r3, r2
 8000810:	22f0      	movs	r2, #240	; 0xf0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e00f      	b.n	8000836 <boolgenSPI+0x1ee>
      }
      else if(B2[i]==false)
 8000816:	7c7b      	ldrb	r3, [r7, #17]
 8000818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <boolgenSPI+0x1ee>
      {
        Data[80+i]=zero;
 8000828:	7c7b      	ldrb	r3, [r7, #17]
 800082a:	3350      	adds	r3, #80	; 0x50
 800082c:	461a      	mov	r2, r3
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	4413      	add	r3, r2
 8000832:	22c0      	movs	r2, #192	; 0xc0
 8000834:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	3301      	adds	r3, #1
 800083a:	747b      	strb	r3, [r7, #17]
 800083c:	7c7b      	ldrb	r3, [r7, #17]
 800083e:	2b07      	cmp	r3, #7
 8000840:	d9db      	bls.n	80007fa <boolgenSPI+0x1b2>
      }
    }
  //Przerwa w transmisji
  for(uint8_t i=0;i<40;i++)
 8000842:	2300      	movs	r3, #0
 8000844:	743b      	strb	r3, [r7, #16]
 8000846:	e009      	b.n	800085c <boolgenSPI+0x214>
   {
	  Data[88+i]=life;
 8000848:	7c3b      	ldrb	r3, [r7, #16]
 800084a:	3358      	adds	r3, #88	; 0x58
 800084c:	461a      	mov	r2, r3
 800084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000850:	4413      	add	r3, r2
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<40;i++)
 8000856:	7c3b      	ldrb	r3, [r7, #16]
 8000858:	3301      	adds	r3, #1
 800085a:	743b      	strb	r3, [r7, #16]
 800085c:	7c3b      	ldrb	r3, [r7, #16]
 800085e:	2b27      	cmp	r3, #39	; 0x27
 8000860:	d9f2      	bls.n	8000848 <boolgenSPI+0x200>
//Czytanie
//  for(uint8_t i=0;i<128;i++)
//  {
//    printf("%u \n",Data[i]);
//  }
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b5b0      	push	{r4, r5, r7, lr}
 8000872:	b0e6      	sub	sp, #408	; 0x198
 8000874:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t R1,B1,G1,R2,G2,B2;
	unsigned char Data[128];
	unsigned char Rdata[128];
	unsigned char BCom[6];//Receive data
	uint8_t BSend[] = "AT\r\n";
 8000876:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800087a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800087e:	4a6c      	ldr	r2, [pc, #432]	; (8000a30 <main+0x1c0>)
 8000880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000884:	6018      	str	r0, [r3, #0]
 8000886:	3304      	adds	r3, #4
 8000888:	7019      	strb	r1, [r3, #0]
	uint8_t rx_data[50];
	uint16_t rx_size=0;
 800088a:	2300      	movs	r3, #0
 800088c:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fcad 	bl	80011ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f8d6 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f9f6 	bl	8000c88 <MX_GPIO_Init>
  MX_DMA_Init();
 800089c:	f000 f9c2 	bl	8000c24 <MX_DMA_Init>
  MX_SPI3_Init();
 80008a0:	f000 f922 	bl	8000ae8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80008a4:	f000 f95e 	bl	8000b64 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008a8:	f000 f98c 	bl	8000bc4 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	memset(input, 0x00, 6);
 80008ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008b0:	2206      	movs	r2, #6
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 fe61 	bl	800557c <memset>
		//printf("piwo \n");
//Odczyt z UART
//		HAL_UART_Transmit(&huart3,BSend, sizeof(BSend), HAL_MAX_DELAY);//BlueTooth Transmit
//		HAL_UART_Receive(&huart3, rx_data, sizeof(rx_data), HAL_MAX_DELAY);//BlueTooth receive
//		HAL_Delay(1000);
		HAL_UART_Receive(&huart3, (uint8_t*) input, 6, HAL_MAX_DELAY);//LED receive for diagnostics only
 80008ba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	2206      	movs	r2, #6
 80008c4:	485b      	ldr	r0, [pc, #364]	; (8000a34 <main+0x1c4>)
 80008c6:	f003 fd47 	bl	8004358 <HAL_UART_Receive>

		printf("Dupa %c",rx_data[3]);
 80008ca:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80008d2:	78db      	ldrb	r3, [r3, #3]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4858      	ldr	r0, [pc, #352]	; (8000a38 <main+0x1c8>)
 80008d8:	f004 fe58 	bl	800558c <iprintf>
//		printf("LED1: %d %d %d LED2: %d %d %d \n", input[0], input[1], input[2],
//				input[3], input[4], input[5]);

		R1=(uint8_t*)input[0];
 80008dc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008e0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
		G1=(uint8_t*)input[1];
 80008ea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
		B1=(uint8_t*)input[2];
 80008f8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008fc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
		R2=(uint8_t*)input[3];
 8000906:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800090a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800090e:	78db      	ldrb	r3, [r3, #3]
 8000910:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
		G2=(uint8_t*)input[4];
 8000914:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000918:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
		B2=(uint8_t*)input[5];
 8000922:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000926:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
		byte_to_bin(R1, aR1);
 8000930:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000934:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe5d 	bl	80005fa <byte_to_bin>
//		readbin(aR1);
		byte_to_bin(G1, aG1);
 8000940:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000944:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe55 	bl	80005fa <byte_to_bin>
//		readbin(aG1);
		byte_to_bin(B1, aB1);
 8000950:	f107 021c 	add.w	r2, r7, #28
 8000954:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe4d 	bl	80005fa <byte_to_bin>
//		readbin(aB1);
		byte_to_bin(R2, aR2);
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe45 	bl	80005fa <byte_to_bin>
//		readbin(aR2);
		byte_to_bin(G2, aG2);
 8000970:	f107 020c 	add.w	r2, r7, #12
 8000974:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe3d 	bl	80005fa <byte_to_bin>
//		readbin(aG2);
		byte_to_bin(B2, aB2);
 8000980:	1d3a      	adds	r2, r7, #4
 8000982:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe36 	bl	80005fa <byte_to_bin>
//		readbin(aB2);
		boolgenSPI(aR1, aG1, aB1, aR2, aG2, aB2, Data);
 800098e:	f107 0414 	add.w	r4, r7, #20
 8000992:	f107 021c 	add.w	r2, r7, #28
 8000996:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800099a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800099e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80009a2:	9302      	str	r3, [sp, #8]
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	4623      	mov	r3, r4
 80009b0:	f7ff fe4a 	bl	8000648 <boolgenSPI>
		HAL_SPI_Transmit(&hspi3, Data, 128, HAL_MAX_DELAY);
 80009b4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	481f      	ldr	r0, [pc, #124]	; (8000a3c <main+0x1cc>)
 80009c0:	f002 fcef 	bl	80033a2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,(uint8_t*) Rdata, 128,HAL_MAX_DELAY);
 80009c4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	481b      	ldr	r0, [pc, #108]	; (8000a3c <main+0x1cc>)
 80009d0:	f002 fe55 	bl	800367e <HAL_SPI_Receive>
		printf("LED1: %d %d %d LED2: %d %d %d \n", Rdata[0], Rdata[1],Rdata[2], Rdata[3],Rdata[4], Rdata[5]);
 80009d4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80009d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80009e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	461c      	mov	r4, r3
 80009ec:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80009f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	461d      	mov	r5, r3
 80009f8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80009fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a00:	78db      	ldrb	r3, [r3, #3]
 8000a02:	461a      	mov	r2, r3
 8000a04:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	9101      	str	r1, [sp, #4]
 8000a1e:	9200      	str	r2, [sp, #0]
 8000a20:	462b      	mov	r3, r5
 8000a22:	4622      	mov	r2, r4
 8000a24:	4601      	mov	r1, r0
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <main+0x1d0>)
 8000a28:	f004 fdb0 	bl	800558c <iprintf>
		HAL_UART_Receive(&huart3, (uint8_t*) input, 6, HAL_MAX_DELAY);//LED receive for diagnostics only
 8000a2c:	e745      	b.n	80008ba <main+0x4a>
 8000a2e:	bf00      	nop
 8000a30:	080064ec 	.word	0x080064ec
 8000a34:	200001bc 	.word	0x200001bc
 8000a38:	080064c4 	.word	0x080064c4
 8000a3c:	2000008c 	.word	0x2000008c
 8000a40:	080064cc 	.word	0x080064cc

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b096      	sub	sp, #88	; 0x58
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2244      	movs	r2, #68	; 0x44
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f004 fd92 	bl	800557c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a6a:	f001 f8e5 	bl	8001c38 <HAL_PWREx_ControlVoltageScaling>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a74:	f000 f92c 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a82:	2310      	movs	r3, #16
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000a92:	230c      	movs	r3, #12
 8000a94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a96:	2307      	movs	r3, #7
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f91c 	bl	8001ce4 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ab2:	f000 f90d 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2303      	movs	r3, #3
 8000abc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fce4 	bl	800249c <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ada:	f000 f8f9 	bl	8000cd0 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3758      	adds	r7, #88	; 0x58
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <MX_SPI3_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b06:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b36:	2207      	movs	r2, #7
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_SPI3_Init+0x74>)
 8000b48:	f002 fb88 	bl	800325c <HAL_SPI_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 f8bd 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000008c 	.word	0x2000008c
 8000b60:	40003c00 	.word	0x40003c00

08000b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_USART2_UART_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000ba8:	f003 fb88 	bl	80042bc <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f000 f88d 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000138 	.word	0x20000138
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <MX_USART3_UART_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART3_UART_Init+0x58>)
 8000c08:	f003 fb58 	bl	80042bc <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f85d 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001bc 	.word	0x200001bc
 8000c20:	40004800 	.word	0x40004800

08000c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_DMA_Init+0x60>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <MX_DMA_Init+0x60>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6493      	str	r3, [r2, #72]	; 0x48
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_DMA_Init+0x60>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_DMA_Init+0x60>)
 8000c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MX_DMA_Init+0x60>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_DMA_Init+0x60>)
 8000c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2010      	movs	r0, #16
 8000c60:	f000 fc15 	bl	800148e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c64:	2010      	movs	r0, #16
 8000c66:	f000 fc2e 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2039      	movs	r0, #57	; 0x39
 8000c70:	f000 fc0d 	bl	800148e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000c74:	2039      	movs	r0, #57	; 0x39
 8000c76:	f000 fc26 	bl	80014c6 <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_GPIO_Init+0x44>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <MX_GPIO_Init+0x44>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_GPIO_Init+0x44>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_GPIO_Init+0x44>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <MX_GPIO_Init+0x44>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_GPIO_Init+0x44>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a30      	ldr	r2, [pc, #192]	; (8000e04 <HAL_SPI_MspInit+0xe0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d159      	bne.n	8000dfa <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <HAL_SPI_MspInit+0xe4>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <HAL_SPI_MspInit+0xe4>)
 8000d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d50:	6593      	str	r3, [r2, #88]	; 0x58
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_SPI_MspInit+0xe4>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_SPI_MspInit+0xe4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <HAL_SPI_MspInit+0xe4>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <HAL_SPI_MspInit+0xe4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	481e      	ldr	r0, [pc, #120]	; (8000e0c <HAL_SPI_MspInit+0xe8>)
 8000d94:	f000 fd98 	bl	80018c8 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <HAL_SPI_MspInit+0xf0>)
 8000d9c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000da0:	2203      	movs	r2, #3
 8000da2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000da6:	2210      	movs	r2, #16
 8000da8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000dd0:	f000 fb94 	bl	80014fc <HAL_DMA_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000dda:	f7ff ff79 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000de2:	655a      	str	r2, [r3, #84]	; 0x54
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_SPI_MspInit+0xec>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2033      	movs	r0, #51	; 0x33
 8000df0:	f000 fb4d 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000df4:	2033      	movs	r0, #51	; 0x33
 8000df6:	f000 fb66 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000800 	.word	0x48000800
 8000e10:	200000f0 	.word	0x200000f0
 8000e14:	4002041c 	.word	0x4002041c

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ae      	sub	sp, #184	; 0xb8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2288      	movs	r2, #136	; 0x88
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fb9f 	bl	800557c <memset>
  if(huart->Instance==USART2)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a5a      	ldr	r2, [pc, #360]	; (8000fac <HAL_UART_MspInit+0x194>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d16d      	bne.n	8000f24 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fd45 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e60:	f7ff ff36 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e64:	4b52      	ldr	r3, [pc, #328]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	4a51      	ldr	r2, [pc, #324]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e70:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e88:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e94:	230c      	movs	r3, #12
 8000e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eac:	2307      	movs	r3, #7
 8000eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f000 fd04 	bl	80018c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ec2:	4a3d      	ldr	r2, [pc, #244]	; (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000ec4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ecc:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed2:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000eec:	2220      	movs	r2, #32
 8000eee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ef6:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000ef8:	f000 fb00 	bl	80014fc <HAL_DMA_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000f02:	f7ff fee5 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000f0a:	671a      	str	r2, [r3, #112]	; 0x70
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2026      	movs	r0, #38	; 0x26
 8000f18:	f000 fab9 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f1c:	2026      	movs	r0, #38	; 0x26
 8000f1e:	f000 fad2 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f22:	e03f      	b.n	8000fa4 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <HAL_UART_MspInit+0x1a4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d13a      	bne.n	8000fa4 <HAL_UART_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fcd2 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000f46:	f7ff fec3 	bl	8000cd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_UART_MspInit+0x198>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f7a:	2330      	movs	r3, #48	; 0x30
 8000f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f92:	2307      	movs	r3, #7
 8000f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <HAL_UART_MspInit+0x1a8>)
 8000fa0:	f000 fc92 	bl	80018c8 <HAL_GPIO_Init>
}
 8000fa4:	bf00      	nop
 8000fa6:	37b8      	adds	r7, #184	; 0xb8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	20000240 	.word	0x20000240
 8000fb8:	4002006c 	.word	0x4002006c
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	48000800 	.word	0x48000800

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f942 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA1_Channel6_IRQHandler+0x10>)
 800101e:	f000 fba4 	bl	800176a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000240 	.word	0x20000240

0800102c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <USART2_IRQHandler+0x10>)
 8001032:	f003 fa63 	bl	80044fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000138 	.word	0x20000138

08001040 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <SPI3_IRQHandler+0x10>)
 8001046:	f002 fe5d 	bl	8003d04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c

08001054 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA2_Channel2_IRQHandler+0x10>)
 800105a:	f000 fb86 	bl	800176a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000f0 	.word	0x200000f0

08001068 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00a      	b.n	8001090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107a:	f3af 8000 	nop.w
 800107e:	4601      	mov	r1, r0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbf0      	blt.n	800107a <_read+0x12>
  }

  return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ca:	605a      	str	r2, [r3, #4]
  return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_isatty>:

int _isatty(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f004 f9f4 	bl	8005528 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20018000 	.word	0x20018000
 800116c:	00000400 	.word	0x00000400
 8001170:	20000288 	.word	0x20000288
 8001174:	200002a0 	.word	0x200002a0

08001178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a0:	f7ff ffea 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <LoopForever+0xe>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011bc:	4c0a      	ldr	r4, [pc, #40]	; (80011e8 <LoopForever+0x16>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f004 f9b3 	bl	8005534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ce:	f7ff fb4f 	bl	8000870 <main>

080011d2 <LoopForever>:

LoopForever:
    b LoopForever
 80011d2:	e7fe      	b.n	80011d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011e0:	080065e4 	.word	0x080065e4
  ldr r2, =_sbss
 80011e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011e8:	200002a0 	.word	0x200002a0

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>

080011ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f93d 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f80e 	bl	8001220 <HAL_InitTick>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	e001      	b.n	8001214 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001210:	f7ff fd64 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001214:	79fb      	ldrb	r3, [r7, #7]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_InitTick+0x6c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_InitTick+0x70>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_InitTick+0x6c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f949 	bl	80014e2 <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d809      	bhi.n	8001270 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 f913 	bl	800148e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_InitTick+0x74>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e007      	b.n	8001280 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e004      	b.n	8001280 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e001      	b.n	8001280 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000028c 	.word	0x2000028c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000028c 	.word	0x2000028c

080012d8 <__NVIC_SetPriorityGrouping>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e098      	b.n	8001640 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b4d      	ldr	r3, [pc, #308]	; (800164c <HAL_DMA_Init+0x150>)
 8001516:	429a      	cmp	r2, r3
 8001518:	d80f      	bhi.n	800153a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <HAL_DMA_Init+0x154>)
 8001522:	4413      	add	r3, r2
 8001524:	4a4b      	ldr	r2, [pc, #300]	; (8001654 <HAL_DMA_Init+0x158>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	009a      	lsls	r2, r3, #2
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_DMA_Init+0x15c>)
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
 8001538:	e00e      	b.n	8001558 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_DMA_Init+0x160>)
 8001542:	4413      	add	r3, r2
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <HAL_DMA_Init+0x158>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	009a      	lsls	r2, r3, #2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <HAL_DMA_Init+0x164>)
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800156e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001572:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015b2:	d039      	beq.n	8001628 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <HAL_DMA_Init+0x15c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_DMA_Init+0x168>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 031c 	and.w	r3, r3, #28
 80015ca:	210f      	movs	r1, #15
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4924      	ldr	r1, [pc, #144]	; (8001664 <HAL_DMA_Init+0x168>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_DMA_Init+0x168>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f003 031c 	and.w	r3, r3, #28
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	491d      	ldr	r1, [pc, #116]	; (8001664 <HAL_DMA_Init+0x168>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
 80015f2:	e019      	b.n	8001628 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_DMA_Init+0x16c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f003 031c 	and.w	r3, r3, #28
 8001600:	210f      	movs	r1, #15
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	4917      	ldr	r1, [pc, #92]	; (8001668 <HAL_DMA_Init+0x16c>)
 800160a:	4013      	ands	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_DMA_Init+0x16c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6859      	ldr	r1, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 031c 	and.w	r3, r3, #28
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	4911      	ldr	r1, [pc, #68]	; (8001668 <HAL_DMA_Init+0x16c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40020407 	.word	0x40020407
 8001650:	bffdfff8 	.word	0xbffdfff8
 8001654:	cccccccd 	.word	0xcccccccd
 8001658:	40020000 	.word	0x40020000
 800165c:	bffdfbf8 	.word	0xbffdfbf8
 8001660:	40020400 	.word	0x40020400
 8001664:	400200a8 	.word	0x400200a8
 8001668:	400204a8 	.word	0x400204a8

0800166c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d008      	beq.n	8001696 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2204      	movs	r2, #4
 8001688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e022      	b.n	80016dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 020e 	bic.w	r2, r2, #14
 80016a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f003 021c 	and.w	r2, r3, #28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d005      	beq.n	800170c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2204      	movs	r2, #4
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e029      	b.n	8001760 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 020e 	bic.w	r2, r2, #14
 800171a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f003 021c 	and.w	r2, r3, #28
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	2101      	movs	r1, #1
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4798      	blx	r3
    }
  }
  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f003 031c 	and.w	r3, r3, #28
 800178a:	2204      	movs	r2, #4
 800178c:	409a      	lsls	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d026      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x7a>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d021      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0204 	bic.w	r2, r2, #4
 80017bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f003 021c 	and.w	r2, r3, #28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2104      	movs	r1, #4
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d071      	beq.n	80018be <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80017e2:	e06c      	b.n	80018be <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f003 031c 	and.w	r3, r3, #28
 80017ec:	2202      	movs	r2, #2
 80017ee:	409a      	lsls	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d02e      	beq.n	8001856 <HAL_DMA_IRQHandler+0xec>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d029      	beq.n	8001856 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10b      	bne.n	8001828 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020a 	bic.w	r2, r2, #10
 800181e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f003 021c 	and.w	r2, r3, #28
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	2102      	movs	r1, #2
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d038      	beq.n	80018be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001854:	e033      	b.n	80018be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 031c 	and.w	r3, r3, #28
 800185e:	2208      	movs	r2, #8
 8001860:	409a      	lsls	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d02a      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x156>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d025      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020e 	bic.w	r2, r2, #14
 8001882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	f003 021c 	and.w	r2, r3, #28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
}
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	e17f      	b.n	8001bd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8171 	beq.w	8001bd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d005      	beq.n	8001908 <HAL_GPIO_Init+0x40>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d130      	bne.n	800196a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800193e:	2201      	movs	r2, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 0201 	and.w	r2, r3, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b03      	cmp	r3, #3
 8001974:	d118      	bne.n	80019a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d017      	beq.n	80019e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	6939      	ldr	r1, [r7, #16]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80ac 	beq.w	8001bd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_GPIO_Init+0x330>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	4a5e      	ldr	r2, [pc, #376]	; (8001bf8 <HAL_GPIO_Init+0x330>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6613      	str	r3, [r2, #96]	; 0x60
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_GPIO_Init+0x330>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a92:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x242>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_GPIO_Init+0x338>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x23e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_GPIO_Init+0x33c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x23a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <HAL_GPIO_Init+0x340>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x236>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <HAL_GPIO_Init+0x344>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x232>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4b      	ldr	r2, [pc, #300]	; (8001c10 <HAL_GPIO_Init+0x348>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x22e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4a      	ldr	r2, [pc, #296]	; (8001c14 <HAL_GPIO_Init+0x34c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x22a>
 8001aee:	2306      	movs	r3, #6
 8001af0:	e00c      	b.n	8001b0c <HAL_GPIO_Init+0x244>
 8001af2:	2307      	movs	r3, #7
 8001af4:	e00a      	b.n	8001b0c <HAL_GPIO_Init+0x244>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x244>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x244>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x244>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x244>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x244>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b1c:	4937      	ldr	r1, [pc, #220]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f ae78 	bne.w	80018d8 <HAL_GPIO_Init+0x10>
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	48000400 	.word	0x48000400
 8001c04:	48000800 	.word	0x48000800
 8001c08:	48000c00 	.word	0x48000c00
 8001c0c:	48001000 	.word	0x48001000
 8001c10:	48001400 	.word	0x48001400
 8001c14:	48001800 	.word	0x48001800
 8001c18:	40010400 	.word	0x40010400

08001c1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40007000 	.word	0x40007000

08001c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c46:	d130      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c54:	d038      	beq.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2232      	movs	r2, #50	; 0x32
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	4a1b      	ldr	r2, [pc, #108]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7c:	e002      	b.n	8001c84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c90:	d102      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f2      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca4:	d110      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e00f      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d007      	beq.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc0:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e3ca      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	4b94      	ldr	r3, [pc, #592]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80e4 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_RCC_OscConfig+0x4a>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	f040 808b 	bne.w	8001e3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	f040 8087 	bne.w	8001e3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x62>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e3a2      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_RCC_OscConfig+0x7c>
 8001d56:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5e:	e005      	b.n	8001d6c <HAL_RCC_OscConfig+0x88>
 8001d60:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d223      	bcs.n	8001db8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fd55 	bl	8002824 <RCC_SetFlashLatencyFromMSIRange>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e383      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d84:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a72      	ldr	r2, [pc, #456]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	496d      	ldr	r1, [pc, #436]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da2:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	4968      	ldr	r1, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
 8001db6:	e025      	b.n	8001e04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db8:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a65      	ldr	r2, [pc, #404]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4960      	ldr	r1, [pc, #384]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	495b      	ldr	r1, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fd15 	bl	8002824 <RCC_SetFlashLatencyFromMSIRange>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e343      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e04:	f000 fc4a 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b52      	ldr	r3, [pc, #328]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	4950      	ldr	r1, [pc, #320]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_RCC_OscConfig+0x278>)
 8001e22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e24:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f9f9 	bl	8001220 <HAL_InitTick>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d052      	beq.n	8001ede <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	e327      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d032      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e44:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fa36 	bl	80012c0 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e58:	f7ff fa32 	bl	80012c0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e310      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e76:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a36      	ldr	r2, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4931      	ldr	r1, [pc, #196]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	492c      	ldr	r1, [pc, #176]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
 8001ea8:	e01a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fa03 	bl	80012c0 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f9ff 	bl	80012c0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e2dd      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x1da>
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ede:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d074      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x21a>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d10e      	bne.n	8001f16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d064      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d160      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e2ba      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x24a>
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e026      	b.n	8001f7c <HAL_RCC_OscConfig+0x298>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f36:	d115      	bne.n	8001f64 <HAL_RCC_OscConfig+0x280>
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a02      	ldr	r2, [pc, #8]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x298>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	080064f4 	.word	0x080064f4
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004
 8001f64:	4ba0      	ldr	r3, [pc, #640]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a9f      	ldr	r2, [pc, #636]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b9d      	ldr	r3, [pc, #628]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a9c      	ldr	r2, [pc, #624]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f99c 	bl	80012c0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f998 	bl	80012c0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e276      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9e:	4b92      	ldr	r3, [pc, #584]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2a8>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f988 	bl	80012c0 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff f984 	bl	80012c0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e262      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc6:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2d0>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d060      	beq.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x310>
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d119      	bne.n	8002022 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d116      	bne.n	8002022 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_OscConfig+0x328>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e23f      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	4973      	ldr	r1, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002020:	e040      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d023      	beq.n	8002072 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6e      	ldr	r2, [pc, #440]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff f943 	bl	80012c0 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff f93f 	bl	80012c0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e21d      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	495f      	ldr	r1, [pc, #380]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e018      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5c      	ldr	r2, [pc, #368]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff f91f 	bl	80012c0 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff f91b 	bl	80012c0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1f9      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b8:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020be:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f8fa 	bl	80012c0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff f8f6 	bl	80012c0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1d4      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x3ec>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f8:	4a3b      	ldr	r2, [pc, #236]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7ff f8dd 	bl	80012c0 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210a:	f7ff f8d9 	bl	80012c0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1b7      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211c:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80a6 	beq.w	8002284 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002152:	6593      	str	r3, [r2, #88]	; 0x58
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002160:	2301      	movs	r3, #1
 8002162:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCC_OscConfig+0x508>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d118      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_OscConfig+0x508>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_RCC_OscConfig+0x508>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217c:	f7ff f8a0 	bl	80012c0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7ff f89c 	bl	80012c0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e17a      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_RCC_OscConfig+0x508>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <HAL_RCC_OscConfig+0x4d8>
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ba:	e029      	b.n	8002210 <HAL_RCC_OscConfig+0x52c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_OscConfig+0x50c>
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x52c>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	4b9c      	ldr	r3, [pc, #624]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a9b      	ldr	r2, [pc, #620]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002200:	4b98      	ldr	r3, [pc, #608]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a97      	ldr	r2, [pc, #604]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d016      	beq.n	8002246 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff f852 	bl	80012c0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7ff f84e 	bl	80012c0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e12a      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ed      	beq.n	8002220 <HAL_RCC_OscConfig+0x53c>
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7ff f83b 	bl	80012c0 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff f837 	bl	80012c0 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e113      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002264:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ed      	bne.n	800224e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002272:	7ffb      	ldrb	r3, [r7, #31]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002278:	4b7a      	ldr	r3, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	4a79      	ldr	r2, [pc, #484]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 800227e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002282:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80fe 	beq.w	800248a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	2b02      	cmp	r3, #2
 8002294:	f040 80d0 	bne.w	8002438 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002298:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d130      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	3b01      	subs	r3, #1
 80022b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d127      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11f      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d8:	2a07      	cmp	r2, #7
 80022da:	bf14      	ite	ne
 80022dc:	2201      	movne	r2, #1
 80022de:	2200      	moveq	r2, #0
 80022e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d113      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d109      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d06e      	beq.n	80023ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d069      	beq.n	80023e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0ad      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800233c:	f7fe ffc0 	bl	80012c0 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe ffbc 	bl	80012c0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e09a      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002362:	4b40      	ldr	r3, [pc, #256]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_RCC_OscConfig+0x784>)
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002372:	3a01      	subs	r2, #1
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800237c:	0212      	lsls	r2, r2, #8
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002384:	0852      	lsrs	r2, r2, #1
 8002386:	3a01      	subs	r2, #1
 8002388:	0552      	lsls	r2, r2, #21
 800238a:	4311      	orrs	r1, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002390:	0852      	lsrs	r2, r2, #1
 8002392:	3a01      	subs	r2, #1
 8002394:	0652      	lsls	r2, r2, #25
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800239c:	0912      	lsrs	r2, r2, #4
 800239e:	0452      	lsls	r2, r2, #17
 80023a0:	430a      	orrs	r2, r1
 80023a2:	4930      	ldr	r1, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023a8:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c0:	f7fe ff7e 	bl	80012c0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe ff7a 	bl	80012c0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e058      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e6:	e050      	b.n	800248a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e04f      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d148      	bne.n	800248a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a16      	ldr	r2, [pc, #88]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002410:	f7fe ff56 	bl	80012c0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe ff52 	bl	80012c0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e030      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x734>
 8002436:	e028      	b.n	800248a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d023      	beq.n	8002486 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <HAL_RCC_OscConfig+0x780>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe ff39 	bl	80012c0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e00c      	b.n	800246c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe ff35 	bl	80012c0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d905      	bls.n	800246c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e013      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
 8002464:	40021000 	.word	0x40021000
 8002468:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_OscConfig+0x7b0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ec      	bne.n	8002452 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_OscConfig+0x7b0>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4905      	ldr	r1, [pc, #20]	; (8002494 <HAL_RCC_OscConfig+0x7b0>)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x7b4>)
 8002480:	4013      	ands	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
 8002484:	e001      	b.n	800248a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	feeefffc 	.word	0xfeeefffc

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0e7      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b75      	ldr	r3, [pc, #468]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d910      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b72      	ldr	r3, [pc, #456]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4970      	ldr	r1, [pc, #448]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b6e      	ldr	r3, [pc, #440]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0cf      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d010      	beq.n	800250e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b66      	ldr	r3, [pc, #408]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d908      	bls.n	800250e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4960      	ldr	r1, [pc, #384]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d04c      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002522:	4b5a      	ldr	r3, [pc, #360]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d121      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0a6      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	4b54      	ldr	r3, [pc, #336]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e09a      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002552:	4b4e      	ldr	r3, [pc, #312]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e08e      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e086      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4943      	ldr	r1, [pc, #268]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe fe9c 	bl	80012c0 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fe98 	bl	80012c0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e06e      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d208      	bcs.n	80025e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	492b      	ldr	r1, [pc, #172]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d210      	bcs.n	8002612 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 0207 	bic.w	r2, r3, #7
 80025f8:	4923      	ldr	r1, [pc, #140]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e036      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4918      	ldr	r1, [pc, #96]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4910      	ldr	r1, [pc, #64]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002650:	f000 f824 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	490b      	ldr	r1, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1f4>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1fc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fdd3 	bl	8001220 <HAL_InitTick>
 800267a:	4603      	mov	r3, r0
 800267c:	72fb      	strb	r3, [r7, #11]

  return status;
 800267e:	7afb      	ldrb	r3, [r7, #11]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	080064f4 	.word	0x080064f4
 8002694:	20000000 	.word	0x20000000
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026aa:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x34>
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d121      	bne.n	800270e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d11e      	bne.n	800270e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e005      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026ec:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026f8:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10d      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d102      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	e004      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d101      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d134      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0xa6>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d003      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0xac>
 8002740:	e005      	b.n	800274e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002744:	617b      	str	r3, [r7, #20]
      break;
 8002746:	e005      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800274a:	617b      	str	r3, [r7, #20]
      break;
 800274c:	e002      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	617b      	str	r3, [r7, #20]
      break;
 8002752:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	3301      	adds	r3, #1
 8002760:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	fb03 f202 	mul.w	r2, r3, r2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	0e5b      	lsrs	r3, r3, #25
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	3301      	adds	r3, #1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002794:	69bb      	ldr	r3, [r7, #24]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	0800650c 	.word	0x0800650c
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200

080027b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4904      	ldr	r1, [pc, #16]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08006504 	.word	0x08006504

080027f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027fc:	f7ff ffda 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	08006504 	.word	0x08006504

08002824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800282c:	2300      	movs	r3, #0
 800282e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800283c:	f7ff f9ee 	bl	8001c1c <HAL_PWREx_GetVoltageRange>
 8002840:	6178      	str	r0, [r7, #20]
 8002842:	e014      	b.n	800286e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	4a24      	ldr	r2, [pc, #144]	; (80028dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	6593      	str	r3, [r2, #88]	; 0x58
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800285c:	f7ff f9de 	bl	8001c1c <HAL_PWREx_GetVoltageRange>
 8002860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002874:	d10b      	bne.n	800288e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d919      	bls.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2ba0      	cmp	r3, #160	; 0xa0
 8002880:	d902      	bls.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002882:	2302      	movs	r3, #2
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	e013      	b.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e010      	b.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	d902      	bls.n	800289a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002894:	2303      	movs	r3, #3
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	e00a      	b.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b80      	cmp	r3, #128	; 0x80
 800289e:	d102      	bne.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028a0:	2302      	movs	r3, #2
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	e004      	b.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d101      	bne.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028ac:	2301      	movs	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 0207 	bic.w	r2, r3, #7
 80028b8:	4909      	ldr	r1, [pc, #36]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40022000 	.word	0x40022000

080028e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028ec:	2300      	movs	r3, #0
 80028ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f0:	2300      	movs	r3, #0
 80028f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d041      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002904:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002908:	d02a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800290a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800290e:	d824      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002914:	d008      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800291a:	d81e      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002924:	d010      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002926:	e018      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002928:	4b86      	ldr	r3, [pc, #536]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4a85      	ldr	r2, [pc, #532]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002932:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002934:	e015      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fabb 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002946:	e00c      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3320      	adds	r3, #32
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fba6 	bl	80030a0 <RCCEx_PLLSAI2_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002958:	e003      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	74fb      	strb	r3, [r7, #19]
      break;
 800295e:	e000      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002976:	4973      	ldr	r1, [pc, #460]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800297e:	e001      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d041      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002994:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002998:	d02a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800299a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800299e:	d824      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a4:	d008      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029aa:	d81e      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b4:	d010      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029b6:	e018      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029b8:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a61      	ldr	r2, [pc, #388]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c4:	e015      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fa73 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029d6:	e00c      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3320      	adds	r3, #32
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fb5e 	bl	80030a0 <RCCEx_PLLSAI2_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029e8:	e003      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	74fb      	strb	r3, [r7, #19]
      break;
 80029ee:	e000      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a06:	494f      	ldr	r1, [pc, #316]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a0e:	e001      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a0 	beq.w	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3c:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	4a40      	ldr	r2, [pc, #256]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a46:	6593      	str	r3, [r2, #88]	; 0x58
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a54:	2301      	movs	r3, #1
 8002a56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a58:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3a      	ldr	r2, [pc, #232]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fc2c 	bl	80012c0 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a6a:	e009      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe fc28 	bl	80012c0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d902      	bls.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a7e:	e005      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a80:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d15c      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01f      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d019      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002adc:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d016      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fbe7 	bl	80012c0 <HAL_GetTick>
 8002af2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af4:	e00b      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe fbe3 	bl	80012c0 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d902      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ec      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b32:	4904      	ldr	r1, [pc, #16]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b3a:	e009      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
 8002b40:	e006      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b50:	7c7b      	ldrb	r3, [r7, #17]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b9e      	ldr	r3, [pc, #632]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a9d      	ldr	r2, [pc, #628]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b6e:	4b98      	ldr	r3, [pc, #608]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f023 0203 	bic.w	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	4994      	ldr	r1, [pc, #592]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b90:	4b8f      	ldr	r3, [pc, #572]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 020c 	bic.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	498c      	ldr	r1, [pc, #560]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bb2:	4b87      	ldr	r3, [pc, #540]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	4983      	ldr	r1, [pc, #524]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bd4:	4b7e      	ldr	r3, [pc, #504]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	497b      	ldr	r1, [pc, #492]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c04:	4972      	ldr	r1, [pc, #456]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c18:	4b6d      	ldr	r3, [pc, #436]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	496a      	ldr	r1, [pc, #424]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3a:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	4961      	ldr	r1, [pc, #388]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c5c:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6a:	4959      	ldr	r1, [pc, #356]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7e:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	4950      	ldr	r1, [pc, #320]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	4948      	ldr	r1, [pc, #288]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	493f      	ldr	r1, [pc, #252]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d028      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce4:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf2:	4937      	ldr	r1, [pc, #220]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d02:	d106      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0e:	60d3      	str	r3, [r2, #12]
 8002d10:	e011      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f8c8 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d028      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d42:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	491f      	ldr	r1, [pc, #124]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6c:	60d3      	str	r3, [r2, #12]
 8002d6e:	e011      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f899 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d02b      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dbe:	d109      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a02      	ldr	r2, [pc, #8]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
 8002dcc:	e014      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2101      	movs	r1, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f867 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02f      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e12:	4928      	ldr	r1, [pc, #160]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f844 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d014      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	74bb      	strb	r3, [r7, #18]
 8002e3e:	e011      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3320      	adds	r3, #32
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f925 	bl	80030a0 <RCCEx_PLLSAI2_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7e:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea2:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eaa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ec6:	4b75      	ldr	r3, [pc, #468]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ed2:	4b72      	ldr	r3, [pc, #456]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0203 	and.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10d      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eea:	4b6c      	ldr	r3, [pc, #432]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d047      	beq.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e044      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d018      	beq.n	8002f3e <RCCEx_PLLSAI1_Config+0x86>
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d825      	bhi.n	8002f5c <RCCEx_PLLSAI1_Config+0xa4>
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <RCCEx_PLLSAI1_Config+0x62>
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d009      	beq.n	8002f2c <RCCEx_PLLSAI1_Config+0x74>
 8002f18:	e020      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1a:	4b60      	ldr	r3, [pc, #384]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11d      	bne.n	8002f62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2a:	e01a      	b.n	8002f62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f2c:	4b5b      	ldr	r3, [pc, #364]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3c:	e013      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4a:	4b54      	ldr	r3, [pc, #336]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5a:	e006      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e004      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	430b      	orrs	r3, r1
 8002f88:	4944      	ldr	r1, [pc, #272]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d17d      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f94:	4b41      	ldr	r3, [pc, #260]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a40      	ldr	r2, [pc, #256]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fe f98e 	bl	80012c0 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fa6:	e009      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa8:	f7fe f98a 	bl	80012c0 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8002fba:	e005      	b.n	8002fc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fbc:	4b37      	ldr	r3, [pc, #220]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ef      	bne.n	8002fa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d160      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	0211      	lsls	r1, r2, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68d2      	ldr	r2, [r2, #12]
 8002fea:	0912      	lsrs	r2, r2, #4
 8002fec:	0452      	lsls	r2, r2, #17
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	492a      	ldr	r1, [pc, #168]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	610b      	str	r3, [r1, #16]
 8002ff6:	e027      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d112      	bne.n	8003024 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003006:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	0211      	lsls	r1, r2, #8
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6912      	ldr	r2, [r2, #16]
 8003014:	0852      	lsrs	r2, r2, #1
 8003016:	3a01      	subs	r2, #1
 8003018:	0552      	lsls	r2, r2, #21
 800301a:	430a      	orrs	r2, r1
 800301c:	491f      	ldr	r1, [pc, #124]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	610b      	str	r3, [r1, #16]
 8003022:	e011      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800302c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6892      	ldr	r2, [r2, #8]
 8003034:	0211      	lsls	r1, r2, #8
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6952      	ldr	r2, [r2, #20]
 800303a:	0852      	lsrs	r2, r2, #1
 800303c:	3a01      	subs	r2, #1
 800303e:	0652      	lsls	r2, r2, #25
 8003040:	430a      	orrs	r2, r1
 8003042:	4916      	ldr	r1, [pc, #88]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a13      	ldr	r2, [pc, #76]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 800304e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003052:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe f934 	bl	80012c0 <HAL_GetTick>
 8003058:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800305a:	e009      	b.n	8003070 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800305c:	f7fe f930 	bl	80012c0 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d902      	bls.n	8003070 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	73fb      	strb	r3, [r7, #15]
          break;
 800306e:	e005      	b.n	800307c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ef      	beq.n	800305c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	4904      	ldr	r1, [pc, #16]	; (800309c <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000

080030a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ae:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d10d      	bne.n	80030e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
       ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030d2:	4b61      	ldr	r3, [pc, #388]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
       ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d047      	beq.n	8003176 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e044      	b.n	8003176 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d018      	beq.n	8003126 <RCCEx_PLLSAI2_Config+0x86>
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d825      	bhi.n	8003144 <RCCEx_PLLSAI2_Config+0xa4>
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d002      	beq.n	8003102 <RCCEx_PLLSAI2_Config+0x62>
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d009      	beq.n	8003114 <RCCEx_PLLSAI2_Config+0x74>
 8003100:	e020      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003102:	4b55      	ldr	r3, [pc, #340]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11d      	bne.n	800314a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003112:	e01a      	b.n	800314a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003114:	4b50      	ldr	r3, [pc, #320]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003124:	e013      	b.n	800314e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003126:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003142:	e006      	b.n	8003152 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	e004      	b.n	8003154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003152:	bf00      	nop
    }

    if(status == HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	430b      	orrs	r3, r1
 8003170:	4939      	ldr	r1, [pc, #228]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d167      	bne.n	800324c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a35      	ldr	r2, [pc, #212]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fe f89a 	bl	80012c0 <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003190:	f7fe f896 	bl	80012c0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
        break;
 80031a2:	e005      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031a4:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ef      	bne.n	8003190 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d14a      	bne.n	800324c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d111      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031bc:	4b26      	ldr	r3, [pc, #152]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	0211      	lsls	r1, r2, #8
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	0912      	lsrs	r2, r2, #4
 80031d4:	0452      	lsls	r2, r2, #17
 80031d6:	430a      	orrs	r2, r1
 80031d8:	491f      	ldr	r1, [pc, #124]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	614b      	str	r3, [r1, #20]
 80031de:	e011      	b.n	8003204 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6892      	ldr	r2, [r2, #8]
 80031f0:	0211      	lsls	r1, r2, #8
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6912      	ldr	r2, [r2, #16]
 80031f6:	0852      	lsrs	r2, r2, #1
 80031f8:	3a01      	subs	r2, #1
 80031fa:	0652      	lsls	r2, r2, #25
 80031fc:	430a      	orrs	r2, r1
 80031fe:	4916      	ldr	r1, [pc, #88]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003200:	4313      	orrs	r3, r2
 8003202:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe f856 	bl	80012c0 <HAL_GetTick>
 8003214:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003216:	e009      	b.n	800322c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003218:	f7fe f852 	bl	80012c0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d902      	bls.n	800322c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	73fb      	strb	r3, [r7, #15]
          break;
 800322a:	e005      	b.n	8003238 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ef      	beq.n	8003218 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4904      	ldr	r1, [pc, #16]	; (8003258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003248:	4313      	orrs	r3, r2
 800324a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e095      	b.n	800339a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327e:	d009      	beq.n	8003294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
 8003286:	e005      	b.n	8003294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fd38 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032d4:	d902      	bls.n	80032dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e002      	b.n	80032e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032ea:	d007      	beq.n	80032fc <HAL_SPI_Init+0xa0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333e:	ea42 0103 	orr.w	r1, r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	f003 0204 	and.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003378:	ea42 0103 	orr.w	r1, r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b088      	sub	sp, #32
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_SPI_Transmit+0x22>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e158      	b.n	8003676 <HAL_SPI_Transmit+0x2d4>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033cc:	f7fd ff78 	bl	80012c0 <HAL_GetTick>
 80033d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e6:	e13d      	b.n	8003664 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_Transmit+0x52>
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f8:	e134      	b.n	8003664 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d10f      	bne.n	8003466 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d007      	beq.n	8003484 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800348c:	d94b      	bls.n	8003526 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_SPI_Transmit+0xfa>
 8003496:	8afb      	ldrh	r3, [r7, #22]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d13e      	bne.n	800351a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	881a      	ldrh	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	1c9a      	adds	r2, r3, #2
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034c0:	e02b      	b.n	800351a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d112      	bne.n	80034f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	1c9a      	adds	r2, r3, #2
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034f4:	e011      	b.n	800351a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f6:	f7fd fee3 	bl	80012c0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d803      	bhi.n	800350e <HAL_SPI_Transmit+0x16c>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d102      	bne.n	8003514 <HAL_SPI_Transmit+0x172>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003518:	e0a4      	b.n	8003664 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ce      	bne.n	80034c2 <HAL_SPI_Transmit+0x120>
 8003524:	e07c      	b.n	8003620 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0x192>
 800352e:	8afb      	ldrh	r3, [r7, #22]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d170      	bne.n	8003616 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d912      	bls.n	8003564 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	881a      	ldrh	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	1c9a      	adds	r2, r3, #2
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b02      	subs	r3, #2
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003562:	e058      	b.n	8003616 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800358a:	e044      	b.n	8003616 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d12b      	bne.n	80035f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d912      	bls.n	80035ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b02      	subs	r3, #2
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c8:	e025      	b.n	8003616 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035f0:	e011      	b.n	8003616 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f2:	f7fd fe65 	bl	80012c0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d803      	bhi.n	800360a <HAL_SPI_Transmit+0x268>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Transmit+0x26e>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003614:	e026      	b.n	8003664 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1b5      	bne.n	800358c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	6839      	ldr	r1, [r7, #0]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fe03 	bl	8004230 <SPI_EndRxTxTransaction>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e000      	b.n	8003664 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003674:	7ffb      	ldrb	r3, [r7, #31]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b088      	sub	sp, #32
 8003682:	af02      	add	r7, sp, #8
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800369a:	d112      	bne.n	80036c2 <HAL_SPI_Receive+0x44>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10e      	bne.n	80036c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2204      	movs	r2, #4
 80036a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f910 	bl	80038de <HAL_SPI_TransmitReceive>
 80036be:	4603      	mov	r3, r0
 80036c0:	e109      	b.n	80038d6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_SPI_Receive+0x52>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e102      	b.n	80038d6 <HAL_SPI_Receive+0x258>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d8:	f7fd fdf2 	bl	80012c0 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d002      	beq.n	80036f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
 80036ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036ee:	e0e9      	b.n	80038c4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_SPI_Receive+0x7e>
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003700:	e0e0      	b.n	80038c4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2204      	movs	r2, #4
 8003706:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	88fa      	ldrh	r2, [r7, #6]
 800371a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800374c:	d908      	bls.n	8003760 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e007      	b.n	8003770 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800376e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003778:	d10f      	bne.n	800379a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003798:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d007      	beq.n	80037b8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c0:	d867      	bhi.n	8003892 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037c2:	e030      	b.n	8003826 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d117      	bne.n	8003802 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f103 020c 	add.w	r2, r3, #12
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	7812      	ldrb	r2, [r2, #0]
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003800:	e011      	b.n	8003826 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003802:	f7fd fd5d 	bl	80012c0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d803      	bhi.n	800381a <HAL_SPI_Receive+0x19c>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d102      	bne.n	8003820 <HAL_SPI_Receive+0x1a2>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003824:	e04e      	b.n	80038c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1c8      	bne.n	80037c4 <HAL_SPI_Receive+0x146>
 8003832:	e034      	b.n	800389e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d115      	bne.n	800386e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	b292      	uxth	r2, r2
 800384e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800386c:	e011      	b.n	8003892 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800386e:	f7fd fd27 	bl	80012c0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d803      	bhi.n	8003886 <HAL_SPI_Receive+0x208>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d102      	bne.n	800388c <HAL_SPI_Receive+0x20e>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003890:	e018      	b.n	80038c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ca      	bne.n	8003834 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fc6c 	bl	8004180 <SPI_EndRxTransaction>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
 80038c0:	e000      	b.n	80038c4 <HAL_SPI_Receive+0x246>
  }

error :
 80038c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b08a      	sub	sp, #40	; 0x28
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038ec:	2301      	movs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x26>
 8003900:	2302      	movs	r3, #2
 8003902:	e1fb      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x41e>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800390c:	f7fd fcd8 	bl	80012c0 <HAL_GetTick>
 8003910:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003918:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003928:	7efb      	ldrb	r3, [r7, #27]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d00e      	beq.n	800394c <HAL_SPI_TransmitReceive+0x6e>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003934:	d106      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x66>
 800393e:	7efb      	ldrb	r3, [r7, #27]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d003      	beq.n	800394c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003944:	2302      	movs	r3, #2
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800394a:	e1cd      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_SPI_TransmitReceive+0x80>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_SPI_TransmitReceive+0x80>
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003964:	e1c0      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b04      	cmp	r3, #4
 8003970:	d003      	beq.n	800397a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2205      	movs	r2, #5
 8003976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	887a      	ldrh	r2, [r7, #2]
 800398a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	887a      	ldrh	r2, [r7, #2]
 8003992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039bc:	d802      	bhi.n	80039c4 <HAL_SPI_TransmitReceive+0xe6>
 80039be:	8a3b      	ldrh	r3, [r7, #16]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d908      	bls.n	80039d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	e007      	b.n	80039e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d007      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a0c:	d97c      	bls.n	8003b08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x13e>
 8003a16:	8a7b      	ldrh	r3, [r7, #18]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d169      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	1c9a      	adds	r2, r3, #2
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a40:	e056      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d11b      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x1aa>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x1aa>
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d113      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d11c      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x1f2>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	b292      	uxth	r2, r2
 8003aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003acc:	2301      	movs	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ad0:	f7fd fbf6 	bl	80012c0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d807      	bhi.n	8003af0 <HAL_SPI_TransmitReceive+0x212>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d003      	beq.n	8003af0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003aee:	e0fb      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1a3      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x164>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d19d      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x164>
 8003b06:	e0df      	b.n	8003cc8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x23a>
 8003b10:	8a7b      	ldrh	r3, [r7, #18]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f040 80cb 	bne.w	8003cae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d912      	bls.n	8003b48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b02      	subs	r3, #2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b46:	e0b2      	b.n	8003cae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6e:	e09e      	b.n	8003cae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d134      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x30a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02f      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x30a>
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d12c      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d912      	bls.n	8003bbe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	1c9a      	adds	r2, r3, #2
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b02      	subs	r3, #2
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bbc:	e012      	b.n	8003be4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d148      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x3aa>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d042      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d923      	bls.n	8003c56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b02      	subs	r3, #2
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d81f      	bhi.n	8003c84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	e016      	b.n	8003c84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f103 020c 	add.w	r2, r3, #12
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c84:	2301      	movs	r3, #1
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c88:	f7fd fb1a 	bl	80012c0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d803      	bhi.n	8003ca0 <HAL_SPI_TransmitReceive+0x3c2>
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d102      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x3c8>
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cac:	e01c      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f47f af5b 	bne.w	8003b70 <HAL_SPI_TransmitReceive+0x292>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f47f af54 	bne.w	8003b70 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 faaf 	bl	8004230 <SPI_EndRxTxTransaction>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	661a      	str	r2, [r3, #96]	; 0x60
 8003ce4:	e000      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10f      	bne.n	8003d48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
    return;
 8003d46:	e0d7      	b.n	8003ef8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_SPI_IRQHandler+0x66>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	09db      	lsrs	r3, r3, #7
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
    return;
 8003d68:	e0c6      	b.n	8003ef8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10c      	bne.n	8003d90 <HAL_SPI_IRQHandler+0x8c>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80b4 	beq.w	8003ef8 <HAL_SPI_IRQHandler+0x1f4>
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80ad 	beq.w	8003ef8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d023      	beq.n	8003df2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d011      	beq.n	8003dda <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dba:	f043 0204 	orr.w	r2, r3, #4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	e00b      	b.n	8003df2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]
        return;
 8003df0:	e082      	b.n	8003ef8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d014      	beq.n	8003e28 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00c      	beq.n	8003e4e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	f043 0208 	orr.w	r2, r3, #8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d04f      	beq.n	8003ef6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e64:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <HAL_SPI_IRQHandler+0x17e>
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d034      	beq.n	8003eec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0203 	bic.w	r2, r2, #3
 8003e90:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <HAL_SPI_IRQHandler+0x1fc>)
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd fc1e 	bl	80016e8 <HAL_DMA_Abort_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <HAL_SPI_IRQHandler+0x1fc>)
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fc08 	bl	80016e8 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003eea:	e003      	b.n	8003ef4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f809 	bl	8003f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ef2:	e000      	b.n	8003ef6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003ef4:	bf00      	nop
    return;
 8003ef6:	bf00      	nop
  }
}
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08003f19 	.word	0x08003f19

08003f04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff ffe5 	bl	8003f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f54:	f7fd f9b4 	bl	80012c0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f64:	f7fd f9ac 	bl	80012c0 <HAL_GetTick>
 8003f68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f6a:	4b39      	ldr	r3, [pc, #228]	; (8004050 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	015b      	lsls	r3, r3, #5
 8003f70:	0d1b      	lsrs	r3, r3, #20
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f7a:	e054      	b.n	8004026 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d050      	beq.n	8004026 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f84:	f7fd f99c 	bl	80012c0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d902      	bls.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d13d      	bne.n	8004016 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb2:	d111      	bne.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbc:	d004      	beq.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d107      	bne.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe0:	d10f      	bne.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e017      	b.n	8004046 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3b01      	subs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d19b      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000000 	.word	0x20000000

08004054 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004066:	f7fd f92b 	bl	80012c0 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4413      	add	r3, r2
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004076:	f7fd f923 	bl	80012c0 <HAL_GetTick>
 800407a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004084:	4b3d      	ldr	r3, [pc, #244]	; (800417c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00da      	lsls	r2, r3, #3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	0d1b      	lsrs	r3, r3, #20
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800409c:	e060      	b.n	8004160 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040a4:	d107      	bne.n	80040b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d050      	beq.n	8004160 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040be:	f7fd f8ff 	bl	80012c0 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d902      	bls.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d13d      	bne.n	8004150 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ec:	d111      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f6:	d004      	beq.n	8004102 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d107      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	d10f      	bne.n	800413c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e010      	b.n	8004172 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3b01      	subs	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d196      	bne.n	800409e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000000 	.word	0x20000000

08004180 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004194:	d111      	bne.n	80041ba <SPI_EndRxTransaction+0x3a>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419e:	d004      	beq.n	80041aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d107      	bne.n	80041ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff febd 	bl	8003f44 <SPI_WaitFlagStateUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e023      	b.n	8004228 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e8:	d11d      	bne.n	8004226 <SPI_EndRxTransaction+0xa6>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f2:	d004      	beq.n	80041fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d113      	bne.n	8004226 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff ff22 	bl	8004054 <SPI_WaitFifoStateUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e000      	b.n	8004228 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2200      	movs	r2, #0
 8004244:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff ff03 	bl	8004054 <SPI_WaitFifoStateUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e027      	b.n	80042b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff fe68 	bl	8003f44 <SPI_WaitFlagStateUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e014      	b.n	80042b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff fedc 	bl	8004054 <SPI_WaitFifoStateUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e000      	b.n	80042b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e040      	b.n	8004350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc fd9a 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fc00 	bl	8004b00 <UART_SetConfig>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e022      	b.n	8004350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 feac 	bl	8005070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 ff33 	bl	80051b4 <UART_CheckIdleState>
 800434e:	4603      	mov	r3, r0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436c:	2b20      	cmp	r3, #32
 800436e:	f040 80bf 	bne.w	80044f0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_Receive+0x26>
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0b7      	b.n	80044f2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_UART_Receive+0x38>
 800438c:	2302      	movs	r3, #2
 800438e:	e0b0      	b.n	80044f2 <HAL_UART_Receive+0x19a>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2222      	movs	r2, #34	; 0x22
 80043a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ac:	f7fc ff88 	bl	80012c0 <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	88fa      	ldrh	r2, [r7, #6]
 80043b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ca:	d10e      	bne.n	80043ea <HAL_UART_Receive+0x92>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_UART_Receive+0x88>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043de:	e02d      	b.n	800443c <HAL_UART_Receive+0xe4>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	22ff      	movs	r2, #255	; 0xff
 80043e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e8:	e028      	b.n	800443c <HAL_UART_Receive+0xe4>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <HAL_UART_Receive+0xb6>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_UART_Receive+0xac>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	22ff      	movs	r2, #255	; 0xff
 80043fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004402:	e01b      	b.n	800443c <HAL_UART_Receive+0xe4>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	227f      	movs	r2, #127	; 0x7f
 8004408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800440c:	e016      	b.n	800443c <HAL_UART_Receive+0xe4>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004416:	d10d      	bne.n	8004434 <HAL_UART_Receive+0xdc>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <HAL_UART_Receive+0xd2>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	227f      	movs	r2, #127	; 0x7f
 8004424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004428:	e008      	b.n	800443c <HAL_UART_Receive+0xe4>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	223f      	movs	r2, #63	; 0x3f
 800442e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004432:	e003      	b.n	800443c <HAL_UART_Receive+0xe4>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004442:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d108      	bne.n	8004460 <HAL_UART_Receive+0x108>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e003      	b.n	8004468 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004470:	e033      	b.n	80044da <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2120      	movs	r1, #32
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fee2 	bl	8005246 <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e032      	b.n	80044f2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004498:	b29a      	uxth	r2, r3
 800449a:	8a7b      	ldrh	r3, [r7, #18]
 800449c:	4013      	ands	r3, r2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	3302      	adds	r3, #2
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e00d      	b.n	80044c8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	8a7b      	ldrh	r3, [r7, #18]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4013      	ands	r3, r2
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3301      	adds	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1c5      	bne.n	8004472 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b0ba      	sub	sp, #232	; 0xe8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004526:	f640 030f 	movw	r3, #2063	; 0x80f
 800452a:	4013      	ands	r3, r2
 800452c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00f      	beq.n	8004564 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 82a6 	beq.w	8004aa6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
      }
      return;
 8004562:	e2a0      	b.n	8004aa6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8117 	beq.w	800479c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800457a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800457e:	4b85      	ldr	r3, [pc, #532]	; (8004794 <HAL_UART_IRQHandler+0x298>)
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 810a 	beq.w	800479c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d011      	beq.n	80045b8 <HAL_UART_IRQHandler+0xbc>
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2201      	movs	r2, #1
 80045a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d011      	beq.n	80045e8 <HAL_UART_IRQHandler+0xec>
 80045c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2202      	movs	r2, #2
 80045d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d011      	beq.n	8004618 <HAL_UART_IRQHandler+0x11c>
 80045f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2204      	movs	r2, #4
 8004606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460e:	f043 0202 	orr.w	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d017      	beq.n	8004654 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004634:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2208      	movs	r2, #8
 8004642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464a:	f043 0208 	orr.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d012      	beq.n	8004686 <HAL_UART_IRQHandler+0x18a>
 8004660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 820c 	beq.w	8004aaa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04f      	beq.n	800477e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fe75 	bl	80053ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d141      	bne.n	8004776 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004708:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800471e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800472a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1d9      	bne.n	80046f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	2b00      	cmp	r3, #0
 8004744:	d013      	beq.n	800476e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <HAL_UART_IRQHandler+0x29c>)
 800474c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc ffc8 	bl	80016e8 <HAL_DMA_Abort_IT>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004768:	4610      	mov	r0, r2
 800476a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e00f      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9b0 	bl	8004ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e00b      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f9ac 	bl	8004ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	e007      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9a8 	bl	8004ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800478c:	e18d      	b.n	8004aaa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478e:	bf00      	nop
    return;
 8004790:	e18b      	b.n	8004aaa <HAL_UART_IRQHandler+0x5ae>
 8004792:	bf00      	nop
 8004794:	04000120 	.word	0x04000120
 8004798:	08005495 	.word	0x08005495

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 8146 	bne.w	8004a32 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 813f 	beq.w	8004a32 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8138 	beq.w	8004a32 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2210      	movs	r2, #16
 80047c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	f040 80b4 	bne.w	8004942 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 815f 	beq.w	8004aae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047fa:	429a      	cmp	r2, r3
 80047fc:	f080 8157 	bcs.w	8004aae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 8085 	bne.w	8004926 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800484a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004852:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800485e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1da      	bne.n	800481c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3308      	adds	r3, #8
 800486c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800488a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800488e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004892:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800489c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e1      	bne.n	8004866 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e3      	bne.n	80048a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004908:	65bb      	str	r3, [r7, #88]	; 0x58
 800490a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800490e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e4      	bne.n	80048e6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc fea3 	bl	800166c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004932:	b29b      	uxth	r3, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	b29b      	uxth	r3, r3
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8d4 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004940:	e0b5      	b.n	8004aae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800494e:	b29b      	uxth	r3, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80a7 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80a2 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004990:	647b      	str	r3, [r7, #68]	; 0x44
 8004992:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e4      	bne.n	800496e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	623b      	str	r3, [r7, #32]
   return(result);
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049c8:	633a      	str	r2, [r7, #48]	; 0x30
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e3      	bne.n	80049a4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e4      	bne.n	80049ee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f85c 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a30:	e03f      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00e      	beq.n	8004a5c <HAL_UART_IRQHandler+0x560>
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fd5d 	bl	8005514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a5a:	e02d      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01c      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
    }
    return;
 8004a84:	e017      	b.n	8004ab6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d012      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
 8004a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fd0e 	bl	80054c0 <UART_EndTransmit_IT>
    return;
 8004aa4:	e008      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004aa6:	bf00      	nop
 8004aa8:	e006      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004aaa:	bf00      	nop
 8004aac:	e004      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ab6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004ab8:	37e8      	adds	r7, #232	; 0xe8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop

08004ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b04:	b08a      	sub	sp, #40	; 0x28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4ba4      	ldr	r3, [pc, #656]	; (8004dc0 <UART_SetConfig+0x2c0>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a99      	ldr	r2, [pc, #612]	; (8004dc4 <UART_SetConfig+0x2c4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a90      	ldr	r2, [pc, #576]	; (8004dc8 <UART_SetConfig+0x2c8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d126      	bne.n	8004bd8 <UART_SetConfig+0xd8>
 8004b8a:	4b90      	ldr	r3, [pc, #576]	; (8004dcc <UART_SetConfig+0x2cc>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d81b      	bhi.n	8004bd0 <UART_SetConfig+0xd0>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0xa0>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e116      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e112      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc6:	e10e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bce:	e10a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	e106      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a7c      	ldr	r2, [pc, #496]	; (8004dd0 <UART_SetConfig+0x2d0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d138      	bne.n	8004c54 <UART_SetConfig+0x154>
 8004be2:	4b7a      	ldr	r3, [pc, #488]	; (8004dcc <UART_SetConfig+0x2cc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d82d      	bhi.n	8004c4c <UART_SetConfig+0x14c>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0xf8>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004c4d 	.word	0x08004c4d
 8004c04:	08004c4d 	.word	0x08004c4d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c4d 	.word	0x08004c4d
 8004c10:	08004c4d 	.word	0x08004c4d
 8004c14:	08004c4d 	.word	0x08004c4d
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	08004c4d 	.word	0x08004c4d
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e0d8      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c34:	2302      	movs	r3, #2
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e0d4      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e0d0      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e0cc      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e0c8      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5e      	ldr	r2, [pc, #376]	; (8004dd4 <UART_SetConfig+0x2d4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d125      	bne.n	8004caa <UART_SetConfig+0x1aa>
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <UART_SetConfig+0x2cc>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d016      	beq.n	8004c9a <UART_SetConfig+0x19a>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d818      	bhi.n	8004ca2 <UART_SetConfig+0x1a2>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d00a      	beq.n	8004c8a <UART_SetConfig+0x18a>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d814      	bhi.n	8004ca2 <UART_SetConfig+0x1a2>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <UART_SetConfig+0x182>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d008      	beq.n	8004c92 <UART_SetConfig+0x192>
 8004c80:	e00f      	b.n	8004ca2 <UART_SetConfig+0x1a2>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c88:	e0ad      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c90:	e0a9      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c92:	2304      	movs	r3, #4
 8004c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c98:	e0a5      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca0:	e0a1      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca8:	e09d      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4a      	ldr	r2, [pc, #296]	; (8004dd8 <UART_SetConfig+0x2d8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d125      	bne.n	8004d00 <UART_SetConfig+0x200>
 8004cb4:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <UART_SetConfig+0x2cc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc0:	d016      	beq.n	8004cf0 <UART_SetConfig+0x1f0>
 8004cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc4:	d818      	bhi.n	8004cf8 <UART_SetConfig+0x1f8>
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d00a      	beq.n	8004ce0 <UART_SetConfig+0x1e0>
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d814      	bhi.n	8004cf8 <UART_SetConfig+0x1f8>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <UART_SetConfig+0x1d8>
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d008      	beq.n	8004ce8 <UART_SetConfig+0x1e8>
 8004cd6:	e00f      	b.n	8004cf8 <UART_SetConfig+0x1f8>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e082      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e07e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e07a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e076      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e072      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a35      	ldr	r2, [pc, #212]	; (8004ddc <UART_SetConfig+0x2dc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d12a      	bne.n	8004d60 <UART_SetConfig+0x260>
 8004d0a:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <UART_SetConfig+0x2cc>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d18:	d01a      	beq.n	8004d50 <UART_SetConfig+0x250>
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1e:	d81b      	bhi.n	8004d58 <UART_SetConfig+0x258>
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d00c      	beq.n	8004d40 <UART_SetConfig+0x240>
 8004d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2a:	d815      	bhi.n	8004d58 <UART_SetConfig+0x258>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <UART_SetConfig+0x238>
 8004d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d34:	d008      	beq.n	8004d48 <UART_SetConfig+0x248>
 8004d36:	e00f      	b.n	8004d58 <UART_SetConfig+0x258>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e052      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e04e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e04a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d56:	e046      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5e:	e042      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <UART_SetConfig+0x2c4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d13a      	bne.n	8004de0 <UART_SetConfig+0x2e0>
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <UART_SetConfig+0x2cc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d78:	d01a      	beq.n	8004db0 <UART_SetConfig+0x2b0>
 8004d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d7e:	d81b      	bhi.n	8004db8 <UART_SetConfig+0x2b8>
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d84:	d00c      	beq.n	8004da0 <UART_SetConfig+0x2a0>
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8a:	d815      	bhi.n	8004db8 <UART_SetConfig+0x2b8>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0x298>
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d008      	beq.n	8004da8 <UART_SetConfig+0x2a8>
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x2b8>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e022      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da6:	e01e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dae:	e01a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db6:	e016      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dbe:	e012      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004dc0:	efff69f3 	.word	0xefff69f3
 8004dc4:	40008000 	.word	0x40008000
 8004dc8:	40013800 	.word	0x40013800
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40004400 	.word	0x40004400
 8004dd4:	40004800 	.word	0x40004800
 8004dd8:	40004c00 	.word	0x40004c00
 8004ddc:	40005000 	.word	0x40005000
 8004de0:	2310      	movs	r3, #16
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a9f      	ldr	r2, [pc, #636]	; (8005068 <UART_SetConfig+0x568>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d17a      	bne.n	8004ee6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d824      	bhi.n	8004e42 <UART_SetConfig+0x342>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x300>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e43 	.word	0x08004e43
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e33 	.word	0x08004e33
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e43 	.word	0x08004e43
 8004e20:	08004e3b 	.word	0x08004e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fd fcd2 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004e28:	61f8      	str	r0, [r7, #28]
        break;
 8004e2a:	e010      	b.n	8004e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b8f      	ldr	r3, [pc, #572]	; (800506c <UART_SetConfig+0x56c>)
 8004e2e:	61fb      	str	r3, [r7, #28]
        break;
 8004e30:	e00d      	b.n	8004e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fd fc33 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8004e36:	61f8      	str	r0, [r7, #28]
        break;
 8004e38:	e009      	b.n	8004e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3e:	61fb      	str	r3, [r7, #28]
        break;
 8004e40:	e005      	b.n	8004e4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80fb 	beq.w	800504c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d305      	bcc.n	8004e72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d903      	bls.n	8004e7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e78:	e0e8      	b.n	800504c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	461c      	mov	r4, r3
 8004e80:	4615      	mov	r5, r2
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	022b      	lsls	r3, r5, #8
 8004e8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e90:	0222      	lsls	r2, r4, #8
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6849      	ldr	r1, [r1, #4]
 8004e96:	0849      	lsrs	r1, r1, #1
 8004e98:	2000      	movs	r0, #0
 8004e9a:	4688      	mov	r8, r1
 8004e9c:	4681      	mov	r9, r0
 8004e9e:	eb12 0a08 	adds.w	sl, r2, r8
 8004ea2:	eb43 0b09 	adc.w	fp, r3, r9
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	4659      	mov	r1, fp
 8004eb8:	f7fb f9da 	bl	8000270 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eca:	d308      	bcc.n	8004ede <UART_SetConfig+0x3de>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed2:	d204      	bcs.n	8004ede <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	e0b6      	b.n	800504c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ee4:	e0b2      	b.n	800504c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eee:	d15e      	bne.n	8004fae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d828      	bhi.n	8004f4a <UART_SetConfig+0x44a>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x400>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fd fc52 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004f28:	61f8      	str	r0, [r7, #28]
        break;
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fd fc64 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 8004f30:	61f8      	str	r0, [r7, #28]
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b4d      	ldr	r3, [pc, #308]	; (800506c <UART_SetConfig+0x56c>)
 8004f36:	61fb      	str	r3, [r7, #28]
        break;
 8004f38:	e00d      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fd fbaf 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8004f3e:	61f8      	str	r0, [r7, #28]
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	61fb      	str	r3, [r7, #28]
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d077      	beq.n	800504c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	005a      	lsls	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	441a      	add	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b0f      	cmp	r3, #15
 8004f76:	d916      	bls.n	8004fa6 <UART_SetConfig+0x4a6>
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d212      	bcs.n	8004fa6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f023 030f 	bic.w	r3, r3, #15
 8004f88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	8afb      	ldrh	r3, [r7, #22]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	8afa      	ldrh	r2, [r7, #22]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e052      	b.n	800504c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fac:	e04e      	b.n	800504c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d827      	bhi.n	8005006 <UART_SetConfig+0x506>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0x4bc>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08005007 	.word	0x08005007
 8004fcc:	08004ff7 	.word	0x08004ff7
 8004fd0:	08005007 	.word	0x08005007
 8004fd4:	08005007 	.word	0x08005007
 8004fd8:	08005007 	.word	0x08005007
 8004fdc:	08004fff 	.word	0x08004fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe0:	f7fd fbf4 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004fe4:	61f8      	str	r0, [r7, #28]
        break;
 8004fe6:	e014      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe8:	f7fd fc06 	bl	80027f8 <HAL_RCC_GetPCLK2Freq>
 8004fec:	61f8      	str	r0, [r7, #28]
        break;
 8004fee:	e010      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b1e      	ldr	r3, [pc, #120]	; (800506c <UART_SetConfig+0x56c>)
 8004ff2:	61fb      	str	r3, [r7, #28]
        break;
 8004ff4:	e00d      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7fd fb51 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8004ffa:	61f8      	str	r0, [r7, #28]
        break;
 8004ffc:	e009      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005002:	61fb      	str	r3, [r7, #28]
        break;
 8005004:	e005      	b.n	8005012 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005010:	bf00      	nop
    }

    if (pclk != 0U)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d019      	beq.n	800504c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	085a      	lsrs	r2, r3, #1
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	441a      	add	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	d909      	bls.n	8005046 <UART_SetConfig+0x546>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d205      	bcs.n	8005046 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e002      	b.n	800504c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005058:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800505c:	4618      	mov	r0, r3
 800505e:	3728      	adds	r7, #40	; 0x28
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005066:	bf00      	nop
 8005068:	40008000 	.word	0x40008000
 800506c:	00f42400 	.word	0x00f42400

08005070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01a      	beq.n	8005186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516e:	d10a      	bne.n	8005186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c4:	f7fc f87c 	bl	80012c0 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d10e      	bne.n	80051f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f82d 	bl	8005246 <UART_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e023      	b.n	800523e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d10e      	bne.n	8005222 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f817 	bl	8005246 <UART_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e00d      	b.n	800523e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b09c      	sub	sp, #112	; 0x70
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005256:	e0a5      	b.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	f000 80a1 	beq.w	80053a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fc f82d 	bl	80012c0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <UART_WaitOnFlagUntilTimeout+0x32>
 8005272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005274:	2b00      	cmp	r3, #0
 8005276:	d13e      	bne.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800528c:	667b      	str	r3, [r7, #100]	; 0x64
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005298:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800529c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e6      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	663b      	str	r3, [r7, #96]	; 0x60
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80052cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e5      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e067      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d04f      	beq.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d147      	bne.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800531c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533c:	637b      	str	r3, [r7, #52]	; 0x34
 800533e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e6      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	613b      	str	r3, [r7, #16]
   return(result);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	66bb      	str	r3, [r7, #104]	; 0x68
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005370:	623a      	str	r2, [r7, #32]
 8005372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	69f9      	ldr	r1, [r7, #28]
 8005376:	6a3a      	ldr	r2, [r7, #32]
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	61bb      	str	r3, [r7, #24]
   return(result);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e5      	bne.n	8005350 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e010      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	429a      	cmp	r2, r3
 80053c0:	f43f af4a 	beq.w	8005258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3770      	adds	r7, #112	; 0x70
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b095      	sub	sp, #84	; 0x54
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f4:	643b      	str	r3, [r7, #64]	; 0x40
 80053f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e6      	bne.n	80053d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	61fb      	str	r3, [r7, #28]
   return(result);
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e5      	bne.n	8005408 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005440:	2b01      	cmp	r3, #1
 8005442:	d118      	bne.n	8005476 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	60bb      	str	r3, [r7, #8]
   return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0310 	bic.w	r3, r3, #16
 8005458:	647b      	str	r3, [r7, #68]	; 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e6      	bne.n	8005444 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005488:	bf00      	nop
 800548a:	3754      	adds	r7, #84	; 0x54
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff fb0e 	bl	8004ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6979      	ldr	r1, [r7, #20]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	613b      	str	r3, [r7, #16]
   return(result);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e6      	bne.n	80054c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fada 	bl	8004ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800550c:	bf00      	nop
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <__errno>:
 8005528:	4b01      	ldr	r3, [pc, #4]	; (8005530 <__errno+0x8>)
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	2000000c 	.word	0x2000000c

08005534 <__libc_init_array>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4d0d      	ldr	r5, [pc, #52]	; (800556c <__libc_init_array+0x38>)
 8005538:	4c0d      	ldr	r4, [pc, #52]	; (8005570 <__libc_init_array+0x3c>)
 800553a:	1b64      	subs	r4, r4, r5
 800553c:	10a4      	asrs	r4, r4, #2
 800553e:	2600      	movs	r6, #0
 8005540:	42a6      	cmp	r6, r4
 8005542:	d109      	bne.n	8005558 <__libc_init_array+0x24>
 8005544:	4d0b      	ldr	r5, [pc, #44]	; (8005574 <__libc_init_array+0x40>)
 8005546:	4c0c      	ldr	r4, [pc, #48]	; (8005578 <__libc_init_array+0x44>)
 8005548:	f000 ffae 	bl	80064a8 <_init>
 800554c:	1b64      	subs	r4, r4, r5
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	2600      	movs	r6, #0
 8005552:	42a6      	cmp	r6, r4
 8005554:	d105      	bne.n	8005562 <__libc_init_array+0x2e>
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	f855 3b04 	ldr.w	r3, [r5], #4
 800555c:	4798      	blx	r3
 800555e:	3601      	adds	r6, #1
 8005560:	e7ee      	b.n	8005540 <__libc_init_array+0xc>
 8005562:	f855 3b04 	ldr.w	r3, [r5], #4
 8005566:	4798      	blx	r3
 8005568:	3601      	adds	r6, #1
 800556a:	e7f2      	b.n	8005552 <__libc_init_array+0x1e>
 800556c:	080065dc 	.word	0x080065dc
 8005570:	080065dc 	.word	0x080065dc
 8005574:	080065dc 	.word	0x080065dc
 8005578:	080065e0 	.word	0x080065e0

0800557c <memset>:
 800557c:	4402      	add	r2, r0
 800557e:	4603      	mov	r3, r0
 8005580:	4293      	cmp	r3, r2
 8005582:	d100      	bne.n	8005586 <memset+0xa>
 8005584:	4770      	bx	lr
 8005586:	f803 1b01 	strb.w	r1, [r3], #1
 800558a:	e7f9      	b.n	8005580 <memset+0x4>

0800558c <iprintf>:
 800558c:	b40f      	push	{r0, r1, r2, r3}
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <iprintf+0x2c>)
 8005590:	b513      	push	{r0, r1, r4, lr}
 8005592:	681c      	ldr	r4, [r3, #0]
 8005594:	b124      	cbz	r4, 80055a0 <iprintf+0x14>
 8005596:	69a3      	ldr	r3, [r4, #24]
 8005598:	b913      	cbnz	r3, 80055a0 <iprintf+0x14>
 800559a:	4620      	mov	r0, r4
 800559c:	f000 f866 	bl	800566c <__sinit>
 80055a0:	ab05      	add	r3, sp, #20
 80055a2:	9a04      	ldr	r2, [sp, #16]
 80055a4:	68a1      	ldr	r1, [r4, #8]
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 f9bd 	bl	8005928 <_vfiprintf_r>
 80055ae:	b002      	add	sp, #8
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr
 80055b8:	2000000c 	.word	0x2000000c

080055bc <std>:
 80055bc:	2300      	movs	r3, #0
 80055be:	b510      	push	{r4, lr}
 80055c0:	4604      	mov	r4, r0
 80055c2:	e9c0 3300 	strd	r3, r3, [r0]
 80055c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ca:	6083      	str	r3, [r0, #8]
 80055cc:	8181      	strh	r1, [r0, #12]
 80055ce:	6643      	str	r3, [r0, #100]	; 0x64
 80055d0:	81c2      	strh	r2, [r0, #14]
 80055d2:	6183      	str	r3, [r0, #24]
 80055d4:	4619      	mov	r1, r3
 80055d6:	2208      	movs	r2, #8
 80055d8:	305c      	adds	r0, #92	; 0x5c
 80055da:	f7ff ffcf 	bl	800557c <memset>
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <std+0x38>)
 80055e0:	6263      	str	r3, [r4, #36]	; 0x24
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <std+0x3c>)
 80055e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <std+0x40>)
 80055e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <std+0x44>)
 80055ec:	6224      	str	r4, [r4, #32]
 80055ee:	6323      	str	r3, [r4, #48]	; 0x30
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	bf00      	nop
 80055f4:	08005ed1 	.word	0x08005ed1
 80055f8:	08005ef3 	.word	0x08005ef3
 80055fc:	08005f2b 	.word	0x08005f2b
 8005600:	08005f4f 	.word	0x08005f4f

08005604 <_cleanup_r>:
 8005604:	4901      	ldr	r1, [pc, #4]	; (800560c <_cleanup_r+0x8>)
 8005606:	f000 b8af 	b.w	8005768 <_fwalk_reent>
 800560a:	bf00      	nop
 800560c:	08006229 	.word	0x08006229

08005610 <__sfmoreglue>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	2268      	movs	r2, #104	; 0x68
 8005614:	1e4d      	subs	r5, r1, #1
 8005616:	4355      	muls	r5, r2
 8005618:	460e      	mov	r6, r1
 800561a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800561e:	f000 f8e5 	bl	80057ec <_malloc_r>
 8005622:	4604      	mov	r4, r0
 8005624:	b140      	cbz	r0, 8005638 <__sfmoreglue+0x28>
 8005626:	2100      	movs	r1, #0
 8005628:	e9c0 1600 	strd	r1, r6, [r0]
 800562c:	300c      	adds	r0, #12
 800562e:	60a0      	str	r0, [r4, #8]
 8005630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005634:	f7ff ffa2 	bl	800557c <memset>
 8005638:	4620      	mov	r0, r4
 800563a:	bd70      	pop	{r4, r5, r6, pc}

0800563c <__sfp_lock_acquire>:
 800563c:	4801      	ldr	r0, [pc, #4]	; (8005644 <__sfp_lock_acquire+0x8>)
 800563e:	f000 b8b3 	b.w	80057a8 <__retarget_lock_acquire_recursive>
 8005642:	bf00      	nop
 8005644:	20000291 	.word	0x20000291

08005648 <__sfp_lock_release>:
 8005648:	4801      	ldr	r0, [pc, #4]	; (8005650 <__sfp_lock_release+0x8>)
 800564a:	f000 b8ae 	b.w	80057aa <__retarget_lock_release_recursive>
 800564e:	bf00      	nop
 8005650:	20000291 	.word	0x20000291

08005654 <__sinit_lock_acquire>:
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <__sinit_lock_acquire+0x8>)
 8005656:	f000 b8a7 	b.w	80057a8 <__retarget_lock_acquire_recursive>
 800565a:	bf00      	nop
 800565c:	20000292 	.word	0x20000292

08005660 <__sinit_lock_release>:
 8005660:	4801      	ldr	r0, [pc, #4]	; (8005668 <__sinit_lock_release+0x8>)
 8005662:	f000 b8a2 	b.w	80057aa <__retarget_lock_release_recursive>
 8005666:	bf00      	nop
 8005668:	20000292 	.word	0x20000292

0800566c <__sinit>:
 800566c:	b510      	push	{r4, lr}
 800566e:	4604      	mov	r4, r0
 8005670:	f7ff fff0 	bl	8005654 <__sinit_lock_acquire>
 8005674:	69a3      	ldr	r3, [r4, #24]
 8005676:	b11b      	cbz	r3, 8005680 <__sinit+0x14>
 8005678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800567c:	f7ff bff0 	b.w	8005660 <__sinit_lock_release>
 8005680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005684:	6523      	str	r3, [r4, #80]	; 0x50
 8005686:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <__sinit+0x68>)
 8005688:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <__sinit+0x6c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	62a2      	str	r2, [r4, #40]	; 0x28
 800568e:	42a3      	cmp	r3, r4
 8005690:	bf04      	itt	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	61a3      	streq	r3, [r4, #24]
 8005696:	4620      	mov	r0, r4
 8005698:	f000 f820 	bl	80056dc <__sfp>
 800569c:	6060      	str	r0, [r4, #4]
 800569e:	4620      	mov	r0, r4
 80056a0:	f000 f81c 	bl	80056dc <__sfp>
 80056a4:	60a0      	str	r0, [r4, #8]
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 f818 	bl	80056dc <__sfp>
 80056ac:	2200      	movs	r2, #0
 80056ae:	60e0      	str	r0, [r4, #12]
 80056b0:	2104      	movs	r1, #4
 80056b2:	6860      	ldr	r0, [r4, #4]
 80056b4:	f7ff ff82 	bl	80055bc <std>
 80056b8:	68a0      	ldr	r0, [r4, #8]
 80056ba:	2201      	movs	r2, #1
 80056bc:	2109      	movs	r1, #9
 80056be:	f7ff ff7d 	bl	80055bc <std>
 80056c2:	68e0      	ldr	r0, [r4, #12]
 80056c4:	2202      	movs	r2, #2
 80056c6:	2112      	movs	r1, #18
 80056c8:	f7ff ff78 	bl	80055bc <std>
 80056cc:	2301      	movs	r3, #1
 80056ce:	61a3      	str	r3, [r4, #24]
 80056d0:	e7d2      	b.n	8005678 <__sinit+0xc>
 80056d2:	bf00      	nop
 80056d4:	0800653c 	.word	0x0800653c
 80056d8:	08005605 	.word	0x08005605

080056dc <__sfp>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	4607      	mov	r7, r0
 80056e0:	f7ff ffac 	bl	800563c <__sfp_lock_acquire>
 80056e4:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <__sfp+0x84>)
 80056e6:	681e      	ldr	r6, [r3, #0]
 80056e8:	69b3      	ldr	r3, [r6, #24]
 80056ea:	b913      	cbnz	r3, 80056f2 <__sfp+0x16>
 80056ec:	4630      	mov	r0, r6
 80056ee:	f7ff ffbd 	bl	800566c <__sinit>
 80056f2:	3648      	adds	r6, #72	; 0x48
 80056f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	d503      	bpl.n	8005704 <__sfp+0x28>
 80056fc:	6833      	ldr	r3, [r6, #0]
 80056fe:	b30b      	cbz	r3, 8005744 <__sfp+0x68>
 8005700:	6836      	ldr	r6, [r6, #0]
 8005702:	e7f7      	b.n	80056f4 <__sfp+0x18>
 8005704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005708:	b9d5      	cbnz	r5, 8005740 <__sfp+0x64>
 800570a:	4b16      	ldr	r3, [pc, #88]	; (8005764 <__sfp+0x88>)
 800570c:	60e3      	str	r3, [r4, #12]
 800570e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005712:	6665      	str	r5, [r4, #100]	; 0x64
 8005714:	f000 f847 	bl	80057a6 <__retarget_lock_init_recursive>
 8005718:	f7ff ff96 	bl	8005648 <__sfp_lock_release>
 800571c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005724:	6025      	str	r5, [r4, #0]
 8005726:	61a5      	str	r5, [r4, #24]
 8005728:	2208      	movs	r2, #8
 800572a:	4629      	mov	r1, r5
 800572c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005730:	f7ff ff24 	bl	800557c <memset>
 8005734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800573c:	4620      	mov	r0, r4
 800573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005740:	3468      	adds	r4, #104	; 0x68
 8005742:	e7d9      	b.n	80056f8 <__sfp+0x1c>
 8005744:	2104      	movs	r1, #4
 8005746:	4638      	mov	r0, r7
 8005748:	f7ff ff62 	bl	8005610 <__sfmoreglue>
 800574c:	4604      	mov	r4, r0
 800574e:	6030      	str	r0, [r6, #0]
 8005750:	2800      	cmp	r0, #0
 8005752:	d1d5      	bne.n	8005700 <__sfp+0x24>
 8005754:	f7ff ff78 	bl	8005648 <__sfp_lock_release>
 8005758:	230c      	movs	r3, #12
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	e7ee      	b.n	800573c <__sfp+0x60>
 800575e:	bf00      	nop
 8005760:	0800653c 	.word	0x0800653c
 8005764:	ffff0001 	.word	0xffff0001

08005768 <_fwalk_reent>:
 8005768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800576c:	4606      	mov	r6, r0
 800576e:	4688      	mov	r8, r1
 8005770:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005774:	2700      	movs	r7, #0
 8005776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800577a:	f1b9 0901 	subs.w	r9, r9, #1
 800577e:	d505      	bpl.n	800578c <_fwalk_reent+0x24>
 8005780:	6824      	ldr	r4, [r4, #0]
 8005782:	2c00      	cmp	r4, #0
 8005784:	d1f7      	bne.n	8005776 <_fwalk_reent+0xe>
 8005786:	4638      	mov	r0, r7
 8005788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578c:	89ab      	ldrh	r3, [r5, #12]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d907      	bls.n	80057a2 <_fwalk_reent+0x3a>
 8005792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005796:	3301      	adds	r3, #1
 8005798:	d003      	beq.n	80057a2 <_fwalk_reent+0x3a>
 800579a:	4629      	mov	r1, r5
 800579c:	4630      	mov	r0, r6
 800579e:	47c0      	blx	r8
 80057a0:	4307      	orrs	r7, r0
 80057a2:	3568      	adds	r5, #104	; 0x68
 80057a4:	e7e9      	b.n	800577a <_fwalk_reent+0x12>

080057a6 <__retarget_lock_init_recursive>:
 80057a6:	4770      	bx	lr

080057a8 <__retarget_lock_acquire_recursive>:
 80057a8:	4770      	bx	lr

080057aa <__retarget_lock_release_recursive>:
 80057aa:	4770      	bx	lr

080057ac <sbrk_aligned>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4e0e      	ldr	r6, [pc, #56]	; (80057e8 <sbrk_aligned+0x3c>)
 80057b0:	460c      	mov	r4, r1
 80057b2:	6831      	ldr	r1, [r6, #0]
 80057b4:	4605      	mov	r5, r0
 80057b6:	b911      	cbnz	r1, 80057be <sbrk_aligned+0x12>
 80057b8:	f000 fb7a 	bl	8005eb0 <_sbrk_r>
 80057bc:	6030      	str	r0, [r6, #0]
 80057be:	4621      	mov	r1, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 fb75 	bl	8005eb0 <_sbrk_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d00a      	beq.n	80057e0 <sbrk_aligned+0x34>
 80057ca:	1cc4      	adds	r4, r0, #3
 80057cc:	f024 0403 	bic.w	r4, r4, #3
 80057d0:	42a0      	cmp	r0, r4
 80057d2:	d007      	beq.n	80057e4 <sbrk_aligned+0x38>
 80057d4:	1a21      	subs	r1, r4, r0
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 fb6a 	bl	8005eb0 <_sbrk_r>
 80057dc:	3001      	adds	r0, #1
 80057de:	d101      	bne.n	80057e4 <sbrk_aligned+0x38>
 80057e0:	f04f 34ff 	mov.w	r4, #4294967295
 80057e4:	4620      	mov	r0, r4
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	20000298 	.word	0x20000298

080057ec <_malloc_r>:
 80057ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f0:	1ccd      	adds	r5, r1, #3
 80057f2:	f025 0503 	bic.w	r5, r5, #3
 80057f6:	3508      	adds	r5, #8
 80057f8:	2d0c      	cmp	r5, #12
 80057fa:	bf38      	it	cc
 80057fc:	250c      	movcc	r5, #12
 80057fe:	2d00      	cmp	r5, #0
 8005800:	4607      	mov	r7, r0
 8005802:	db01      	blt.n	8005808 <_malloc_r+0x1c>
 8005804:	42a9      	cmp	r1, r5
 8005806:	d905      	bls.n	8005814 <_malloc_r+0x28>
 8005808:	230c      	movs	r3, #12
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	2600      	movs	r6, #0
 800580e:	4630      	mov	r0, r6
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	4e2e      	ldr	r6, [pc, #184]	; (80058d0 <_malloc_r+0xe4>)
 8005816:	f000 fdbb 	bl	8006390 <__malloc_lock>
 800581a:	6833      	ldr	r3, [r6, #0]
 800581c:	461c      	mov	r4, r3
 800581e:	bb34      	cbnz	r4, 800586e <_malloc_r+0x82>
 8005820:	4629      	mov	r1, r5
 8005822:	4638      	mov	r0, r7
 8005824:	f7ff ffc2 	bl	80057ac <sbrk_aligned>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	4604      	mov	r4, r0
 800582c:	d14d      	bne.n	80058ca <_malloc_r+0xde>
 800582e:	6834      	ldr	r4, [r6, #0]
 8005830:	4626      	mov	r6, r4
 8005832:	2e00      	cmp	r6, #0
 8005834:	d140      	bne.n	80058b8 <_malloc_r+0xcc>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	4631      	mov	r1, r6
 800583a:	4638      	mov	r0, r7
 800583c:	eb04 0803 	add.w	r8, r4, r3
 8005840:	f000 fb36 	bl	8005eb0 <_sbrk_r>
 8005844:	4580      	cmp	r8, r0
 8005846:	d13a      	bne.n	80058be <_malloc_r+0xd2>
 8005848:	6821      	ldr	r1, [r4, #0]
 800584a:	3503      	adds	r5, #3
 800584c:	1a6d      	subs	r5, r5, r1
 800584e:	f025 0503 	bic.w	r5, r5, #3
 8005852:	3508      	adds	r5, #8
 8005854:	2d0c      	cmp	r5, #12
 8005856:	bf38      	it	cc
 8005858:	250c      	movcc	r5, #12
 800585a:	4629      	mov	r1, r5
 800585c:	4638      	mov	r0, r7
 800585e:	f7ff ffa5 	bl	80057ac <sbrk_aligned>
 8005862:	3001      	adds	r0, #1
 8005864:	d02b      	beq.n	80058be <_malloc_r+0xd2>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	442b      	add	r3, r5
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	e00e      	b.n	800588c <_malloc_r+0xa0>
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	1b52      	subs	r2, r2, r5
 8005872:	d41e      	bmi.n	80058b2 <_malloc_r+0xc6>
 8005874:	2a0b      	cmp	r2, #11
 8005876:	d916      	bls.n	80058a6 <_malloc_r+0xba>
 8005878:	1961      	adds	r1, r4, r5
 800587a:	42a3      	cmp	r3, r4
 800587c:	6025      	str	r5, [r4, #0]
 800587e:	bf18      	it	ne
 8005880:	6059      	strne	r1, [r3, #4]
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	bf08      	it	eq
 8005886:	6031      	streq	r1, [r6, #0]
 8005888:	5162      	str	r2, [r4, r5]
 800588a:	604b      	str	r3, [r1, #4]
 800588c:	4638      	mov	r0, r7
 800588e:	f104 060b 	add.w	r6, r4, #11
 8005892:	f000 fd83 	bl	800639c <__malloc_unlock>
 8005896:	f026 0607 	bic.w	r6, r6, #7
 800589a:	1d23      	adds	r3, r4, #4
 800589c:	1af2      	subs	r2, r6, r3
 800589e:	d0b6      	beq.n	800580e <_malloc_r+0x22>
 80058a0:	1b9b      	subs	r3, r3, r6
 80058a2:	50a3      	str	r3, [r4, r2]
 80058a4:	e7b3      	b.n	800580e <_malloc_r+0x22>
 80058a6:	6862      	ldr	r2, [r4, #4]
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	bf0c      	ite	eq
 80058ac:	6032      	streq	r2, [r6, #0]
 80058ae:	605a      	strne	r2, [r3, #4]
 80058b0:	e7ec      	b.n	800588c <_malloc_r+0xa0>
 80058b2:	4623      	mov	r3, r4
 80058b4:	6864      	ldr	r4, [r4, #4]
 80058b6:	e7b2      	b.n	800581e <_malloc_r+0x32>
 80058b8:	4634      	mov	r4, r6
 80058ba:	6876      	ldr	r6, [r6, #4]
 80058bc:	e7b9      	b.n	8005832 <_malloc_r+0x46>
 80058be:	230c      	movs	r3, #12
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	4638      	mov	r0, r7
 80058c4:	f000 fd6a 	bl	800639c <__malloc_unlock>
 80058c8:	e7a1      	b.n	800580e <_malloc_r+0x22>
 80058ca:	6025      	str	r5, [r4, #0]
 80058cc:	e7de      	b.n	800588c <_malloc_r+0xa0>
 80058ce:	bf00      	nop
 80058d0:	20000294 	.word	0x20000294

080058d4 <__sfputc_r>:
 80058d4:	6893      	ldr	r3, [r2, #8]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	b410      	push	{r4}
 80058dc:	6093      	str	r3, [r2, #8]
 80058de:	da08      	bge.n	80058f2 <__sfputc_r+0x1e>
 80058e0:	6994      	ldr	r4, [r2, #24]
 80058e2:	42a3      	cmp	r3, r4
 80058e4:	db01      	blt.n	80058ea <__sfputc_r+0x16>
 80058e6:	290a      	cmp	r1, #10
 80058e8:	d103      	bne.n	80058f2 <__sfputc_r+0x1e>
 80058ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ee:	f000 bb33 	b.w	8005f58 <__swbuf_r>
 80058f2:	6813      	ldr	r3, [r2, #0]
 80058f4:	1c58      	adds	r0, r3, #1
 80058f6:	6010      	str	r0, [r2, #0]
 80058f8:	7019      	strb	r1, [r3, #0]
 80058fa:	4608      	mov	r0, r1
 80058fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005900:	4770      	bx	lr

08005902 <__sfputs_r>:
 8005902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005904:	4606      	mov	r6, r0
 8005906:	460f      	mov	r7, r1
 8005908:	4614      	mov	r4, r2
 800590a:	18d5      	adds	r5, r2, r3
 800590c:	42ac      	cmp	r4, r5
 800590e:	d101      	bne.n	8005914 <__sfputs_r+0x12>
 8005910:	2000      	movs	r0, #0
 8005912:	e007      	b.n	8005924 <__sfputs_r+0x22>
 8005914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005918:	463a      	mov	r2, r7
 800591a:	4630      	mov	r0, r6
 800591c:	f7ff ffda 	bl	80058d4 <__sfputc_r>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d1f3      	bne.n	800590c <__sfputs_r+0xa>
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005928 <_vfiprintf_r>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	460d      	mov	r5, r1
 800592e:	b09d      	sub	sp, #116	; 0x74
 8005930:	4614      	mov	r4, r2
 8005932:	4698      	mov	r8, r3
 8005934:	4606      	mov	r6, r0
 8005936:	b118      	cbz	r0, 8005940 <_vfiprintf_r+0x18>
 8005938:	6983      	ldr	r3, [r0, #24]
 800593a:	b90b      	cbnz	r3, 8005940 <_vfiprintf_r+0x18>
 800593c:	f7ff fe96 	bl	800566c <__sinit>
 8005940:	4b89      	ldr	r3, [pc, #548]	; (8005b68 <_vfiprintf_r+0x240>)
 8005942:	429d      	cmp	r5, r3
 8005944:	d11b      	bne.n	800597e <_vfiprintf_r+0x56>
 8005946:	6875      	ldr	r5, [r6, #4]
 8005948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800594a:	07d9      	lsls	r1, r3, #31
 800594c:	d405      	bmi.n	800595a <_vfiprintf_r+0x32>
 800594e:	89ab      	ldrh	r3, [r5, #12]
 8005950:	059a      	lsls	r2, r3, #22
 8005952:	d402      	bmi.n	800595a <_vfiprintf_r+0x32>
 8005954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005956:	f7ff ff27 	bl	80057a8 <__retarget_lock_acquire_recursive>
 800595a:	89ab      	ldrh	r3, [r5, #12]
 800595c:	071b      	lsls	r3, r3, #28
 800595e:	d501      	bpl.n	8005964 <_vfiprintf_r+0x3c>
 8005960:	692b      	ldr	r3, [r5, #16]
 8005962:	b9eb      	cbnz	r3, 80059a0 <_vfiprintf_r+0x78>
 8005964:	4629      	mov	r1, r5
 8005966:	4630      	mov	r0, r6
 8005968:	f000 fb5a 	bl	8006020 <__swsetup_r>
 800596c:	b1c0      	cbz	r0, 80059a0 <_vfiprintf_r+0x78>
 800596e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005970:	07dc      	lsls	r4, r3, #31
 8005972:	d50e      	bpl.n	8005992 <_vfiprintf_r+0x6a>
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	b01d      	add	sp, #116	; 0x74
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	4b7b      	ldr	r3, [pc, #492]	; (8005b6c <_vfiprintf_r+0x244>)
 8005980:	429d      	cmp	r5, r3
 8005982:	d101      	bne.n	8005988 <_vfiprintf_r+0x60>
 8005984:	68b5      	ldr	r5, [r6, #8]
 8005986:	e7df      	b.n	8005948 <_vfiprintf_r+0x20>
 8005988:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <_vfiprintf_r+0x248>)
 800598a:	429d      	cmp	r5, r3
 800598c:	bf08      	it	eq
 800598e:	68f5      	ldreq	r5, [r6, #12]
 8005990:	e7da      	b.n	8005948 <_vfiprintf_r+0x20>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	0598      	lsls	r0, r3, #22
 8005996:	d4ed      	bmi.n	8005974 <_vfiprintf_r+0x4c>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7ff ff06 	bl	80057aa <__retarget_lock_release_recursive>
 800599e:	e7e9      	b.n	8005974 <_vfiprintf_r+0x4c>
 80059a0:	2300      	movs	r3, #0
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	2320      	movs	r3, #32
 80059a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ae:	2330      	movs	r3, #48	; 0x30
 80059b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b74 <_vfiprintf_r+0x24c>
 80059b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059b8:	f04f 0901 	mov.w	r9, #1
 80059bc:	4623      	mov	r3, r4
 80059be:	469a      	mov	sl, r3
 80059c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059c4:	b10a      	cbz	r2, 80059ca <_vfiprintf_r+0xa2>
 80059c6:	2a25      	cmp	r2, #37	; 0x25
 80059c8:	d1f9      	bne.n	80059be <_vfiprintf_r+0x96>
 80059ca:	ebba 0b04 	subs.w	fp, sl, r4
 80059ce:	d00b      	beq.n	80059e8 <_vfiprintf_r+0xc0>
 80059d0:	465b      	mov	r3, fp
 80059d2:	4622      	mov	r2, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	4630      	mov	r0, r6
 80059d8:	f7ff ff93 	bl	8005902 <__sfputs_r>
 80059dc:	3001      	adds	r0, #1
 80059de:	f000 80aa 	beq.w	8005b36 <_vfiprintf_r+0x20e>
 80059e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e4:	445a      	add	r2, fp
 80059e6:	9209      	str	r2, [sp, #36]	; 0x24
 80059e8:	f89a 3000 	ldrb.w	r3, [sl]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80a2 	beq.w	8005b36 <_vfiprintf_r+0x20e>
 80059f2:	2300      	movs	r3, #0
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295
 80059f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059fc:	f10a 0a01 	add.w	sl, sl, #1
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	9307      	str	r3, [sp, #28]
 8005a04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a08:	931a      	str	r3, [sp, #104]	; 0x68
 8005a0a:	4654      	mov	r4, sl
 8005a0c:	2205      	movs	r2, #5
 8005a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a12:	4858      	ldr	r0, [pc, #352]	; (8005b74 <_vfiprintf_r+0x24c>)
 8005a14:	f7fa fbdc 	bl	80001d0 <memchr>
 8005a18:	9a04      	ldr	r2, [sp, #16]
 8005a1a:	b9d8      	cbnz	r0, 8005a54 <_vfiprintf_r+0x12c>
 8005a1c:	06d1      	lsls	r1, r2, #27
 8005a1e:	bf44      	itt	mi
 8005a20:	2320      	movmi	r3, #32
 8005a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a26:	0713      	lsls	r3, r2, #28
 8005a28:	bf44      	itt	mi
 8005a2a:	232b      	movmi	r3, #43	; 0x2b
 8005a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a30:	f89a 3000 	ldrb.w	r3, [sl]
 8005a34:	2b2a      	cmp	r3, #42	; 0x2a
 8005a36:	d015      	beq.n	8005a64 <_vfiprintf_r+0x13c>
 8005a38:	9a07      	ldr	r2, [sp, #28]
 8005a3a:	4654      	mov	r4, sl
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f04f 0c0a 	mov.w	ip, #10
 8005a42:	4621      	mov	r1, r4
 8005a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a48:	3b30      	subs	r3, #48	; 0x30
 8005a4a:	2b09      	cmp	r3, #9
 8005a4c:	d94e      	bls.n	8005aec <_vfiprintf_r+0x1c4>
 8005a4e:	b1b0      	cbz	r0, 8005a7e <_vfiprintf_r+0x156>
 8005a50:	9207      	str	r2, [sp, #28]
 8005a52:	e014      	b.n	8005a7e <_vfiprintf_r+0x156>
 8005a54:	eba0 0308 	sub.w	r3, r0, r8
 8005a58:	fa09 f303 	lsl.w	r3, r9, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	46a2      	mov	sl, r4
 8005a62:	e7d2      	b.n	8005a0a <_vfiprintf_r+0xe2>
 8005a64:	9b03      	ldr	r3, [sp, #12]
 8005a66:	1d19      	adds	r1, r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	9103      	str	r1, [sp, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bfbb      	ittet	lt
 8005a70:	425b      	neglt	r3, r3
 8005a72:	f042 0202 	orrlt.w	r2, r2, #2
 8005a76:	9307      	strge	r3, [sp, #28]
 8005a78:	9307      	strlt	r3, [sp, #28]
 8005a7a:	bfb8      	it	lt
 8005a7c:	9204      	strlt	r2, [sp, #16]
 8005a7e:	7823      	ldrb	r3, [r4, #0]
 8005a80:	2b2e      	cmp	r3, #46	; 0x2e
 8005a82:	d10c      	bne.n	8005a9e <_vfiprintf_r+0x176>
 8005a84:	7863      	ldrb	r3, [r4, #1]
 8005a86:	2b2a      	cmp	r3, #42	; 0x2a
 8005a88:	d135      	bne.n	8005af6 <_vfiprintf_r+0x1ce>
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	1d1a      	adds	r2, r3, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	9203      	str	r2, [sp, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bfb8      	it	lt
 8005a96:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a9a:	3402      	adds	r4, #2
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b84 <_vfiprintf_r+0x25c>
 8005aa2:	7821      	ldrb	r1, [r4, #0]
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	4650      	mov	r0, sl
 8005aa8:	f7fa fb92 	bl	80001d0 <memchr>
 8005aac:	b140      	cbz	r0, 8005ac0 <_vfiprintf_r+0x198>
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	eba0 000a 	sub.w	r0, r0, sl
 8005ab4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ab8:	9b04      	ldr	r3, [sp, #16]
 8005aba:	4303      	orrs	r3, r0
 8005abc:	3401      	adds	r4, #1
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac4:	482c      	ldr	r0, [pc, #176]	; (8005b78 <_vfiprintf_r+0x250>)
 8005ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aca:	2206      	movs	r2, #6
 8005acc:	f7fa fb80 	bl	80001d0 <memchr>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d03f      	beq.n	8005b54 <_vfiprintf_r+0x22c>
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <_vfiprintf_r+0x254>)
 8005ad6:	bb1b      	cbnz	r3, 8005b20 <_vfiprintf_r+0x1f8>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	3307      	adds	r3, #7
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	443b      	add	r3, r7
 8005ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aea:	e767      	b.n	80059bc <_vfiprintf_r+0x94>
 8005aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af0:	460c      	mov	r4, r1
 8005af2:	2001      	movs	r0, #1
 8005af4:	e7a5      	b.n	8005a42 <_vfiprintf_r+0x11a>
 8005af6:	2300      	movs	r3, #0
 8005af8:	3401      	adds	r4, #1
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	4619      	mov	r1, r3
 8005afe:	f04f 0c0a 	mov.w	ip, #10
 8005b02:	4620      	mov	r0, r4
 8005b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b08:	3a30      	subs	r2, #48	; 0x30
 8005b0a:	2a09      	cmp	r2, #9
 8005b0c:	d903      	bls.n	8005b16 <_vfiprintf_r+0x1ee>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c5      	beq.n	8005a9e <_vfiprintf_r+0x176>
 8005b12:	9105      	str	r1, [sp, #20]
 8005b14:	e7c3      	b.n	8005a9e <_vfiprintf_r+0x176>
 8005b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e7f0      	b.n	8005b02 <_vfiprintf_r+0x1da>
 8005b20:	ab03      	add	r3, sp, #12
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	462a      	mov	r2, r5
 8005b26:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <_vfiprintf_r+0x258>)
 8005b28:	a904      	add	r1, sp, #16
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f3af 8000 	nop.w
 8005b30:	4607      	mov	r7, r0
 8005b32:	1c78      	adds	r0, r7, #1
 8005b34:	d1d6      	bne.n	8005ae4 <_vfiprintf_r+0x1bc>
 8005b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b38:	07d9      	lsls	r1, r3, #31
 8005b3a:	d405      	bmi.n	8005b48 <_vfiprintf_r+0x220>
 8005b3c:	89ab      	ldrh	r3, [r5, #12]
 8005b3e:	059a      	lsls	r2, r3, #22
 8005b40:	d402      	bmi.n	8005b48 <_vfiprintf_r+0x220>
 8005b42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b44:	f7ff fe31 	bl	80057aa <__retarget_lock_release_recursive>
 8005b48:	89ab      	ldrh	r3, [r5, #12]
 8005b4a:	065b      	lsls	r3, r3, #25
 8005b4c:	f53f af12 	bmi.w	8005974 <_vfiprintf_r+0x4c>
 8005b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b52:	e711      	b.n	8005978 <_vfiprintf_r+0x50>
 8005b54:	ab03      	add	r3, sp, #12
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <_vfiprintf_r+0x258>)
 8005b5c:	a904      	add	r1, sp, #16
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f000 f880 	bl	8005c64 <_printf_i>
 8005b64:	e7e4      	b.n	8005b30 <_vfiprintf_r+0x208>
 8005b66:	bf00      	nop
 8005b68:	08006560 	.word	0x08006560
 8005b6c:	08006580 	.word	0x08006580
 8005b70:	08006540 	.word	0x08006540
 8005b74:	080065a0 	.word	0x080065a0
 8005b78:	080065aa 	.word	0x080065aa
 8005b7c:	00000000 	.word	0x00000000
 8005b80:	08005903 	.word	0x08005903
 8005b84:	080065a6 	.word	0x080065a6

08005b88 <_printf_common>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	4699      	mov	r9, r3
 8005b90:	688a      	ldr	r2, [r1, #8]
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bfb8      	it	lt
 8005b9c:	4613      	movlt	r3, r2
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	b10a      	cbz	r2, 8005bae <_printf_common+0x26>
 8005baa:	3301      	adds	r3, #1
 8005bac:	6033      	str	r3, [r6, #0]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	0699      	lsls	r1, r3, #26
 8005bb2:	bf42      	ittt	mi
 8005bb4:	6833      	ldrmi	r3, [r6, #0]
 8005bb6:	3302      	addmi	r3, #2
 8005bb8:	6033      	strmi	r3, [r6, #0]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	f015 0506 	ands.w	r5, r5, #6
 8005bc0:	d106      	bne.n	8005bd0 <_printf_common+0x48>
 8005bc2:	f104 0a19 	add.w	sl, r4, #25
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	6832      	ldr	r2, [r6, #0]
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	dc26      	bgt.n	8005c1e <_printf_common+0x96>
 8005bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bd4:	1e13      	subs	r3, r2, #0
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	bf18      	it	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	0692      	lsls	r2, r2, #26
 8005bde:	d42b      	bmi.n	8005c38 <_printf_common+0xb0>
 8005be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005be4:	4649      	mov	r1, r9
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c0      	blx	r8
 8005bea:	3001      	adds	r0, #1
 8005bec:	d01e      	beq.n	8005c2c <_printf_common+0xa4>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	68e5      	ldr	r5, [r4, #12]
 8005bf2:	6832      	ldr	r2, [r6, #0]
 8005bf4:	f003 0306 	and.w	r3, r3, #6
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	bf08      	it	eq
 8005bfc:	1aad      	subeq	r5, r5, r2
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	6922      	ldr	r2, [r4, #16]
 8005c02:	bf0c      	ite	eq
 8005c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c08:	2500      	movne	r5, #0
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	bfc4      	itt	gt
 8005c0e:	1a9b      	subgt	r3, r3, r2
 8005c10:	18ed      	addgt	r5, r5, r3
 8005c12:	2600      	movs	r6, #0
 8005c14:	341a      	adds	r4, #26
 8005c16:	42b5      	cmp	r5, r6
 8005c18:	d11a      	bne.n	8005c50 <_printf_common+0xc8>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e008      	b.n	8005c30 <_printf_common+0xa8>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4652      	mov	r2, sl
 8005c22:	4649      	mov	r1, r9
 8005c24:	4638      	mov	r0, r7
 8005c26:	47c0      	blx	r8
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d103      	bne.n	8005c34 <_printf_common+0xac>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	3501      	adds	r5, #1
 8005c36:	e7c6      	b.n	8005bc6 <_printf_common+0x3e>
 8005c38:	18e1      	adds	r1, r4, r3
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	2030      	movs	r0, #48	; 0x30
 8005c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c42:	4422      	add	r2, r4
 8005c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	e7c7      	b.n	8005be0 <_printf_common+0x58>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4622      	mov	r2, r4
 8005c54:	4649      	mov	r1, r9
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c0      	blx	r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d0e6      	beq.n	8005c2c <_printf_common+0xa4>
 8005c5e:	3601      	adds	r6, #1
 8005c60:	e7d9      	b.n	8005c16 <_printf_common+0x8e>
	...

08005c64 <_printf_i>:
 8005c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c68:	7e0f      	ldrb	r7, [r1, #24]
 8005c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c6c:	2f78      	cmp	r7, #120	; 0x78
 8005c6e:	4691      	mov	r9, r2
 8005c70:	4680      	mov	r8, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	469a      	mov	sl, r3
 8005c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c7a:	d807      	bhi.n	8005c8c <_printf_i+0x28>
 8005c7c:	2f62      	cmp	r7, #98	; 0x62
 8005c7e:	d80a      	bhi.n	8005c96 <_printf_i+0x32>
 8005c80:	2f00      	cmp	r7, #0
 8005c82:	f000 80d8 	beq.w	8005e36 <_printf_i+0x1d2>
 8005c86:	2f58      	cmp	r7, #88	; 0x58
 8005c88:	f000 80a3 	beq.w	8005dd2 <_printf_i+0x16e>
 8005c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c94:	e03a      	b.n	8005d0c <_printf_i+0xa8>
 8005c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c9a:	2b15      	cmp	r3, #21
 8005c9c:	d8f6      	bhi.n	8005c8c <_printf_i+0x28>
 8005c9e:	a101      	add	r1, pc, #4	; (adr r1, 8005ca4 <_printf_i+0x40>)
 8005ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005c8d 	.word	0x08005c8d
 8005cb0:	08005c8d 	.word	0x08005c8d
 8005cb4:	08005c8d 	.word	0x08005c8d
 8005cb8:	08005c8d 	.word	0x08005c8d
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005c8d 	.word	0x08005c8d
 8005cc4:	08005c8d 	.word	0x08005c8d
 8005cc8:	08005c8d 	.word	0x08005c8d
 8005ccc:	08005c8d 	.word	0x08005c8d
 8005cd0:	08005e1d 	.word	0x08005e1d
 8005cd4:	08005d41 	.word	0x08005d41
 8005cd8:	08005dff 	.word	0x08005dff
 8005cdc:	08005c8d 	.word	0x08005c8d
 8005ce0:	08005c8d 	.word	0x08005c8d
 8005ce4:	08005e3f 	.word	0x08005e3f
 8005ce8:	08005c8d 	.word	0x08005c8d
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005c8d 	.word	0x08005c8d
 8005cf4:	08005c8d 	.word	0x08005c8d
 8005cf8:	08005e07 	.word	0x08005e07
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0a3      	b.n	8005e58 <_printf_i+0x1f4>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	6829      	ldr	r1, [r5, #0]
 8005d14:	0606      	lsls	r6, r0, #24
 8005d16:	f101 0304 	add.w	r3, r1, #4
 8005d1a:	d50a      	bpl.n	8005d32 <_printf_i+0xce>
 8005d1c:	680e      	ldr	r6, [r1, #0]
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	da03      	bge.n	8005d2c <_printf_i+0xc8>
 8005d24:	232d      	movs	r3, #45	; 0x2d
 8005d26:	4276      	negs	r6, r6
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2c:	485e      	ldr	r0, [pc, #376]	; (8005ea8 <_printf_i+0x244>)
 8005d2e:	230a      	movs	r3, #10
 8005d30:	e019      	b.n	8005d66 <_printf_i+0x102>
 8005d32:	680e      	ldr	r6, [r1, #0]
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d3a:	bf18      	it	ne
 8005d3c:	b236      	sxthne	r6, r6
 8005d3e:	e7ef      	b.n	8005d20 <_printf_i+0xbc>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	1d19      	adds	r1, r3, #4
 8005d46:	6029      	str	r1, [r5, #0]
 8005d48:	0601      	lsls	r1, r0, #24
 8005d4a:	d501      	bpl.n	8005d50 <_printf_i+0xec>
 8005d4c:	681e      	ldr	r6, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <_printf_i+0xf2>
 8005d50:	0646      	lsls	r6, r0, #25
 8005d52:	d5fb      	bpl.n	8005d4c <_printf_i+0xe8>
 8005d54:	881e      	ldrh	r6, [r3, #0]
 8005d56:	4854      	ldr	r0, [pc, #336]	; (8005ea8 <_printf_i+0x244>)
 8005d58:	2f6f      	cmp	r7, #111	; 0x6f
 8005d5a:	bf0c      	ite	eq
 8005d5c:	2308      	moveq	r3, #8
 8005d5e:	230a      	movne	r3, #10
 8005d60:	2100      	movs	r1, #0
 8005d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d66:	6865      	ldr	r5, [r4, #4]
 8005d68:	60a5      	str	r5, [r4, #8]
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	bfa2      	ittt	ge
 8005d6e:	6821      	ldrge	r1, [r4, #0]
 8005d70:	f021 0104 	bicge.w	r1, r1, #4
 8005d74:	6021      	strge	r1, [r4, #0]
 8005d76:	b90e      	cbnz	r6, 8005d7c <_printf_i+0x118>
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	d04d      	beq.n	8005e18 <_printf_i+0x1b4>
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d82:	fb03 6711 	mls	r7, r3, r1, r6
 8005d86:	5dc7      	ldrb	r7, [r0, r7]
 8005d88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d8c:	4637      	mov	r7, r6
 8005d8e:	42bb      	cmp	r3, r7
 8005d90:	460e      	mov	r6, r1
 8005d92:	d9f4      	bls.n	8005d7e <_printf_i+0x11a>
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d10b      	bne.n	8005db0 <_printf_i+0x14c>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	07de      	lsls	r6, r3, #31
 8005d9c:	d508      	bpl.n	8005db0 <_printf_i+0x14c>
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	6861      	ldr	r1, [r4, #4]
 8005da2:	4299      	cmp	r1, r3
 8005da4:	bfde      	ittt	le
 8005da6:	2330      	movle	r3, #48	; 0x30
 8005da8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005db0:	1b52      	subs	r2, r2, r5
 8005db2:	6122      	str	r2, [r4, #16]
 8005db4:	f8cd a000 	str.w	sl, [sp]
 8005db8:	464b      	mov	r3, r9
 8005dba:	aa03      	add	r2, sp, #12
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f7ff fee2 	bl	8005b88 <_printf_common>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d14c      	bne.n	8005e62 <_printf_i+0x1fe>
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dcc:	b004      	add	sp, #16
 8005dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd2:	4835      	ldr	r0, [pc, #212]	; (8005ea8 <_printf_i+0x244>)
 8005dd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dd8:	6829      	ldr	r1, [r5, #0]
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005de0:	6029      	str	r1, [r5, #0]
 8005de2:	061d      	lsls	r5, r3, #24
 8005de4:	d514      	bpl.n	8005e10 <_printf_i+0x1ac>
 8005de6:	07df      	lsls	r7, r3, #31
 8005de8:	bf44      	itt	mi
 8005dea:	f043 0320 	orrmi.w	r3, r3, #32
 8005dee:	6023      	strmi	r3, [r4, #0]
 8005df0:	b91e      	cbnz	r6, 8005dfa <_printf_i+0x196>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	f023 0320 	bic.w	r3, r3, #32
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	e7b0      	b.n	8005d60 <_printf_i+0xfc>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2378      	movs	r3, #120	; 0x78
 8005e08:	4828      	ldr	r0, [pc, #160]	; (8005eac <_printf_i+0x248>)
 8005e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e0e:	e7e3      	b.n	8005dd8 <_printf_i+0x174>
 8005e10:	0659      	lsls	r1, r3, #25
 8005e12:	bf48      	it	mi
 8005e14:	b2b6      	uxthmi	r6, r6
 8005e16:	e7e6      	b.n	8005de6 <_printf_i+0x182>
 8005e18:	4615      	mov	r5, r2
 8005e1a:	e7bb      	b.n	8005d94 <_printf_i+0x130>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	6826      	ldr	r6, [r4, #0]
 8005e20:	6961      	ldr	r1, [r4, #20]
 8005e22:	1d18      	adds	r0, r3, #4
 8005e24:	6028      	str	r0, [r5, #0]
 8005e26:	0635      	lsls	r5, r6, #24
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0x1cc>
 8005e2c:	6019      	str	r1, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <_printf_i+0x1d2>
 8005e30:	0670      	lsls	r0, r6, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0x1c8>
 8005e34:	8019      	strh	r1, [r3, #0]
 8005e36:	2300      	movs	r3, #0
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	e7ba      	b.n	8005db4 <_printf_i+0x150>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	1d1a      	adds	r2, r3, #4
 8005e42:	602a      	str	r2, [r5, #0]
 8005e44:	681d      	ldr	r5, [r3, #0]
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7fa f9c0 	bl	80001d0 <memchr>
 8005e50:	b108      	cbz	r0, 8005e56 <_printf_i+0x1f2>
 8005e52:	1b40      	subs	r0, r0, r5
 8005e54:	6060      	str	r0, [r4, #4]
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e60:	e7a8      	b.n	8005db4 <_printf_i+0x150>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	462a      	mov	r2, r5
 8005e66:	4649      	mov	r1, r9
 8005e68:	4640      	mov	r0, r8
 8005e6a:	47d0      	blx	sl
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d0ab      	beq.n	8005dc8 <_printf_i+0x164>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	079b      	lsls	r3, r3, #30
 8005e74:	d413      	bmi.n	8005e9e <_printf_i+0x23a>
 8005e76:	68e0      	ldr	r0, [r4, #12]
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	bfb8      	it	lt
 8005e7e:	4618      	movlt	r0, r3
 8005e80:	e7a4      	b.n	8005dcc <_printf_i+0x168>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4632      	mov	r2, r6
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	47d0      	blx	sl
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d09b      	beq.n	8005dc8 <_printf_i+0x164>
 8005e90:	3501      	adds	r5, #1
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	9903      	ldr	r1, [sp, #12]
 8005e96:	1a5b      	subs	r3, r3, r1
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dcf2      	bgt.n	8005e82 <_printf_i+0x21e>
 8005e9c:	e7eb      	b.n	8005e76 <_printf_i+0x212>
 8005e9e:	2500      	movs	r5, #0
 8005ea0:	f104 0619 	add.w	r6, r4, #25
 8005ea4:	e7f5      	b.n	8005e92 <_printf_i+0x22e>
 8005ea6:	bf00      	nop
 8005ea8:	080065b1 	.word	0x080065b1
 8005eac:	080065c2 	.word	0x080065c2

08005eb0 <_sbrk_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d06      	ldr	r5, [pc, #24]	; (8005ecc <_sbrk_r+0x1c>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb f926 	bl	800110c <_sbrk>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_sbrk_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_sbrk_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	2000029c 	.word	0x2000029c

08005ed0 <__sread>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed8:	f000 fab2 	bl	8006440 <_read_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	bfab      	itete	ge
 8005ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ee4:	181b      	addge	r3, r3, r0
 8005ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eea:	bfac      	ite	ge
 8005eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eee:	81a3      	strhlt	r3, [r4, #12]
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <__swrite>:
 8005ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	461f      	mov	r7, r3
 8005ef8:	898b      	ldrh	r3, [r1, #12]
 8005efa:	05db      	lsls	r3, r3, #23
 8005efc:	4605      	mov	r5, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4616      	mov	r6, r2
 8005f02:	d505      	bpl.n	8005f10 <__swrite+0x1e>
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	2302      	movs	r3, #2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f000 f9c8 	bl	80062a0 <_lseek_r>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	4628      	mov	r0, r5
 8005f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	f000 b869 	b.w	8005ffc <_write_r>

08005f2a <__sseek>:
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f32:	f000 f9b5 	bl	80062a0 <_lseek_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	bf15      	itete	ne
 8005f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f46:	81a3      	strheq	r3, [r4, #12]
 8005f48:	bf18      	it	ne
 8005f4a:	81a3      	strhne	r3, [r4, #12]
 8005f4c:	bd10      	pop	{r4, pc}

08005f4e <__sclose>:
 8005f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f52:	f000 b8d3 	b.w	80060fc <_close_r>
	...

08005f58 <__swbuf_r>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	460e      	mov	r6, r1
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	4605      	mov	r5, r0
 8005f60:	b118      	cbz	r0, 8005f6a <__swbuf_r+0x12>
 8005f62:	6983      	ldr	r3, [r0, #24]
 8005f64:	b90b      	cbnz	r3, 8005f6a <__swbuf_r+0x12>
 8005f66:	f7ff fb81 	bl	800566c <__sinit>
 8005f6a:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <__swbuf_r+0x98>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d12b      	bne.n	8005fc8 <__swbuf_r+0x70>
 8005f70:	686c      	ldr	r4, [r5, #4]
 8005f72:	69a3      	ldr	r3, [r4, #24]
 8005f74:	60a3      	str	r3, [r4, #8]
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	071a      	lsls	r2, r3, #28
 8005f7a:	d52f      	bpl.n	8005fdc <__swbuf_r+0x84>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	b36b      	cbz	r3, 8005fdc <__swbuf_r+0x84>
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	1ac0      	subs	r0, r0, r3
 8005f86:	6963      	ldr	r3, [r4, #20]
 8005f88:	b2f6      	uxtb	r6, r6
 8005f8a:	4283      	cmp	r3, r0
 8005f8c:	4637      	mov	r7, r6
 8005f8e:	dc04      	bgt.n	8005f9a <__swbuf_r+0x42>
 8005f90:	4621      	mov	r1, r4
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 f948 	bl	8006228 <_fflush_r>
 8005f98:	bb30      	cbnz	r0, 8005fe8 <__swbuf_r+0x90>
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	60a3      	str	r3, [r4, #8]
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	6022      	str	r2, [r4, #0]
 8005fa6:	701e      	strb	r6, [r3, #0]
 8005fa8:	6963      	ldr	r3, [r4, #20]
 8005faa:	3001      	adds	r0, #1
 8005fac:	4283      	cmp	r3, r0
 8005fae:	d004      	beq.n	8005fba <__swbuf_r+0x62>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	07db      	lsls	r3, r3, #31
 8005fb4:	d506      	bpl.n	8005fc4 <__swbuf_r+0x6c>
 8005fb6:	2e0a      	cmp	r6, #10
 8005fb8:	d104      	bne.n	8005fc4 <__swbuf_r+0x6c>
 8005fba:	4621      	mov	r1, r4
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 f933 	bl	8006228 <_fflush_r>
 8005fc2:	b988      	cbnz	r0, 8005fe8 <__swbuf_r+0x90>
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <__swbuf_r+0x9c>)
 8005fca:	429c      	cmp	r4, r3
 8005fcc:	d101      	bne.n	8005fd2 <__swbuf_r+0x7a>
 8005fce:	68ac      	ldr	r4, [r5, #8]
 8005fd0:	e7cf      	b.n	8005f72 <__swbuf_r+0x1a>
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <__swbuf_r+0xa0>)
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	bf08      	it	eq
 8005fd8:	68ec      	ldreq	r4, [r5, #12]
 8005fda:	e7ca      	b.n	8005f72 <__swbuf_r+0x1a>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f81e 	bl	8006020 <__swsetup_r>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d0cb      	beq.n	8005f80 <__swbuf_r+0x28>
 8005fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8005fec:	e7ea      	b.n	8005fc4 <__swbuf_r+0x6c>
 8005fee:	bf00      	nop
 8005ff0:	08006560 	.word	0x08006560
 8005ff4:	08006580 	.word	0x08006580
 8005ff8:	08006540 	.word	0x08006540

08005ffc <_write_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d07      	ldr	r5, [pc, #28]	; (800601c <_write_r+0x20>)
 8006000:	4604      	mov	r4, r0
 8006002:	4608      	mov	r0, r1
 8006004:	4611      	mov	r1, r2
 8006006:	2200      	movs	r2, #0
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fa fad9 	bl	80005c2 <_write>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_write_r+0x1e>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_write_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	2000029c 	.word	0x2000029c

08006020 <__swsetup_r>:
 8006020:	4b32      	ldr	r3, [pc, #200]	; (80060ec <__swsetup_r+0xcc>)
 8006022:	b570      	push	{r4, r5, r6, lr}
 8006024:	681d      	ldr	r5, [r3, #0]
 8006026:	4606      	mov	r6, r0
 8006028:	460c      	mov	r4, r1
 800602a:	b125      	cbz	r5, 8006036 <__swsetup_r+0x16>
 800602c:	69ab      	ldr	r3, [r5, #24]
 800602e:	b913      	cbnz	r3, 8006036 <__swsetup_r+0x16>
 8006030:	4628      	mov	r0, r5
 8006032:	f7ff fb1b 	bl	800566c <__sinit>
 8006036:	4b2e      	ldr	r3, [pc, #184]	; (80060f0 <__swsetup_r+0xd0>)
 8006038:	429c      	cmp	r4, r3
 800603a:	d10f      	bne.n	800605c <__swsetup_r+0x3c>
 800603c:	686c      	ldr	r4, [r5, #4]
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006044:	0719      	lsls	r1, r3, #28
 8006046:	d42c      	bmi.n	80060a2 <__swsetup_r+0x82>
 8006048:	06dd      	lsls	r5, r3, #27
 800604a:	d411      	bmi.n	8006070 <__swsetup_r+0x50>
 800604c:	2309      	movs	r3, #9
 800604e:	6033      	str	r3, [r6, #0]
 8006050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	e03e      	b.n	80060da <__swsetup_r+0xba>
 800605c:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <__swsetup_r+0xd4>)
 800605e:	429c      	cmp	r4, r3
 8006060:	d101      	bne.n	8006066 <__swsetup_r+0x46>
 8006062:	68ac      	ldr	r4, [r5, #8]
 8006064:	e7eb      	b.n	800603e <__swsetup_r+0x1e>
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <__swsetup_r+0xd8>)
 8006068:	429c      	cmp	r4, r3
 800606a:	bf08      	it	eq
 800606c:	68ec      	ldreq	r4, [r5, #12]
 800606e:	e7e6      	b.n	800603e <__swsetup_r+0x1e>
 8006070:	0758      	lsls	r0, r3, #29
 8006072:	d512      	bpl.n	800609a <__swsetup_r+0x7a>
 8006074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006076:	b141      	cbz	r1, 800608a <__swsetup_r+0x6a>
 8006078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800607c:	4299      	cmp	r1, r3
 800607e:	d002      	beq.n	8006086 <__swsetup_r+0x66>
 8006080:	4630      	mov	r0, r6
 8006082:	f000 f991 	bl	80063a8 <_free_r>
 8006086:	2300      	movs	r3, #0
 8006088:	6363      	str	r3, [r4, #52]	; 0x34
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006090:	81a3      	strh	r3, [r4, #12]
 8006092:	2300      	movs	r3, #0
 8006094:	6063      	str	r3, [r4, #4]
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f043 0308 	orr.w	r3, r3, #8
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	6923      	ldr	r3, [r4, #16]
 80060a4:	b94b      	cbnz	r3, 80060ba <__swsetup_r+0x9a>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b0:	d003      	beq.n	80060ba <__swsetup_r+0x9a>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f92b 	bl	8006310 <__smakebuf_r>
 80060ba:	89a0      	ldrh	r0, [r4, #12]
 80060bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060c0:	f010 0301 	ands.w	r3, r0, #1
 80060c4:	d00a      	beq.n	80060dc <__swsetup_r+0xbc>
 80060c6:	2300      	movs	r3, #0
 80060c8:	60a3      	str	r3, [r4, #8]
 80060ca:	6963      	ldr	r3, [r4, #20]
 80060cc:	425b      	negs	r3, r3
 80060ce:	61a3      	str	r3, [r4, #24]
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	b943      	cbnz	r3, 80060e6 <__swsetup_r+0xc6>
 80060d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060d8:	d1ba      	bne.n	8006050 <__swsetup_r+0x30>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	0781      	lsls	r1, r0, #30
 80060de:	bf58      	it	pl
 80060e0:	6963      	ldrpl	r3, [r4, #20]
 80060e2:	60a3      	str	r3, [r4, #8]
 80060e4:	e7f4      	b.n	80060d0 <__swsetup_r+0xb0>
 80060e6:	2000      	movs	r0, #0
 80060e8:	e7f7      	b.n	80060da <__swsetup_r+0xba>
 80060ea:	bf00      	nop
 80060ec:	2000000c 	.word	0x2000000c
 80060f0:	08006560 	.word	0x08006560
 80060f4:	08006580 	.word	0x08006580
 80060f8:	08006540 	.word	0x08006540

080060fc <_close_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d06      	ldr	r5, [pc, #24]	; (8006118 <_close_r+0x1c>)
 8006100:	2300      	movs	r3, #0
 8006102:	4604      	mov	r4, r0
 8006104:	4608      	mov	r0, r1
 8006106:	602b      	str	r3, [r5, #0]
 8006108:	f7fa ffcb 	bl	80010a2 <_close>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d102      	bne.n	8006116 <_close_r+0x1a>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	b103      	cbz	r3, 8006116 <_close_r+0x1a>
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	2000029c 	.word	0x2000029c

0800611c <__sflush_r>:
 800611c:	898a      	ldrh	r2, [r1, #12]
 800611e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006122:	4605      	mov	r5, r0
 8006124:	0710      	lsls	r0, r2, #28
 8006126:	460c      	mov	r4, r1
 8006128:	d458      	bmi.n	80061dc <__sflush_r+0xc0>
 800612a:	684b      	ldr	r3, [r1, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	dc05      	bgt.n	800613c <__sflush_r+0x20>
 8006130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	dc02      	bgt.n	800613c <__sflush_r+0x20>
 8006136:	2000      	movs	r0, #0
 8006138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800613c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800613e:	2e00      	cmp	r6, #0
 8006140:	d0f9      	beq.n	8006136 <__sflush_r+0x1a>
 8006142:	2300      	movs	r3, #0
 8006144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006148:	682f      	ldr	r7, [r5, #0]
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	d032      	beq.n	80061b4 <__sflush_r+0x98>
 800614e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	075a      	lsls	r2, r3, #29
 8006154:	d505      	bpl.n	8006162 <__sflush_r+0x46>
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	1ac0      	subs	r0, r0, r3
 800615a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800615c:	b10b      	cbz	r3, 8006162 <__sflush_r+0x46>
 800615e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006160:	1ac0      	subs	r0, r0, r3
 8006162:	2300      	movs	r3, #0
 8006164:	4602      	mov	r2, r0
 8006166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006168:	6a21      	ldr	r1, [r4, #32]
 800616a:	4628      	mov	r0, r5
 800616c:	47b0      	blx	r6
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	d106      	bne.n	8006182 <__sflush_r+0x66>
 8006174:	6829      	ldr	r1, [r5, #0]
 8006176:	291d      	cmp	r1, #29
 8006178:	d82c      	bhi.n	80061d4 <__sflush_r+0xb8>
 800617a:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <__sflush_r+0x108>)
 800617c:	40ca      	lsrs	r2, r1
 800617e:	07d6      	lsls	r6, r2, #31
 8006180:	d528      	bpl.n	80061d4 <__sflush_r+0xb8>
 8006182:	2200      	movs	r2, #0
 8006184:	6062      	str	r2, [r4, #4]
 8006186:	04d9      	lsls	r1, r3, #19
 8006188:	6922      	ldr	r2, [r4, #16]
 800618a:	6022      	str	r2, [r4, #0]
 800618c:	d504      	bpl.n	8006198 <__sflush_r+0x7c>
 800618e:	1c42      	adds	r2, r0, #1
 8006190:	d101      	bne.n	8006196 <__sflush_r+0x7a>
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	b903      	cbnz	r3, 8006198 <__sflush_r+0x7c>
 8006196:	6560      	str	r0, [r4, #84]	; 0x54
 8006198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800619a:	602f      	str	r7, [r5, #0]
 800619c:	2900      	cmp	r1, #0
 800619e:	d0ca      	beq.n	8006136 <__sflush_r+0x1a>
 80061a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061a4:	4299      	cmp	r1, r3
 80061a6:	d002      	beq.n	80061ae <__sflush_r+0x92>
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 f8fd 	bl	80063a8 <_free_r>
 80061ae:	2000      	movs	r0, #0
 80061b0:	6360      	str	r0, [r4, #52]	; 0x34
 80061b2:	e7c1      	b.n	8006138 <__sflush_r+0x1c>
 80061b4:	6a21      	ldr	r1, [r4, #32]
 80061b6:	2301      	movs	r3, #1
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b0      	blx	r6
 80061bc:	1c41      	adds	r1, r0, #1
 80061be:	d1c7      	bne.n	8006150 <__sflush_r+0x34>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0c4      	beq.n	8006150 <__sflush_r+0x34>
 80061c6:	2b1d      	cmp	r3, #29
 80061c8:	d001      	beq.n	80061ce <__sflush_r+0xb2>
 80061ca:	2b16      	cmp	r3, #22
 80061cc:	d101      	bne.n	80061d2 <__sflush_r+0xb6>
 80061ce:	602f      	str	r7, [r5, #0]
 80061d0:	e7b1      	b.n	8006136 <__sflush_r+0x1a>
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d8:	81a3      	strh	r3, [r4, #12]
 80061da:	e7ad      	b.n	8006138 <__sflush_r+0x1c>
 80061dc:	690f      	ldr	r7, [r1, #16]
 80061de:	2f00      	cmp	r7, #0
 80061e0:	d0a9      	beq.n	8006136 <__sflush_r+0x1a>
 80061e2:	0793      	lsls	r3, r2, #30
 80061e4:	680e      	ldr	r6, [r1, #0]
 80061e6:	bf08      	it	eq
 80061e8:	694b      	ldreq	r3, [r1, #20]
 80061ea:	600f      	str	r7, [r1, #0]
 80061ec:	bf18      	it	ne
 80061ee:	2300      	movne	r3, #0
 80061f0:	eba6 0807 	sub.w	r8, r6, r7
 80061f4:	608b      	str	r3, [r1, #8]
 80061f6:	f1b8 0f00 	cmp.w	r8, #0
 80061fa:	dd9c      	ble.n	8006136 <__sflush_r+0x1a>
 80061fc:	6a21      	ldr	r1, [r4, #32]
 80061fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006200:	4643      	mov	r3, r8
 8006202:	463a      	mov	r2, r7
 8006204:	4628      	mov	r0, r5
 8006206:	47b0      	blx	r6
 8006208:	2800      	cmp	r0, #0
 800620a:	dc06      	bgt.n	800621a <__sflush_r+0xfe>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e78e      	b.n	8006138 <__sflush_r+0x1c>
 800621a:	4407      	add	r7, r0
 800621c:	eba8 0800 	sub.w	r8, r8, r0
 8006220:	e7e9      	b.n	80061f6 <__sflush_r+0xda>
 8006222:	bf00      	nop
 8006224:	20400001 	.word	0x20400001

08006228 <_fflush_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	690b      	ldr	r3, [r1, #16]
 800622c:	4605      	mov	r5, r0
 800622e:	460c      	mov	r4, r1
 8006230:	b913      	cbnz	r3, 8006238 <_fflush_r+0x10>
 8006232:	2500      	movs	r5, #0
 8006234:	4628      	mov	r0, r5
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	b118      	cbz	r0, 8006242 <_fflush_r+0x1a>
 800623a:	6983      	ldr	r3, [r0, #24]
 800623c:	b90b      	cbnz	r3, 8006242 <_fflush_r+0x1a>
 800623e:	f7ff fa15 	bl	800566c <__sinit>
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <_fflush_r+0x6c>)
 8006244:	429c      	cmp	r4, r3
 8006246:	d11b      	bne.n	8006280 <_fflush_r+0x58>
 8006248:	686c      	ldr	r4, [r5, #4]
 800624a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0ef      	beq.n	8006232 <_fflush_r+0xa>
 8006252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006254:	07d0      	lsls	r0, r2, #31
 8006256:	d404      	bmi.n	8006262 <_fflush_r+0x3a>
 8006258:	0599      	lsls	r1, r3, #22
 800625a:	d402      	bmi.n	8006262 <_fflush_r+0x3a>
 800625c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625e:	f7ff faa3 	bl	80057a8 <__retarget_lock_acquire_recursive>
 8006262:	4628      	mov	r0, r5
 8006264:	4621      	mov	r1, r4
 8006266:	f7ff ff59 	bl	800611c <__sflush_r>
 800626a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800626c:	07da      	lsls	r2, r3, #31
 800626e:	4605      	mov	r5, r0
 8006270:	d4e0      	bmi.n	8006234 <_fflush_r+0xc>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	059b      	lsls	r3, r3, #22
 8006276:	d4dd      	bmi.n	8006234 <_fflush_r+0xc>
 8006278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800627a:	f7ff fa96 	bl	80057aa <__retarget_lock_release_recursive>
 800627e:	e7d9      	b.n	8006234 <_fflush_r+0xc>
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <_fflush_r+0x70>)
 8006282:	429c      	cmp	r4, r3
 8006284:	d101      	bne.n	800628a <_fflush_r+0x62>
 8006286:	68ac      	ldr	r4, [r5, #8]
 8006288:	e7df      	b.n	800624a <_fflush_r+0x22>
 800628a:	4b04      	ldr	r3, [pc, #16]	; (800629c <_fflush_r+0x74>)
 800628c:	429c      	cmp	r4, r3
 800628e:	bf08      	it	eq
 8006290:	68ec      	ldreq	r4, [r5, #12]
 8006292:	e7da      	b.n	800624a <_fflush_r+0x22>
 8006294:	08006560 	.word	0x08006560
 8006298:	08006580 	.word	0x08006580
 800629c:	08006540 	.word	0x08006540

080062a0 <_lseek_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d07      	ldr	r5, [pc, #28]	; (80062c0 <_lseek_r+0x20>)
 80062a4:	4604      	mov	r4, r0
 80062a6:	4608      	mov	r0, r1
 80062a8:	4611      	mov	r1, r2
 80062aa:	2200      	movs	r2, #0
 80062ac:	602a      	str	r2, [r5, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f7fa ff1e 	bl	80010f0 <_lseek>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_lseek_r+0x1e>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_lseek_r+0x1e>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	2000029c 	.word	0x2000029c

080062c4 <__swhatbuf_r>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	460e      	mov	r6, r1
 80062c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062cc:	2900      	cmp	r1, #0
 80062ce:	b096      	sub	sp, #88	; 0x58
 80062d0:	4614      	mov	r4, r2
 80062d2:	461d      	mov	r5, r3
 80062d4:	da08      	bge.n	80062e8 <__swhatbuf_r+0x24>
 80062d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	602a      	str	r2, [r5, #0]
 80062de:	061a      	lsls	r2, r3, #24
 80062e0:	d410      	bmi.n	8006304 <__swhatbuf_r+0x40>
 80062e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e6:	e00e      	b.n	8006306 <__swhatbuf_r+0x42>
 80062e8:	466a      	mov	r2, sp
 80062ea:	f000 f8bb 	bl	8006464 <_fstat_r>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	dbf1      	blt.n	80062d6 <__swhatbuf_r+0x12>
 80062f2:	9a01      	ldr	r2, [sp, #4]
 80062f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062fc:	425a      	negs	r2, r3
 80062fe:	415a      	adcs	r2, r3
 8006300:	602a      	str	r2, [r5, #0]
 8006302:	e7ee      	b.n	80062e2 <__swhatbuf_r+0x1e>
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	2000      	movs	r0, #0
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	b016      	add	sp, #88	; 0x58
 800630c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006310 <__smakebuf_r>:
 8006310:	898b      	ldrh	r3, [r1, #12]
 8006312:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006314:	079d      	lsls	r5, r3, #30
 8006316:	4606      	mov	r6, r0
 8006318:	460c      	mov	r4, r1
 800631a:	d507      	bpl.n	800632c <__smakebuf_r+0x1c>
 800631c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	6123      	str	r3, [r4, #16]
 8006324:	2301      	movs	r3, #1
 8006326:	6163      	str	r3, [r4, #20]
 8006328:	b002      	add	sp, #8
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	ab01      	add	r3, sp, #4
 800632e:	466a      	mov	r2, sp
 8006330:	f7ff ffc8 	bl	80062c4 <__swhatbuf_r>
 8006334:	9900      	ldr	r1, [sp, #0]
 8006336:	4605      	mov	r5, r0
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff fa57 	bl	80057ec <_malloc_r>
 800633e:	b948      	cbnz	r0, 8006354 <__smakebuf_r+0x44>
 8006340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006344:	059a      	lsls	r2, r3, #22
 8006346:	d4ef      	bmi.n	8006328 <__smakebuf_r+0x18>
 8006348:	f023 0303 	bic.w	r3, r3, #3
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	81a3      	strh	r3, [r4, #12]
 8006352:	e7e3      	b.n	800631c <__smakebuf_r+0xc>
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <__smakebuf_r+0x7c>)
 8006356:	62b3      	str	r3, [r6, #40]	; 0x28
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	6020      	str	r0, [r4, #0]
 800635c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	9b00      	ldr	r3, [sp, #0]
 8006364:	6163      	str	r3, [r4, #20]
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	6120      	str	r0, [r4, #16]
 800636a:	b15b      	cbz	r3, 8006384 <__smakebuf_r+0x74>
 800636c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006370:	4630      	mov	r0, r6
 8006372:	f000 f889 	bl	8006488 <_isatty_r>
 8006376:	b128      	cbz	r0, 8006384 <__smakebuf_r+0x74>
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	f023 0303 	bic.w	r3, r3, #3
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	89a0      	ldrh	r0, [r4, #12]
 8006386:	4305      	orrs	r5, r0
 8006388:	81a5      	strh	r5, [r4, #12]
 800638a:	e7cd      	b.n	8006328 <__smakebuf_r+0x18>
 800638c:	08005605 	.word	0x08005605

08006390 <__malloc_lock>:
 8006390:	4801      	ldr	r0, [pc, #4]	; (8006398 <__malloc_lock+0x8>)
 8006392:	f7ff ba09 	b.w	80057a8 <__retarget_lock_acquire_recursive>
 8006396:	bf00      	nop
 8006398:	20000290 	.word	0x20000290

0800639c <__malloc_unlock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_unlock+0x8>)
 800639e:	f7ff ba04 	b.w	80057aa <__retarget_lock_release_recursive>
 80063a2:	bf00      	nop
 80063a4:	20000290 	.word	0x20000290

080063a8 <_free_r>:
 80063a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063aa:	2900      	cmp	r1, #0
 80063ac:	d044      	beq.n	8006438 <_free_r+0x90>
 80063ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b2:	9001      	str	r0, [sp, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f1a1 0404 	sub.w	r4, r1, #4
 80063ba:	bfb8      	it	lt
 80063bc:	18e4      	addlt	r4, r4, r3
 80063be:	f7ff ffe7 	bl	8006390 <__malloc_lock>
 80063c2:	4a1e      	ldr	r2, [pc, #120]	; (800643c <_free_r+0x94>)
 80063c4:	9801      	ldr	r0, [sp, #4]
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	b933      	cbnz	r3, 80063d8 <_free_r+0x30>
 80063ca:	6063      	str	r3, [r4, #4]
 80063cc:	6014      	str	r4, [r2, #0]
 80063ce:	b003      	add	sp, #12
 80063d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063d4:	f7ff bfe2 	b.w	800639c <__malloc_unlock>
 80063d8:	42a3      	cmp	r3, r4
 80063da:	d908      	bls.n	80063ee <_free_r+0x46>
 80063dc:	6825      	ldr	r5, [r4, #0]
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	428b      	cmp	r3, r1
 80063e2:	bf01      	itttt	eq
 80063e4:	6819      	ldreq	r1, [r3, #0]
 80063e6:	685b      	ldreq	r3, [r3, #4]
 80063e8:	1949      	addeq	r1, r1, r5
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	e7ed      	b.n	80063ca <_free_r+0x22>
 80063ee:	461a      	mov	r2, r3
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b10b      	cbz	r3, 80063f8 <_free_r+0x50>
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d9fa      	bls.n	80063ee <_free_r+0x46>
 80063f8:	6811      	ldr	r1, [r2, #0]
 80063fa:	1855      	adds	r5, r2, r1
 80063fc:	42a5      	cmp	r5, r4
 80063fe:	d10b      	bne.n	8006418 <_free_r+0x70>
 8006400:	6824      	ldr	r4, [r4, #0]
 8006402:	4421      	add	r1, r4
 8006404:	1854      	adds	r4, r2, r1
 8006406:	42a3      	cmp	r3, r4
 8006408:	6011      	str	r1, [r2, #0]
 800640a:	d1e0      	bne.n	80063ce <_free_r+0x26>
 800640c:	681c      	ldr	r4, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	6053      	str	r3, [r2, #4]
 8006412:	4421      	add	r1, r4
 8006414:	6011      	str	r1, [r2, #0]
 8006416:	e7da      	b.n	80063ce <_free_r+0x26>
 8006418:	d902      	bls.n	8006420 <_free_r+0x78>
 800641a:	230c      	movs	r3, #12
 800641c:	6003      	str	r3, [r0, #0]
 800641e:	e7d6      	b.n	80063ce <_free_r+0x26>
 8006420:	6825      	ldr	r5, [r4, #0]
 8006422:	1961      	adds	r1, r4, r5
 8006424:	428b      	cmp	r3, r1
 8006426:	bf04      	itt	eq
 8006428:	6819      	ldreq	r1, [r3, #0]
 800642a:	685b      	ldreq	r3, [r3, #4]
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	bf04      	itt	eq
 8006430:	1949      	addeq	r1, r1, r5
 8006432:	6021      	streq	r1, [r4, #0]
 8006434:	6054      	str	r4, [r2, #4]
 8006436:	e7ca      	b.n	80063ce <_free_r+0x26>
 8006438:	b003      	add	sp, #12
 800643a:	bd30      	pop	{r4, r5, pc}
 800643c:	20000294 	.word	0x20000294

08006440 <_read_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	; (8006460 <_read_r+0x20>)
 8006444:	4604      	mov	r4, r0
 8006446:	4608      	mov	r0, r1
 8006448:	4611      	mov	r1, r2
 800644a:	2200      	movs	r2, #0
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f7fa fe0a 	bl	8001068 <_read>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_read_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_read_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	2000029c 	.word	0x2000029c

08006464 <_fstat_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d07      	ldr	r5, [pc, #28]	; (8006484 <_fstat_r+0x20>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	f7fa fe22 	bl	80010ba <_fstat>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	d102      	bne.n	8006480 <_fstat_r+0x1c>
 800647a:	682b      	ldr	r3, [r5, #0]
 800647c:	b103      	cbz	r3, 8006480 <_fstat_r+0x1c>
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	bd38      	pop	{r3, r4, r5, pc}
 8006482:	bf00      	nop
 8006484:	2000029c 	.word	0x2000029c

08006488 <_isatty_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d06      	ldr	r5, [pc, #24]	; (80064a4 <_isatty_r+0x1c>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	f7fa fe21 	bl	80010da <_isatty>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_isatty_r+0x1a>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_isatty_r+0x1a>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	2000029c 	.word	0x2000029c

080064a8 <_init>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	bf00      	nop
 80064ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ae:	bc08      	pop	{r3}
 80064b0:	469e      	mov	lr, r3
 80064b2:	4770      	bx	lr

080064b4 <_fini>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	bf00      	nop
 80064b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ba:	bc08      	pop	{r3}
 80064bc:	469e      	mov	lr, r3
 80064be:	4770      	bx	lr
