
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a74  08005a74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a7c  08005a7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08005af4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005af4  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f223  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222a  00000000  00000000  0002f2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00032170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027127  00000000  00000000  00032d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec92  00000000  00000000  00059e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed350  00000000  00000000  00068ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155e21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  00155e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800595c 	.word	0x0800595c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800595c 	.word	0x0800595c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define MainBuf_SIZE 20
uint8_t MainBuf[MainBuf_SIZE];
int _write(int file, char *ptr, int len) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
		ITM_SendChar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffc9 	bl	8000574 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
	}
	return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b098      	sub	sp, #96	; 0x60
 8000600:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	uint8_t Data[64];

	for (int i = 0; i < 64; i++) {
 8000602:	2300      	movs	r3, #0
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000606:	e021      	b.n	800064c <main+0x50>
		if (i <= 7 || (i >= 24 && i <= 31)) {
 8000608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800060a:	2b07      	cmp	r3, #7
 800060c:	dd05      	ble.n	800061a <main+0x1e>
 800060e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000610:	2b17      	cmp	r3, #23
 8000612:	dd09      	ble.n	8000628 <main+0x2c>
 8000614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000616:	2b1f      	cmp	r3, #31
 8000618:	dc06      	bgt.n	8000628 <main+0x2c>
			Data[i] = one;
 800061a:	f107 020c 	add.w	r2, r7, #12
 800061e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000620:	4413      	add	r3, r2
 8000622:	22f0      	movs	r2, #240	; 0xf0
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e005      	b.n	8000634 <main+0x38>

		} else
			Data[i] = zero;
 8000628:	f107 020c 	add.w	r2, r7, #12
 800062c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800062e:	4413      	add	r3, r2
 8000630:	22c0      	movs	r2, #192	; 0xc0
 8000632:	701a      	strb	r2, [r3, #0]
		if (i > 47) {
 8000634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000636:	2b2f      	cmp	r3, #47	; 0x2f
 8000638:	dd05      	ble.n	8000646 <main+0x4a>
			Data[i] = life;
 800063a:	f107 020c 	add.w	r2, r7, #12
 800063e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000640:	4413      	add	r3, r2
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 64; i++) {
 8000646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000648:	3301      	adds	r3, #1
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800064c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800064e:	2b3f      	cmp	r3, #63	; 0x3f
 8000650:	ddda      	ble.n	8000608 <main+0xc>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000652:	f000 fb9c 	bl	8000d8e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000656:	f000 f839 	bl	80006cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800065a:	f000 f929 	bl	80008b0 <MX_GPIO_Init>
	MX_DMA_Init();
 800065e:	f000 f8f5 	bl	800084c <MX_DMA_Init>
	MX_SPI3_Init();
 8000662:	f000 f885 	bl	8000770 <MX_SPI3_Init>
	MX_USART2_UART_Init();
 8000666:	f000 f8c1 	bl	80007ec <MX_USART2_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	char input[6];
	memset(input, 0x00, 6);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2206      	movs	r2, #6
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f004 f9dd 	bl	8004a30 <memset>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//RGB
		HAL_SPI_Transmit(&hspi3, Data, 64, 1);
 8000676:	f107 010c 	add.w	r1, r7, #12
 800067a:	2301      	movs	r3, #1
 800067c:	2240      	movs	r2, #64	; 0x40
 800067e:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0xc4>)
 8000680:	f002 fc83 	bl	8002f8a <HAL_SPI_Transmit>
		//printf("piwo \n");
//Odczyt z UART

		HAL_UART_Receive(&huart2, (uint8_t*) input, 6, HAL_MAX_DELAY);
 8000684:	1d39      	adds	r1, r7, #4
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	2206      	movs	r2, #6
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <main+0xc8>)
 800068e:	f003 f8bd 	bl	800380c <HAL_UART_Receive>

		printf("LED1: %d %d %d LED2: %d %d %d \n", input[0], input[1], input[2],
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	461c      	mov	r4, r3
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	461d      	mov	r5, r3
				input[3], input[4], input[5]);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	7a3a      	ldrb	r2, [r7, #8]
 80006a2:	7a79      	ldrb	r1, [r7, #9]
		printf("LED1: %d %d %d LED2: %d %d %d \n", input[0], input[1], input[2],
 80006a4:	9102      	str	r1, [sp, #8]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	462b      	mov	r3, r5
 80006ac:	4622      	mov	r2, r4
 80006ae:	4601      	mov	r1, r0
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <main+0xcc>)
 80006b2:	f004 f9c5 	bl	8004a40 <iprintf>
		HAL_Delay(250);
 80006b6:	20fa      	movs	r0, #250	; 0xfa
 80006b8:	f000 fbde 	bl	8000e78 <HAL_Delay>
	while (1) {
 80006bc:	e7db      	b.n	8000676 <main+0x7a>
 80006be:	bf00      	nop
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	20000138 	.word	0x20000138
 80006c8:	08005974 	.word	0x08005974

080006cc <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	; 0x58
 80006d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2244      	movs	r2, #68	; 0x44
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 f9a8 	bl	8004a30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f2:	f001 f895 	bl	8001820 <HAL_PWREx_ControlVoltageScaling>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006fc:	f000 f8fc 	bl	80008f8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000708:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070a:	2310      	movs	r3, #16
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000712:	2302      	movs	r3, #2
 8000714:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 12;
 800071a:	230c      	movs	r3, #12
 800071c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800071e:	2307      	movs	r3, #7
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000726:	2304      	movs	r3, #4
 8000728:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f8cc 	bl	80018cc <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x72>
		Error_Handler();
 800073a:	f000 f8dd 	bl	80008f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2303      	movs	r3, #3
 8000744:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000752:	463b      	mov	r3, r7
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fc94 	bl	8002084 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x9a>
		Error_Handler();
 8000762:	f000 f8c9 	bl	80008f8 <Error_Handler>
	}
}
 8000766:	bf00      	nop
 8000768:	3758      	adds	r7, #88	; 0x58
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_SPI3_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_SPI3_Init+0x74>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI3_Init+0x74>)
 800078a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800078e:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI3_Init+0x74>)
 800079e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a2:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007a6:	2210      	movs	r2, #16
 80007a8:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007be:	2207      	movs	r2, #7
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007d0:	f002 fb38 	bl	8002e44 <HAL_SPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_SPI3_Init+0x6e>
		Error_Handler();
 80007da:	f000 f88d 	bl	80008f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	40003c00 	.word	0x40003c00

080007ec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_USART2_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000830:	f002 ff9e 	bl	8003770 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800083a:	f000 f85d 	bl	80008f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000138 	.word	0x20000138
 8000848:	40004400 	.word	0x40004400

0800084c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_DMA_Init+0x60>)
 8000854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_DMA_Init+0x60>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6493      	str	r3, [r2, #72]	; 0x48
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_DMA_Init+0x60>)
 8000860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_DMA_Init+0x60>)
 800086c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_DMA_Init+0x60>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6493      	str	r3, [r2, #72]	; 0x48
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_DMA_Init+0x60>)
 8000878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2010      	movs	r0, #16
 8000888:	f000 fbf5 	bl	8001076 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800088c:	2010      	movs	r0, #16
 800088e:	f000 fc0e 	bl	80010ae <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2039      	movs	r0, #57	; 0x39
 8000898:	f000 fbed 	bl	8001076 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800089c:	2039      	movs	r0, #57	; 0x39
 800089e:	f000 fc06 	bl	80010ae <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_GPIO_Init+0x44>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <MX_GPIO_Init+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_GPIO_Init+0x44>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_GPIO_Init+0x44>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <MX_GPIO_Init+0x44>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_GPIO_Init+0x44>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x44>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_MspInit+0x44>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6613      	str	r3, [r2, #96]	; 0x60
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x44>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6593      	str	r3, [r2, #88]	; 0x58
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <HAL_SPI_MspInit+0xe0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d159      	bne.n	8000a22 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <HAL_SPI_MspInit+0xe4>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <HAL_SPI_MspInit+0xe4>)
 8000974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <HAL_SPI_MspInit+0xe4>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <HAL_SPI_MspInit+0xe4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a29      	ldr	r2, [pc, #164]	; (8000a30 <HAL_SPI_MspInit+0xe4>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <HAL_SPI_MspInit+0xe4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800099e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b0:	2306      	movs	r3, #6
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	481e      	ldr	r0, [pc, #120]	; (8000a34 <HAL_SPI_MspInit+0xe8>)
 80009bc:	f000 fd78 	bl	80014b0 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <HAL_SPI_MspInit+0xf0>)
 80009c4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009ce:	2210      	movs	r2, #16
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80009f6:	4810      	ldr	r0, [pc, #64]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 80009f8:	f000 fb74 	bl	80010e4 <HAL_DMA_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000a02:	f7ff ff79 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 8000a0a:	655a      	str	r2, [r3, #84]	; 0x54
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_SPI_MspInit+0xec>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2033      	movs	r0, #51	; 0x33
 8000a18:	f000 fb2d 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000a1c:	2033      	movs	r0, #51	; 0x33
 8000a1e:	f000 fb46 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40003c00 	.word	0x40003c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000800 	.word	0x48000800
 8000a38:	200000f0 	.word	0x200000f0
 8000a3c:	4002041c 	.word	0x4002041c

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ac      	sub	sp, #176	; 0xb0
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2288      	movs	r2, #136	; 0x88
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 ffe5 	bl	8004a30 <memset>
  if(huart->Instance==USART2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a3a      	ldr	r2, [pc, #232]	; (8000b54 <HAL_UART_MspInit+0x114>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d16c      	bne.n	8000b4a <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fd25 	bl	80024cc <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a88:	f7ff ff36 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8c:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <HAL_UART_MspInit+0x118>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a90:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_UART_MspInit+0x118>)
 8000a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a96:	6593      	str	r3, [r2, #88]	; 0x58
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_UART_MspInit+0x118>)
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <HAL_UART_MspInit+0x118>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	4a2b      	ldr	r2, [pc, #172]	; (8000b58 <HAL_UART_MspInit+0x118>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <HAL_UART_MspInit+0x118>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000abc:	230c      	movs	r3, #12
 8000abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f000 fce4 	bl	80014b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000aea:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <HAL_UART_MspInit+0x120>)
 8000aec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b14:	2220      	movs	r2, #32
 8000b16:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b1e:	480f      	ldr	r0, [pc, #60]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b20:	f000 fae0 	bl	80010e4 <HAL_DMA_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000b2a:	f7ff fee5 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b32:	671a      	str	r2, [r3, #112]	; 0x70
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_UART_MspInit+0x11c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2026      	movs	r0, #38	; 0x26
 8000b40:	f000 fa99 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b44:	2026      	movs	r0, #38	; 0x26
 8000b46:	f000 fab2 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	37b0      	adds	r7, #176	; 0xb0
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	200001bc 	.word	0x200001bc
 8000b60:	4002006c 	.word	0x4002006c

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f942 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <DMA1_Channel6_IRQHandler+0x10>)
 8000bbe:	f000 fbc8 	bl	8001352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200001bc 	.word	0x200001bc

08000bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART2_IRQHandler+0x10>)
 8000bd2:	f002 feed 	bl	80039b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000138 	.word	0x20000138

08000be0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <SPI3_IRQHandler+0x10>)
 8000be6:	f002 fb3f 	bl	8003268 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000008c 	.word	0x2000008c

08000bf4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DMA2_Channel2_IRQHandler+0x10>)
 8000bfa:	f000 fbaa 	bl	8001352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000f0 	.word	0x200000f0

08000c08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e00a      	b.n	8000c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c1a:	f3af 8000 	nop.w
 8000c1e:	4601      	mov	r1, r0
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbf0      	blt.n	8000c1a <_read+0x12>
  }

  return len;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_isatty>:

int _isatty(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f003 fe7e 	bl	80049dc <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20018000 	.word	0x20018000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	20000204 	.word	0x20000204
 8000d14:	20000220 	.word	0x20000220

08000d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d40:	f7ff ffea 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f003 fe3d 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fc45 	bl	80005fc <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d80:	08005a84 	.word	0x08005a84
  ldr r2, =_sbss
 8000d84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d88:	2000021c 	.word	0x2000021c

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>

08000d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f961 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f80e 	bl	8000dc0 <HAL_InitTick>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	e001      	b.n	8000db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db0:	f7ff fda8 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_InitTick+0x6c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_InitTick+0x70>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x6c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f96d 	bl	80010ca <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d809      	bhi.n	8000e10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f937 	bl	8001076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_InitTick+0x74>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e007      	b.n	8000e20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e004      	b.n	8000e20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e001      	b.n	8000e20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000208 	.word	0x20000208

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000208 	.word	0x20000208

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff3e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff31 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e098      	b.n	8001228 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <HAL_DMA_Init+0x150>)
 80010fe:	429a      	cmp	r2, r3
 8001100:	d80f      	bhi.n	8001122 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <HAL_DMA_Init+0x154>)
 800110a:	4413      	add	r3, r2
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <HAL_DMA_Init+0x158>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	009a      	lsls	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_DMA_Init+0x15c>)
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
 8001120:	e00e      	b.n	8001140 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b46      	ldr	r3, [pc, #280]	; (8001244 <HAL_DMA_Init+0x160>)
 800112a:	4413      	add	r3, r2
 800112c:	4a43      	ldr	r2, [pc, #268]	; (800123c <HAL_DMA_Init+0x158>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a42      	ldr	r2, [pc, #264]	; (8001248 <HAL_DMA_Init+0x164>)
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800115a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800119a:	d039      	beq.n	8001210 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_DMA_Init+0x15c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d11a      	bne.n	80011dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_DMA_Init+0x168>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f003 031c 	and.w	r3, r3, #28
 80011b2:	210f      	movs	r1, #15
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4924      	ldr	r1, [pc, #144]	; (800124c <HAL_DMA_Init+0x168>)
 80011bc:	4013      	ands	r3, r2
 80011be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_DMA_Init+0x168>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	f003 031c 	and.w	r3, r3, #28
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	491d      	ldr	r1, [pc, #116]	; (800124c <HAL_DMA_Init+0x168>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
 80011da:	e019      	b.n	8001210 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_DMA_Init+0x16c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	f003 031c 	and.w	r3, r3, #28
 80011e8:	210f      	movs	r1, #15
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4917      	ldr	r1, [pc, #92]	; (8001250 <HAL_DMA_Init+0x16c>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_DMA_Init+0x16c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6859      	ldr	r1, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 031c 	and.w	r3, r3, #28
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	4911      	ldr	r1, [pc, #68]	; (8001250 <HAL_DMA_Init+0x16c>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40020407 	.word	0x40020407
 8001238:	bffdfff8 	.word	0xbffdfff8
 800123c:	cccccccd 	.word	0xcccccccd
 8001240:	40020000 	.word	0x40020000
 8001244:	bffdfbf8 	.word	0xbffdfbf8
 8001248:	40020400 	.word	0x40020400
 800124c:	400200a8 	.word	0x400200a8
 8001250:	400204a8 	.word	0x400204a8

08001254 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d008      	beq.n	800127e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2204      	movs	r2, #4
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e022      	b.n	80012c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 020e 	bic.w	r2, r2, #14
 800128c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f003 021c 	and.w	r2, r3, #28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d005      	beq.n	80012f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2204      	movs	r2, #4
 80012ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e029      	b.n	8001348 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 020e 	bic.w	r2, r2, #14
 8001302:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	f003 021c 	and.w	r2, r3, #28
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
    }
  }
  return status;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	2204      	movs	r2, #4
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d026      	beq.n	80013cc <HAL_DMA_IRQHandler+0x7a>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d021      	beq.n	80013cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d107      	bne.n	80013a6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0204 	bic.w	r2, r2, #4
 80013a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 021c 	and.w	r2, r3, #28
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2104      	movs	r1, #4
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d071      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80013ca:	e06c      	b.n	80014a6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	f003 031c 	and.w	r3, r3, #28
 80013d4:	2202      	movs	r2, #2
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02e      	beq.n	800143e <HAL_DMA_IRQHandler+0xec>
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d029      	beq.n	800143e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10b      	bne.n	8001410 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 020a 	bic.w	r2, r2, #10
 8001406:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	f003 021c 	and.w	r2, r3, #28
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2102      	movs	r1, #2
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	2b00      	cmp	r3, #0
 8001432:	d038      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800143c:	e033      	b.n	80014a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 031c 	and.w	r3, r3, #28
 8001446:	2208      	movs	r2, #8
 8001448:	409a      	lsls	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d02a      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x156>
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d025      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 020e 	bic.w	r2, r2, #14
 800146a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f003 021c 	and.w	r2, r3, #28
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
}
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	e17f      	b.n	80017c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8171 	beq.w	80017ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d005      	beq.n	80014f0 <HAL_GPIO_Init+0x40>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d130      	bne.n	8001552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001526:	2201      	movs	r2, #1
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	f003 0201 	and.w	r2, r3, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b03      	cmp	r3, #3
 800155c:	d118      	bne.n	8001590 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001564:	2201      	movs	r2, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	f003 0201 	and.w	r2, r3, #1
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b03      	cmp	r3, #3
 800159a:	d017      	beq.n	80015cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d123      	bne.n	8001620 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	6939      	ldr	r1, [r7, #16]
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80ac 	beq.w	80017ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_GPIO_Init+0x330>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	4a5e      	ldr	r2, [pc, #376]	; (80017e0 <HAL_GPIO_Init+0x330>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	; 0x60
 800166e:	4b5c      	ldr	r3, [pc, #368]	; (80017e0 <HAL_GPIO_Init+0x330>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800167a:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <HAL_GPIO_Init+0x334>)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016a4:	d025      	beq.n	80016f2 <HAL_GPIO_Init+0x242>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	; (80017e8 <HAL_GPIO_Init+0x338>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01f      	beq.n	80016ee <HAL_GPIO_Init+0x23e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4e      	ldr	r2, [pc, #312]	; (80017ec <HAL_GPIO_Init+0x33c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x23a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <HAL_GPIO_Init+0x340>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x236>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_GPIO_Init+0x344>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x232>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <HAL_GPIO_Init+0x348>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x22e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x34c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x22a>
 80016d6:	2306      	movs	r3, #6
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_Init+0x244>
 80016da:	2307      	movs	r3, #7
 80016dc:	e00a      	b.n	80016f4 <HAL_GPIO_Init+0x244>
 80016de:	2305      	movs	r3, #5
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x244>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x244>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x244>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x244>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x244>
 80016f2:	2300      	movs	r3, #0
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001704:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_GPIO_Init+0x350>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001736:	4a32      	ldr	r2, [pc, #200]	; (8001800 <HAL_GPIO_Init+0x350>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_GPIO_Init+0x350>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_GPIO_Init+0x350>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_GPIO_Init+0x350>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178a:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_GPIO_Init+0x350>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_GPIO_Init+0x350>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <HAL_GPIO_Init+0x350>)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f47f ae78 	bne.w	80014c0 <HAL_GPIO_Init+0x10>
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000800 	.word	0x48000800
 80017f0:	48000c00 	.word	0x48000c00
 80017f4:	48001000 	.word	0x48001000
 80017f8:	48001400 	.word	0x48001400
 80017fc:	48001800 	.word	0x48001800
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <HAL_PWREx_GetVoltageRange+0x18>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40007000 	.word	0x40007000

08001820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182e:	d130      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800183c:	d038      	beq.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2232      	movs	r2, #50	; 0x32
 8001854:	fb02 f303 	mul.w	r3, r2, r3
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001864:	e002      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3b01      	subs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001878:	d102      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x60>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f2      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188c:	d110      	bne.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e00f      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189e:	d007      	beq.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40007000 	.word	0x40007000
 80018c4:	20000000 	.word	0x20000000
 80018c8:	431bde83 	.word	0x431bde83

080018cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e3ca      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018de:	4b97      	ldr	r3, [pc, #604]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e8:	4b94      	ldr	r3, [pc, #592]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80e4 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_RCC_OscConfig+0x4a>
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	f040 808b 	bne.w	8001a24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b01      	cmp	r3, #1
 8001912:	f040 8087 	bne.w	8001a24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001916:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x62>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e3a2      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1a      	ldr	r2, [r3, #32]
 8001932:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_RCC_OscConfig+0x7c>
 800193e:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001946:	e005      	b.n	8001954 <HAL_RCC_OscConfig+0x88>
 8001948:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001954:	4293      	cmp	r3, r2
 8001956:	d223      	bcs.n	80019a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fd55 	bl	800240c <RCC_SetFlashLatencyFromMSIRange>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e383      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a72      	ldr	r2, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b70      	ldr	r3, [pc, #448]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	496d      	ldr	r1, [pc, #436]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	4968      	ldr	r1, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
 800199e:	e025      	b.n	80019ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4960      	ldr	r1, [pc, #384]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	495b      	ldr	r1, [pc, #364]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fd15 	bl	800240c <RCC_SetFlashLatencyFromMSIRange>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e343      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ec:	f000 fc4a 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	4950      	ldr	r1, [pc, #320]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <HAL_RCC_OscConfig+0x278>)
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f9d5 	bl	8000dc0 <HAL_InitTick>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d052      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	e327      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d032      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a42      	ldr	r2, [pc, #264]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fa12 	bl	8000e60 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a40:	f7ff fa0e 	bl	8000e60 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e310      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a52:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a36      	ldr	r2, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4931      	ldr	r1, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	492c      	ldr	r1, [pc, #176]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e01a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f9df 	bl	8000e60 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f9db 	bl	8000e60 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e2dd      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x1da>
 8001ac4:	e000      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d074      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x21a>
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b0c      	cmp	r3, #12
 8001ade:	d10e      	bne.n	8001afe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d10b      	bne.n	8001afe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d064      	beq.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d160      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e2ba      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x24a>
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e026      	b.n	8001b64 <HAL_RCC_OscConfig+0x298>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1e:	d115      	bne.n	8001b4c <HAL_RCC_OscConfig+0x280>
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a02      	ldr	r2, [pc, #8]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e014      	b.n	8001b64 <HAL_RCC_OscConfig+0x298>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08005994 	.word	0x08005994
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	4ba0      	ldr	r3, [pc, #640]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a9f      	ldr	r2, [pc, #636]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b9d      	ldr	r3, [pc, #628]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a9c      	ldr	r2, [pc, #624]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f978 	bl	8000e60 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f974 	bl	8000e60 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e276      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x2a8>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f964 	bl	8000e60 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f960 	bl	8000e60 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e262      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2d0>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d060      	beq.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_OscConfig+0x310>
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d119      	bne.n	8001c0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d116      	bne.n	8001c0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bdc:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x328>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e23f      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	4973      	ldr	r1, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c08:	e040      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d023      	beq.n	8001c5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c12:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f91f 	bl	8000e60 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff f91b 	bl	8000e60 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e21d      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c38:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b62      	ldr	r3, [pc, #392]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	495f      	ldr	r1, [pc, #380]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	e018      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a5c      	ldr	r2, [pc, #368]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f8fb 	bl	8000e60 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f8f7 	bl	8000e60 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1f9      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d03c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01c      	beq.n	8001cda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	4a4a      	ldr	r2, [pc, #296]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f8d6 	bl	8000e60 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff f8d2 	bl	8000e60 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1d4      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ef      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x3ec>
 8001cd8:	e01b      	b.n	8001d12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	4a3b      	ldr	r2, [pc, #236]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff f8b9 	bl	8000e60 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f8b5 	bl	8000e60 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1b7      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ef      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80a6 	beq.w	8001e6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x508>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d118      	bne.n	8001d8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <HAL_RCC_OscConfig+0x508>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <HAL_RCC_OscConfig+0x508>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d64:	f7ff f87c 	bl	8000e60 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6c:	f7ff f878 	bl	8000e60 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e17a      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCC_OscConfig+0x508>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d108      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4d8>
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da2:	e029      	b.n	8001df8 <HAL_RCC_OscConfig+0x52c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d115      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x50c>
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a03      	ldr	r2, [pc, #12]	; (8001dd0 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	e014      	b.n	8001df8 <HAL_RCC_OscConfig+0x52c>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	4b9c      	ldr	r3, [pc, #624]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	4a9b      	ldr	r2, [pc, #620]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de8:	4b98      	ldr	r3, [pc, #608]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a97      	ldr	r2, [pc, #604]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d016      	beq.n	8001e2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f82e 	bl	8000e60 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff f82a 	bl	8000e60 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e12a      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ed      	beq.n	8001e08 <HAL_RCC_OscConfig+0x53c>
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f817 	bl	8000e60 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff f813 	bl	8000e60 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e113      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4c:	4b7f      	ldr	r3, [pc, #508]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ed      	bne.n	8001e36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e5a:	7ffb      	ldrb	r3, [r7, #31]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a79      	ldr	r2, [pc, #484]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80fe 	beq.w	8002072 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	f040 80d0 	bne.w	8002020 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e80:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d130      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d127      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d11f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec0:	2a07      	cmp	r2, #7
 8001ec2:	bf14      	ite	ne
 8001ec4:	2201      	movne	r2, #1
 8001ec6:	2200      	moveq	r2, #0
 8001ec8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d113      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d06e      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d069      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0ad      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f24:	f7fe ff9c 	bl	8000e60 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe ff98 	bl	8000e60 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e09a      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b40      	ldr	r3, [pc, #256]	; (8002050 <HAL_RCC_OscConfig+0x784>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f64:	0212      	lsls	r2, r2, #8
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f6c:	0852      	lsrs	r2, r2, #1
 8001f6e:	3a01      	subs	r2, #1
 8001f70:	0552      	lsls	r2, r2, #21
 8001f72:	4311      	orrs	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f78:	0852      	lsrs	r2, r2, #1
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	0652      	lsls	r2, r2, #25
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f84:	0912      	lsrs	r2, r2, #4
 8001f86:	0452      	lsls	r2, r2, #17
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	4930      	ldr	r1, [pc, #192]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f90:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2d      	ldr	r2, [pc, #180]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa8:	f7fe ff5a 	bl	8000e60 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe ff56 	bl	8000e60 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e058      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fce:	e050      	b.n	8002072 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e04f      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d148      	bne.n	8002072 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff8:	f7fe ff32 	bl	8000e60 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe ff2e 	bl	8000e60 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e030      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x734>
 800201e:	e028      	b.n	8002072 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d023      	beq.n	800206e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_OscConfig+0x780>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_RCC_OscConfig+0x780>)
 800202c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe ff15 	bl	8000e60 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	e00c      	b.n	8002054 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe ff11 	bl	8000e60 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d905      	bls.n	8002054 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e013      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
 800204c:	40021000 	.word	0x40021000
 8002050:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_OscConfig+0x7b0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ec      	bne.n	800203a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RCC_OscConfig+0x7b0>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4905      	ldr	r1, [pc, #20]	; (800207c <HAL_RCC_OscConfig+0x7b0>)
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_OscConfig+0x7b4>)
 8002068:	4013      	ands	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
 800206c:	e001      	b.n	8002072 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	feeefffc 	.word	0xfeeefffc

08002084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0e7      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b75      	ldr	r3, [pc, #468]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b72      	ldr	r3, [pc, #456]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	4970      	ldr	r1, [pc, #448]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b6e      	ldr	r3, [pc, #440]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0cf      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b66      	ldr	r3, [pc, #408]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d908      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4960      	ldr	r1, [pc, #384]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d04c      	beq.n	800219c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210a:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d121      	bne.n	800215a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0a6      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e09a      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213a:	4b4e      	ldr	r3, [pc, #312]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e08e      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214a:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e086      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4943      	ldr	r1, [pc, #268]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800216c:	f7fe fe78 	bl	8000e60 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7fe fe74 	bl	8000e60 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e06e      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d010      	beq.n	80021ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d208      	bcs.n	80021ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	492b      	ldr	r1, [pc, #172]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d210      	bcs.n	80021fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 0207 	bic.w	r2, r3, #7
 80021e0:	4923      	ldr	r1, [pc, #140]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCC_ClockConfig+0x1ec>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e036      	b.n	8002268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4918      	ldr	r1, [pc, #96]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4910      	ldr	r1, [pc, #64]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002238:	f000 f824 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	490b      	ldr	r1, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x1f4>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1f8>)
 8002256:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1fc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fdaf 	bl	8000dc0 <HAL_InitTick>
 8002262:	4603      	mov	r3, r0
 8002264:	72fb      	strb	r3, [r7, #11]

  return status;
 8002266:	7afb      	ldrb	r3, [r7, #11]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40022000 	.word	0x40022000
 8002274:	40021000 	.word	0x40021000
 8002278:	08005994 	.word	0x08005994
 800227c:	20000000 	.word	0x20000000
 8002280:	20000004 	.word	0x20000004

08002284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	; 0x24
 8002288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002292:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x34>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d121      	bne.n	80022f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d11e      	bne.n	80022f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022b8:	4b34      	ldr	r3, [pc, #208]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e005      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022e0:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10d      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <HAL_RCC_GetSysClockFreq+0x110>)
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	e004      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d101      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002308:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_RCC_GetSysClockFreq+0x114>)
 800230a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d134      	bne.n	800237c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0xa6>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d003      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0xac>
 8002328:	e005      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_GetSysClockFreq+0x110>)
 800232c:	617b      	str	r3, [r7, #20]
      break;
 800232e:	e005      	b.n	800233c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_GetSysClockFreq+0x114>)
 8002332:	617b      	str	r3, [r7, #20]
      break;
 8002334:	e002      	b.n	800233c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	617b      	str	r3, [r7, #20]
      break;
 800233a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	3301      	adds	r3, #1
 8002348:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	fb03 f202 	mul.w	r2, r3, r2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_GetSysClockFreq+0x108>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	0e5b      	lsrs	r3, r3, #25
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	3301      	adds	r3, #1
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800237c:	69bb      	ldr	r3, [r7, #24]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	080059ac 	.word	0x080059ac
 8002394:	00f42400 	.word	0x00f42400
 8002398:	007a1200 	.word	0x007a1200

0800239c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000000 	.word	0x20000000

080023b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023b8:	f7ff fff0 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	080059a4 	.word	0x080059a4

080023e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023e4:	f7ff ffda 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0adb      	lsrs	r3, r3, #11
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4904      	ldr	r1, [pc, #16]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	080059a4 	.word	0x080059a4

0800240c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002424:	f7ff f9ee 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 8002428:	6178      	str	r0, [r7, #20]
 800242a:	e014      	b.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	6593      	str	r3, [r2, #88]	; 0x58
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002444:	f7ff f9de 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 8002448:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800245c:	d10b      	bne.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b80      	cmp	r3, #128	; 0x80
 8002462:	d919      	bls.n	8002498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2ba0      	cmp	r3, #160	; 0xa0
 8002468:	d902      	bls.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800246a:	2302      	movs	r3, #2
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	e013      	b.n	8002498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002470:	2301      	movs	r3, #1
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	e010      	b.n	8002498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d902      	bls.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800247c:	2303      	movs	r3, #3
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e00a      	b.n	8002498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b80      	cmp	r3, #128	; 0x80
 8002486:	d102      	bne.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002488:	2302      	movs	r3, #2
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e004      	b.n	8002498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b70      	cmp	r3, #112	; 0x70
 8002492:	d101      	bne.n	8002498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002494:	2301      	movs	r3, #1
 8002496:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 0207 	bic.w	r2, r3, #7
 80024a0:	4909      	ldr	r1, [pc, #36]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40022000 	.word	0x40022000

080024cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024d4:	2300      	movs	r3, #0
 80024d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024d8:	2300      	movs	r3, #0
 80024da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d041      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f0:	d02a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f6:	d824      	bhi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002502:	d81e      	bhi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250c:	d010      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800250e:	e018      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002510:	4b86      	ldr	r3, [pc, #536]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a85      	ldr	r2, [pc, #532]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800251c:	e015      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fabb 	bl	8002aa0 <RCCEx_PLLSAI1_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800252e:	e00c      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3320      	adds	r3, #32
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fba6 	bl	8002c88 <RCCEx_PLLSAI2_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002540:	e003      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	74fb      	strb	r3, [r7, #19]
      break;
 8002546:	e000      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254a:	7cfb      	ldrb	r3, [r7, #19]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002550:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800255e:	4973      	ldr	r1, [pc, #460]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002566:	e001      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d041      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800257c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002580:	d02a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002586:	d824      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258c:	d008      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800258e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002592:	d81e      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259c:	d010      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800259e:	e018      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025a0:	4b62      	ldr	r3, [pc, #392]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a61      	ldr	r2, [pc, #388]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ac:	e015      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fa73 	bl	8002aa0 <RCCEx_PLLSAI1_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025be:	e00c      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3320      	adds	r3, #32
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fb5e 	bl	8002c88 <RCCEx_PLLSAI2_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d0:	e003      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	74fb      	strb	r3, [r7, #19]
      break;
 80025d6:	e000      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025e0:	4b52      	ldr	r3, [pc, #328]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ee:	494f      	ldr	r1, [pc, #316]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025f6:	e001      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80a0 	beq.w	800274a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262e:	6593      	str	r3, [r2, #88]	; 0x58
 8002630:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263c:	2301      	movs	r3, #1
 800263e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a3a      	ldr	r2, [pc, #232]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800264c:	f7fe fc08 	bl	8000e60 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002652:	e009      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7fe fc04 	bl	8000e60 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d902      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	74fb      	strb	r3, [r7, #19]
        break;
 8002666:	e005      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d15c      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01f      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	d019      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002698:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fbc3 	bl	8000e60 <HAL_GetTick>
 80026da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026dc:	e00b      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe fbbf 	bl	8000e60 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d902      	bls.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	74fb      	strb	r3, [r7, #19]
            break;
 80026f4:	e006      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ec      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271a:	4904      	ldr	r1, [pc, #16]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002722:	e009      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
 8002728:	e006      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002738:	7c7b      	ldrb	r3, [r7, #17]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d105      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273e:	4b9e      	ldr	r3, [pc, #632]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	4a9d      	ldr	r2, [pc, #628]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002756:	4b98      	ldr	r3, [pc, #608]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f023 0203 	bic.w	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	4994      	ldr	r1, [pc, #592]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002778:	4b8f      	ldr	r3, [pc, #572]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f023 020c 	bic.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	498c      	ldr	r1, [pc, #560]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800279a:	4b87      	ldr	r3, [pc, #540]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4983      	ldr	r1, [pc, #524]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027bc:	4b7e      	ldr	r3, [pc, #504]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	497b      	ldr	r1, [pc, #492]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ec:	4972      	ldr	r1, [pc, #456]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002800:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	496a      	ldr	r1, [pc, #424]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	4961      	ldr	r1, [pc, #388]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002844:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	4959      	ldr	r1, [pc, #356]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002866:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	4950      	ldr	r1, [pc, #320]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	4948      	ldr	r1, [pc, #288]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028aa:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	493f      	ldr	r1, [pc, #252]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d028      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028cc:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028da:	4937      	ldr	r1, [pc, #220]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ea:	d106      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f6:	60d3      	str	r3, [r2, #12]
 80028f8:	e011      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002902:	d10c      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	2101      	movs	r1, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f8c8 	bl	8002aa0 <RCCEx_PLLSAI1_Config>
 8002910:	4603      	mov	r3, r0
 8002912:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d028      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	491f      	ldr	r1, [pc, #124]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002948:	d106      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002954:	60d3      	str	r3, [r2, #12]
 8002956:	e011      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002960:	d10c      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	2101      	movs	r1, #1
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f899 	bl	8002aa0 <RCCEx_PLLSAI1_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02b      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a6:	d109      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a02      	ldr	r2, [pc, #8]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b2:	60d3      	str	r3, [r2, #12]
 80029b4:	e014      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f867 	bl	8002aa0 <RCCEx_PLLSAI1_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02f      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fa:	4928      	ldr	r1, [pc, #160]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0a:	d10d      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	2102      	movs	r1, #2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f844 	bl	8002aa0 <RCCEx_PLLSAI1_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d014      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	74bb      	strb	r3, [r7, #18]
 8002a26:	e011      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3320      	adds	r3, #32
 8002a36:	2102      	movs	r1, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f925 	bl	8002c88 <RCCEx_PLLSAI2_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a66:	490d      	ldr	r1, [pc, #52]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aae:	4b75      	ldr	r3, [pc, #468]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d018      	beq.n	8002aec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aba:	4b72      	ldr	r3, [pc, #456]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0203 	and.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d10d      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ad2:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d047      	beq.n	8002b76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e044      	b.n	8002b76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d018      	beq.n	8002b26 <RCCEx_PLLSAI1_Config+0x86>
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d825      	bhi.n	8002b44 <RCCEx_PLLSAI1_Config+0xa4>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d002      	beq.n	8002b02 <RCCEx_PLLSAI1_Config+0x62>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d009      	beq.n	8002b14 <RCCEx_PLLSAI1_Config+0x74>
 8002b00:	e020      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b02:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11d      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b12:	e01a      	b.n	8002b4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b14:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b24:	e013      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b32:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b42:	e006      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e004      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	4944      	ldr	r1, [pc, #272]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d17d      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b7c:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a40      	ldr	r2, [pc, #256]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b88:	f7fe f96a 	bl	8000e60 <HAL_GetTick>
 8002b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b8e:	e009      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b90:	f7fe f966 	bl	8000e60 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ba2:	e005      	b.n	8002bb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ef      	bne.n	8002b90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d160      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d111      	bne.n	8002be0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bbc:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	0211      	lsls	r1, r2, #8
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	0912      	lsrs	r2, r2, #4
 8002bd4:	0452      	lsls	r2, r2, #17
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	492a      	ldr	r1, [pc, #168]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	610b      	str	r3, [r1, #16]
 8002bde:	e027      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d112      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	0211      	lsls	r1, r2, #8
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6912      	ldr	r2, [r2, #16]
 8002bfc:	0852      	lsrs	r2, r2, #1
 8002bfe:	3a01      	subs	r2, #1
 8002c00:	0552      	lsls	r2, r2, #21
 8002c02:	430a      	orrs	r2, r1
 8002c04:	491f      	ldr	r1, [pc, #124]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	610b      	str	r3, [r1, #16]
 8002c0a:	e011      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6892      	ldr	r2, [r2, #8]
 8002c1c:	0211      	lsls	r1, r2, #8
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6952      	ldr	r2, [r2, #20]
 8002c22:	0852      	lsrs	r2, r2, #1
 8002c24:	3a01      	subs	r2, #1
 8002c26:	0652      	lsls	r2, r2, #25
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	4916      	ldr	r1, [pc, #88]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe f910 	bl	8000e60 <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c42:	e009      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c44:	f7fe f90c 	bl	8000e60 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	73fb      	strb	r3, [r7, #15]
          break;
 8002c56:	e005      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ef      	beq.n	8002c44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4904      	ldr	r1, [pc, #16]	; (8002c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000

08002c88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ca2:	4b67      	ldr	r3, [pc, #412]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cba:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d047      	beq.n	8002d5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e044      	b.n	8002d5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d018      	beq.n	8002d0e <RCCEx_PLLSAI2_Config+0x86>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCCEx_PLLSAI2_Config+0xa4>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <RCCEx_PLLSAI2_Config+0x62>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d009      	beq.n	8002cfc <RCCEx_PLLSAI2_Config+0x74>
 8002ce8:	e020      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cea:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e01a      	b.n	8002d32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e013      	b.n	8002d36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2a:	e006      	b.n	8002d3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e004      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d42:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	430b      	orrs	r3, r1
 8002d58:	4939      	ldr	r1, [pc, #228]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d167      	bne.n	8002e34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a35      	ldr	r2, [pc, #212]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe f876 	bl	8000e60 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d78:	f7fe f872 	bl	8000e60 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ef      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d14a      	bne.n	8002e34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da4:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	0211      	lsls	r1, r2, #8
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	0912      	lsrs	r2, r2, #4
 8002dbc:	0452      	lsls	r2, r2, #17
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	491f      	ldr	r1, [pc, #124]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	614b      	str	r3, [r1, #20]
 8002dc6:	e011      	b.n	8002dec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6892      	ldr	r2, [r2, #8]
 8002dd8:	0211      	lsls	r1, r2, #8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6912      	ldr	r2, [r2, #16]
 8002dde:	0852      	lsrs	r2, r2, #1
 8002de0:	3a01      	subs	r2, #1
 8002de2:	0652      	lsls	r2, r2, #25
 8002de4:	430a      	orrs	r2, r1
 8002de6:	4916      	ldr	r1, [pc, #88]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe f832 	bl	8000e60 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dfe:	e009      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e00:	f7fe f82e 	bl	8000e60 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	73fb      	strb	r3, [r7, #15]
          break;
 8002e12:	e005      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ef      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e095      	b.n	8002f82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d108      	bne.n	8002e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e66:	d009      	beq.n	8002e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
 8002e6e:	e005      	b.n	8002e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fd58 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ebc:	d902      	bls.n	8002ec4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e002      	b.n	8002eca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ed2:	d007      	beq.n	8002ee4 <HAL_SPI_Init+0xa0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002edc:	d002      	beq.n	8002ee4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	ea42 0103 	orr.w	r1, r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 0204 	and.w	r2, r3, #4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b088      	sub	sp, #32
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_SPI_Transmit+0x22>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e158      	b.n	800325e <HAL_SPI_Transmit+0x2d4>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb4:	f7fd ff54 	bl	8000e60 <HAL_GetTick>
 8002fb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fce:	e13d      	b.n	800324c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Transmit+0x52>
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fe0:	e134      	b.n	800324c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302c:	d10f      	bne.n	800304e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800304c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d007      	beq.n	800306c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003074:	d94b      	bls.n	800310e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_SPI_Transmit+0xfa>
 800307e:	8afb      	ldrh	r3, [r7, #22]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d13e      	bne.n	8003102 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030a8:	e02b      	b.n	8003102 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d112      	bne.n	80030de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030dc:	e011      	b.n	8003102 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030de:	f7fd febf 	bl	8000e60 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d803      	bhi.n	80030f6 <HAL_SPI_Transmit+0x16c>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d102      	bne.n	80030fc <HAL_SPI_Transmit+0x172>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003100:	e0a4      	b.n	800324c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ce      	bne.n	80030aa <HAL_SPI_Transmit+0x120>
 800310c:	e07c      	b.n	8003208 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_SPI_Transmit+0x192>
 8003116:	8afb      	ldrh	r3, [r7, #22]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d170      	bne.n	80031fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d912      	bls.n	800314c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b02      	subs	r3, #2
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	87da      	strh	r2, [r3, #62]	; 0x3e
 800314a:	e058      	b.n	80031fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	7812      	ldrb	r2, [r2, #0]
 8003158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003172:	e044      	b.n	80031fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d12b      	bne.n	80031da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d912      	bls.n	80031b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b02      	subs	r3, #2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031b0:	e025      	b.n	80031fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031d8:	e011      	b.n	80031fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031da:	f7fd fe41 	bl	8000e60 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d803      	bhi.n	80031f2 <HAL_SPI_Transmit+0x268>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d102      	bne.n	80031f8 <HAL_SPI_Transmit+0x26e>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031fc:	e026      	b.n	800324c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1b5      	bne.n	8003174 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fa69 	bl	80036e4 <SPI_EndRxTxTransaction>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e000      	b.n	800324c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800324a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800325c:	7ffb      	ldrb	r3, [r7, #31]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10f      	bne.n	80032ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
    return;
 80032aa:	e0d7      	b.n	800345c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_SPI_IRQHandler+0x66>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	09db      	lsrs	r3, r3, #7
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
    return;
 80032cc:	e0c6      	b.n	800345c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_SPI_IRQHandler+0x8c>
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80b4 	beq.w	800345c <HAL_SPI_IRQHandler+0x1f4>
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80ad 	beq.w	800345c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d023      	beq.n	8003356 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d011      	beq.n	800333e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	e00b      	b.n	8003356 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]
        return;
 8003354:	e082      	b.n	800345c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d014      	beq.n	800338c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00c      	beq.n	80033b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	f043 0208 	orr.w	r2, r3, #8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d04f      	beq.n	800345a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_SPI_IRQHandler+0x17e>
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d034      	beq.n	8003450 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0203 	bic.w	r2, r2, #3
 80033f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d011      	beq.n	8003422 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	4a18      	ldr	r2, [pc, #96]	; (8003464 <HAL_SPI_IRQHandler+0x1fc>)
 8003404:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd ff60 	bl	80012d0 <HAL_DMA_Abort_IT>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_SPI_IRQHandler+0x1fc>)
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd ff4a 	bl	80012d0 <HAL_DMA_Abort_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800344e:	e003      	b.n	8003458 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f809 	bl	8003468 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003456:	e000      	b.n	800345a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003458:	bf00      	nop
    return;
 800345a:	bf00      	nop
  }
}
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	0800347d 	.word	0x0800347d

08003468 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff ffe5 	bl	8003468 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034b8:	f7fd fcd2 	bl	8000e60 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034c8:	f7fd fcca 	bl	8000e60 <HAL_GetTick>
 80034cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	015b      	lsls	r3, r3, #5
 80034d4:	0d1b      	lsrs	r3, r3, #20
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034de:	e054      	b.n	800358a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d050      	beq.n	800358a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034e8:	f7fd fcba 	bl	8000e60 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d902      	bls.n	80034fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d13d      	bne.n	800357a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800350c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d111      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003520:	d004      	beq.n	800352c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	d107      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d10f      	bne.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e017      	b.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3b01      	subs	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d19b      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000

080035b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035ca:	f7fd fc49 	bl	8000e60 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035da:	f7fd fc41 	bl	8000e60 <HAL_GetTick>
 80035de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035e8:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00da      	lsls	r2, r3, #3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	0d1b      	lsrs	r3, r3, #20
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003600:	e060      	b.n	80036c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003608:	d107      	bne.n	800361a <SPI_WaitFifoStateUntilTimeout+0x62>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003618:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d050      	beq.n	80036c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003622:	f7fd fc1d 	bl	8000e60 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	429a      	cmp	r2, r3
 8003630:	d902      	bls.n	8003638 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d13d      	bne.n	80036b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003646:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003650:	d111      	bne.n	8003676 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365a:	d004      	beq.n	8003666 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d107      	bne.n	8003676 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003674:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367e:	d10f      	bne.n	80036a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e010      	b.n	80036d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d196      	bne.n	8003602 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3728      	adds	r7, #40	; 0x28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000000 	.word	0x20000000

080036e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff ff5b 	bl	80035b8 <SPI_WaitFifoStateUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e027      	b.n	8003768 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff fec0 	bl	80034a8 <SPI_WaitFlagStateUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e014      	b.n	8003768 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2200      	movs	r2, #0
 8003746:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff ff34 	bl	80035b8 <SPI_WaitFifoStateUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	f043 0220 	orr.w	r2, r3, #32
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e000      	b.n	8003768 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e040      	b.n	8003804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f954 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fc00 	bl	8003fb4 <UART_SetConfig>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e022      	b.n	8003804 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 feac 	bl	8004524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 ff33 	bl	8004668 <UART_CheckIdleState>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003820:	2b20      	cmp	r3, #32
 8003822:	f040 80bf 	bne.w	80039a4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_UART_Receive+0x26>
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0b7      	b.n	80039a6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_UART_Receive+0x38>
 8003840:	2302      	movs	r3, #2
 8003842:	e0b0      	b.n	80039a6 <HAL_UART_Receive+0x19a>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2222      	movs	r2, #34	; 0x22
 8003858:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003860:	f7fd fafe 	bl	8000e60 <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	88fa      	ldrh	r2, [r7, #6]
 800386a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	88fa      	ldrh	r2, [r7, #6]
 8003872:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	d10e      	bne.n	800389e <HAL_UART_Receive+0x92>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_UART_Receive+0x88>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800388e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003892:	e02d      	b.n	80038f0 <HAL_UART_Receive+0xe4>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800389c:	e028      	b.n	80038f0 <HAL_UART_Receive+0xe4>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <HAL_UART_Receive+0xb6>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <HAL_UART_Receive+0xac>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038b6:	e01b      	b.n	80038f0 <HAL_UART_Receive+0xe4>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	227f      	movs	r2, #127	; 0x7f
 80038bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038c0:	e016      	b.n	80038f0 <HAL_UART_Receive+0xe4>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ca:	d10d      	bne.n	80038e8 <HAL_UART_Receive+0xdc>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <HAL_UART_Receive+0xd2>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	227f      	movs	r2, #127	; 0x7f
 80038d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038dc:	e008      	b.n	80038f0 <HAL_UART_Receive+0xe4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	223f      	movs	r2, #63	; 0x3f
 80038e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038e6:	e003      	b.n	80038f0 <HAL_UART_Receive+0xe4>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d108      	bne.n	8003914 <HAL_UART_Receive+0x108>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e003      	b.n	800391c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003924:	e033      	b.n	800398e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2120      	movs	r1, #32
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fee2 	bl	80046fa <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e032      	b.n	80039a6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800394c:	b29a      	uxth	r2, r3
 800394e:	8a7b      	ldrh	r3, [r7, #18]
 8003950:	4013      	ands	r3, r2
 8003952:	b29a      	uxth	r2, r3
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	3302      	adds	r3, #2
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e00d      	b.n	800397c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003966:	b29b      	uxth	r3, r3
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8a7b      	ldrh	r3, [r7, #18]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4013      	ands	r3, r2
 8003970:	b2da      	uxtb	r2, r3
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3301      	adds	r3, #1
 800397a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1c5      	bne.n	8003926 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0ba      	sub	sp, #232	; 0xe8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039da:	f640 030f 	movw	r3, #2063	; 0x80f
 80039de:	4013      	ands	r3, r2
 80039e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d115      	bne.n	8003a18 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00f      	beq.n	8003a18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 82a6 	beq.w	8003f5a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
      }
      return;
 8003a16:	e2a0      	b.n	8003f5a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8117 	beq.w	8003c50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_UART_IRQHandler+0x298>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 810a 	beq.w	8003c50 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d011      	beq.n	8003a6c <HAL_UART_IRQHandler+0xbc>
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d011      	beq.n	8003a9c <HAL_UART_IRQHandler+0xec>
 8003a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d011      	beq.n	8003acc <HAL_UART_IRQHandler+0x11c>
 8003aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac2:	f043 0202 	orr.w	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d017      	beq.n	8003b08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2208      	movs	r2, #8
 8003af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afe:	f043 0208 	orr.w	r2, r3, #8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d012      	beq.n	8003b3a <HAL_UART_IRQHandler+0x18a>
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 820c 	beq.w	8003f5e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d005      	beq.n	8003b92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04f      	beq.n	8003c32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fe75 	bl	8004882 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d141      	bne.n	8003c2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1d9      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d013      	beq.n	8003c22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <HAL_UART_IRQHandler+0x29c>)
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd fb62 	bl	80012d0 <HAL_DMA_Abort_IT>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d017      	beq.n	8003c42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	e00f      	b.n	8003c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9b0 	bl	8003f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00b      	b.n	8003c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9ac 	bl	8003f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e007      	b.n	8003c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9a8 	bl	8003f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c40:	e18d      	b.n	8003f5e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c42:	bf00      	nop
    return;
 8003c44:	e18b      	b.n	8003f5e <HAL_UART_IRQHandler+0x5ae>
 8003c46:	bf00      	nop
 8003c48:	04000120 	.word	0x04000120
 8003c4c:	08004949 	.word	0x08004949

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	f040 8146 	bne.w	8003ee6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 813f 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8138 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	f040 80b4 	bne.w	8003df6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 815f 	beq.w	8003f62 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	f080 8157 	bcs.w	8003f62 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8085 	bne.w	8003dda <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1da      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e1      	bne.n	8003d1a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3308      	adds	r3, #8
 8003d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e3      	bne.n	8003d56 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003daa:	f023 0310 	bic.w	r3, r3, #16
 8003dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e4      	bne.n	8003d9a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd fa3d 	bl	8001254 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8d4 	bl	8003f9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003df4:	e0b5      	b.n	8003f62 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80a7 	beq.w	8003f66 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a2 	beq.w	8003f66 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e44:	647b      	str	r3, [r7, #68]	; 0x44
 8003e46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e4      	bne.n	8003e22 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	623b      	str	r3, [r7, #32]
   return(result);
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e3      	bne.n	8003e58 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e4      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f85c 	bl	8003f9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ee4:	e03f      	b.n	8003f66 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00e      	beq.n	8003f10 <HAL_UART_IRQHandler+0x560>
 8003ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fd5d 	bl	80049c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f0e:	e02d      	b.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
    }
    return;
 8003f38:	e017      	b.n	8003f6a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
 8003f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00c      	beq.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fd0e 	bl	8004974 <UART_EndTransmit_IT>
    return;
 8003f58:	e008      	b.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f5a:	bf00      	nop
 8003f5c:	e006      	b.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f5e:	bf00      	nop
 8003f60:	e004      	b.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f62:	bf00      	nop
 8003f64:	e002      	b.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f6c:	37e8      	adds	r7, #232	; 0xe8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop

08003f74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb8:	b08a      	sub	sp, #40	; 0x28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4ba4      	ldr	r3, [pc, #656]	; (8004274 <UART_SetConfig+0x2c0>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a99      	ldr	r2, [pc, #612]	; (8004278 <UART_SetConfig+0x2c4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	4313      	orrs	r3, r2
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a90      	ldr	r2, [pc, #576]	; (800427c <UART_SetConfig+0x2c8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d126      	bne.n	800408c <UART_SetConfig+0xd8>
 800403e:	4b90      	ldr	r3, [pc, #576]	; (8004280 <UART_SetConfig+0x2cc>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b03      	cmp	r3, #3
 800404a:	d81b      	bhi.n	8004084 <UART_SetConfig+0xd0>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0xa0>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004065 	.word	0x08004065
 8004058:	08004075 	.word	0x08004075
 800405c:	0800406d 	.word	0x0800406d
 8004060:	0800407d 	.word	0x0800407d
 8004064:	2301      	movs	r3, #1
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406a:	e116      	b.n	800429a <UART_SetConfig+0x2e6>
 800406c:	2302      	movs	r3, #2
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004072:	e112      	b.n	800429a <UART_SetConfig+0x2e6>
 8004074:	2304      	movs	r3, #4
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407a:	e10e      	b.n	800429a <UART_SetConfig+0x2e6>
 800407c:	2308      	movs	r3, #8
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004082:	e10a      	b.n	800429a <UART_SetConfig+0x2e6>
 8004084:	2310      	movs	r3, #16
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408a:	e106      	b.n	800429a <UART_SetConfig+0x2e6>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a7c      	ldr	r2, [pc, #496]	; (8004284 <UART_SetConfig+0x2d0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d138      	bne.n	8004108 <UART_SetConfig+0x154>
 8004096:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <UART_SetConfig+0x2cc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d82d      	bhi.n	8004100 <UART_SetConfig+0x14c>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0xf8>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	08004101 	.word	0x08004101
 80040b4:	08004101 	.word	0x08004101
 80040b8:	08004101 	.word	0x08004101
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004101 	.word	0x08004101
 80040c8:	08004101 	.word	0x08004101
 80040cc:	080040e9 	.word	0x080040e9
 80040d0:	08004101 	.word	0x08004101
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004101 	.word	0x08004101
 80040dc:	080040f9 	.word	0x080040f9
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e6:	e0d8      	b.n	800429a <UART_SetConfig+0x2e6>
 80040e8:	2302      	movs	r3, #2
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ee:	e0d4      	b.n	800429a <UART_SetConfig+0x2e6>
 80040f0:	2304      	movs	r3, #4
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f6:	e0d0      	b.n	800429a <UART_SetConfig+0x2e6>
 80040f8:	2308      	movs	r3, #8
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fe:	e0cc      	b.n	800429a <UART_SetConfig+0x2e6>
 8004100:	2310      	movs	r3, #16
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e0c8      	b.n	800429a <UART_SetConfig+0x2e6>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a5e      	ldr	r2, [pc, #376]	; (8004288 <UART_SetConfig+0x2d4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d125      	bne.n	800415e <UART_SetConfig+0x1aa>
 8004112:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <UART_SetConfig+0x2cc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800411c:	2b30      	cmp	r3, #48	; 0x30
 800411e:	d016      	beq.n	800414e <UART_SetConfig+0x19a>
 8004120:	2b30      	cmp	r3, #48	; 0x30
 8004122:	d818      	bhi.n	8004156 <UART_SetConfig+0x1a2>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d00a      	beq.n	800413e <UART_SetConfig+0x18a>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d814      	bhi.n	8004156 <UART_SetConfig+0x1a2>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <UART_SetConfig+0x182>
 8004130:	2b10      	cmp	r3, #16
 8004132:	d008      	beq.n	8004146 <UART_SetConfig+0x192>
 8004134:	e00f      	b.n	8004156 <UART_SetConfig+0x1a2>
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413c:	e0ad      	b.n	800429a <UART_SetConfig+0x2e6>
 800413e:	2302      	movs	r3, #2
 8004140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004144:	e0a9      	b.n	800429a <UART_SetConfig+0x2e6>
 8004146:	2304      	movs	r3, #4
 8004148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414c:	e0a5      	b.n	800429a <UART_SetConfig+0x2e6>
 800414e:	2308      	movs	r3, #8
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004154:	e0a1      	b.n	800429a <UART_SetConfig+0x2e6>
 8004156:	2310      	movs	r3, #16
 8004158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415c:	e09d      	b.n	800429a <UART_SetConfig+0x2e6>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4a      	ldr	r2, [pc, #296]	; (800428c <UART_SetConfig+0x2d8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d125      	bne.n	80041b4 <UART_SetConfig+0x200>
 8004168:	4b45      	ldr	r3, [pc, #276]	; (8004280 <UART_SetConfig+0x2cc>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004172:	2bc0      	cmp	r3, #192	; 0xc0
 8004174:	d016      	beq.n	80041a4 <UART_SetConfig+0x1f0>
 8004176:	2bc0      	cmp	r3, #192	; 0xc0
 8004178:	d818      	bhi.n	80041ac <UART_SetConfig+0x1f8>
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d00a      	beq.n	8004194 <UART_SetConfig+0x1e0>
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d814      	bhi.n	80041ac <UART_SetConfig+0x1f8>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <UART_SetConfig+0x1d8>
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d008      	beq.n	800419c <UART_SetConfig+0x1e8>
 800418a:	e00f      	b.n	80041ac <UART_SetConfig+0x1f8>
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004192:	e082      	b.n	800429a <UART_SetConfig+0x2e6>
 8004194:	2302      	movs	r3, #2
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419a:	e07e      	b.n	800429a <UART_SetConfig+0x2e6>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a2:	e07a      	b.n	800429a <UART_SetConfig+0x2e6>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041aa:	e076      	b.n	800429a <UART_SetConfig+0x2e6>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b2:	e072      	b.n	800429a <UART_SetConfig+0x2e6>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a35      	ldr	r2, [pc, #212]	; (8004290 <UART_SetConfig+0x2dc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d12a      	bne.n	8004214 <UART_SetConfig+0x260>
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <UART_SetConfig+0x2cc>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041cc:	d01a      	beq.n	8004204 <UART_SetConfig+0x250>
 80041ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d2:	d81b      	bhi.n	800420c <UART_SetConfig+0x258>
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d00c      	beq.n	80041f4 <UART_SetConfig+0x240>
 80041da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041de:	d815      	bhi.n	800420c <UART_SetConfig+0x258>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <UART_SetConfig+0x238>
 80041e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e8:	d008      	beq.n	80041fc <UART_SetConfig+0x248>
 80041ea:	e00f      	b.n	800420c <UART_SetConfig+0x258>
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e052      	b.n	800429a <UART_SetConfig+0x2e6>
 80041f4:	2302      	movs	r3, #2
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e04e      	b.n	800429a <UART_SetConfig+0x2e6>
 80041fc:	2304      	movs	r3, #4
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e04a      	b.n	800429a <UART_SetConfig+0x2e6>
 8004204:	2308      	movs	r3, #8
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e046      	b.n	800429a <UART_SetConfig+0x2e6>
 800420c:	2310      	movs	r3, #16
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e042      	b.n	800429a <UART_SetConfig+0x2e6>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a17      	ldr	r2, [pc, #92]	; (8004278 <UART_SetConfig+0x2c4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d13a      	bne.n	8004294 <UART_SetConfig+0x2e0>
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <UART_SetConfig+0x2cc>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422c:	d01a      	beq.n	8004264 <UART_SetConfig+0x2b0>
 800422e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004232:	d81b      	bhi.n	800426c <UART_SetConfig+0x2b8>
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004238:	d00c      	beq.n	8004254 <UART_SetConfig+0x2a0>
 800423a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423e:	d815      	bhi.n	800426c <UART_SetConfig+0x2b8>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <UART_SetConfig+0x298>
 8004244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004248:	d008      	beq.n	800425c <UART_SetConfig+0x2a8>
 800424a:	e00f      	b.n	800426c <UART_SetConfig+0x2b8>
 800424c:	2300      	movs	r3, #0
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e022      	b.n	800429a <UART_SetConfig+0x2e6>
 8004254:	2302      	movs	r3, #2
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e01e      	b.n	800429a <UART_SetConfig+0x2e6>
 800425c:	2304      	movs	r3, #4
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e01a      	b.n	800429a <UART_SetConfig+0x2e6>
 8004264:	2308      	movs	r3, #8
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e016      	b.n	800429a <UART_SetConfig+0x2e6>
 800426c:	2310      	movs	r3, #16
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e012      	b.n	800429a <UART_SetConfig+0x2e6>
 8004274:	efff69f3 	.word	0xefff69f3
 8004278:	40008000 	.word	0x40008000
 800427c:	40013800 	.word	0x40013800
 8004280:	40021000 	.word	0x40021000
 8004284:	40004400 	.word	0x40004400
 8004288:	40004800 	.word	0x40004800
 800428c:	40004c00 	.word	0x40004c00
 8004290:	40005000 	.word	0x40005000
 8004294:	2310      	movs	r3, #16
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a9f      	ldr	r2, [pc, #636]	; (800451c <UART_SetConfig+0x568>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d17a      	bne.n	800439a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d824      	bhi.n	80042f6 <UART_SetConfig+0x342>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x300>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042f7 	.word	0x080042f7
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042f7 	.word	0x080042f7
 80042c4:	080042e7 	.word	0x080042e7
 80042c8:	080042f7 	.word	0x080042f7
 80042cc:	080042f7 	.word	0x080042f7
 80042d0:	080042f7 	.word	0x080042f7
 80042d4:	080042ef 	.word	0x080042ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe f86c 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 80042dc:	61f8      	str	r0, [r7, #28]
        break;
 80042de:	e010      	b.n	8004302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e0:	4b8f      	ldr	r3, [pc, #572]	; (8004520 <UART_SetConfig+0x56c>)
 80042e2:	61fb      	str	r3, [r7, #28]
        break;
 80042e4:	e00d      	b.n	8004302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e6:	f7fd ffcd 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 80042ea:	61f8      	str	r0, [r7, #28]
        break;
 80042ec:	e009      	b.n	8004302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f2:	61fb      	str	r3, [r7, #28]
        break;
 80042f4:	e005      	b.n	8004302 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004300:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80fb 	beq.w	8004500 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	429a      	cmp	r2, r3
 8004318:	d305      	bcc.n	8004326 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	429a      	cmp	r2, r3
 8004324:	d903      	bls.n	800432e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800432c:	e0e8      	b.n	8004500 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	2200      	movs	r2, #0
 8004332:	461c      	mov	r4, r3
 8004334:	4615      	mov	r5, r2
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	022b      	lsls	r3, r5, #8
 8004340:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004344:	0222      	lsls	r2, r4, #8
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	6849      	ldr	r1, [r1, #4]
 800434a:	0849      	lsrs	r1, r1, #1
 800434c:	2000      	movs	r0, #0
 800434e:	4688      	mov	r8, r1
 8004350:	4681      	mov	r9, r0
 8004352:	eb12 0a08 	adds.w	sl, r2, r8
 8004356:	eb43 0b09 	adc.w	fp, r3, r9
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004368:	4650      	mov	r0, sl
 800436a:	4659      	mov	r1, fp
 800436c:	f7fb ff80 	bl	8000270 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4613      	mov	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437e:	d308      	bcc.n	8004392 <UART_SetConfig+0x3de>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d204      	bcs.n	8004392 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	e0b6      	b.n	8004500 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004398:	e0b2      	b.n	8004500 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a2:	d15e      	bne.n	8004462 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d828      	bhi.n	80043fe <UART_SetConfig+0x44a>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0x400>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	080043ff 	.word	0x080043ff
 80043c4:	080043ef 	.word	0x080043ef
 80043c8:	080043ff 	.word	0x080043ff
 80043cc:	080043ff 	.word	0x080043ff
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	080043f7 	.word	0x080043f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fd ffec 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 80043dc:	61f8      	str	r0, [r7, #28]
        break;
 80043de:	e014      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7fd fffe 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80043e4:	61f8      	str	r0, [r7, #28]
        break;
 80043e6:	e010      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e8:	4b4d      	ldr	r3, [pc, #308]	; (8004520 <UART_SetConfig+0x56c>)
 80043ea:	61fb      	str	r3, [r7, #28]
        break;
 80043ec:	e00d      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ee:	f7fd ff49 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 80043f2:	61f8      	str	r0, [r7, #28]
        break;
 80043f4:	e009      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fa:	61fb      	str	r3, [r7, #28]
        break;
 80043fc:	e005      	b.n	800440a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d077      	beq.n	8004500 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005a      	lsls	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b0f      	cmp	r3, #15
 800442a:	d916      	bls.n	800445a <UART_SetConfig+0x4a6>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d212      	bcs.n	800445a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f023 030f 	bic.w	r3, r3, #15
 800443c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	b29a      	uxth	r2, r3
 800444a:	8afb      	ldrh	r3, [r7, #22]
 800444c:	4313      	orrs	r3, r2
 800444e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	8afa      	ldrh	r2, [r7, #22]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e052      	b.n	8004500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004460:	e04e      	b.n	8004500 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004466:	2b08      	cmp	r3, #8
 8004468:	d827      	bhi.n	80044ba <UART_SetConfig+0x506>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x4bc>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004495 	.word	0x08004495
 8004474:	0800449d 	.word	0x0800449d
 8004478:	080044a5 	.word	0x080044a5
 800447c:	080044bb 	.word	0x080044bb
 8004480:	080044ab 	.word	0x080044ab
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044bb 	.word	0x080044bb
 800448c:	080044bb 	.word	0x080044bb
 8004490:	080044b3 	.word	0x080044b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004494:	f7fd ff8e 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 8004498:	61f8      	str	r0, [r7, #28]
        break;
 800449a:	e014      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fd ffa0 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80044a0:	61f8      	str	r0, [r7, #28]
        break;
 80044a2:	e010      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <UART_SetConfig+0x56c>)
 80044a6:	61fb      	str	r3, [r7, #28]
        break;
 80044a8:	e00d      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fd feeb 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 80044ae:	61f8      	str	r0, [r7, #28]
        break;
 80044b0:	e009      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b6:	61fb      	str	r3, [r7, #28]
        break;
 80044b8:	e005      	b.n	80044c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044c4:	bf00      	nop
    }

    if (pclk != 0U)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d019      	beq.n	8004500 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085a      	lsrs	r2, r3, #1
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b0f      	cmp	r3, #15
 80044e4:	d909      	bls.n	80044fa <UART_SetConfig+0x546>
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ec:	d205      	bcs.n	80044fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	e002      	b.n	8004500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800450c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004510:	4618      	mov	r0, r3
 8004512:	3728      	adds	r7, #40	; 0x28
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	40008000 	.word	0x40008000
 8004520:	00f42400 	.word	0x00f42400

08004524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01a      	beq.n	800463a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004622:	d10a      	bne.n	800463a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af02      	add	r7, sp, #8
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004678:	f7fc fbf2 	bl	8000e60 <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b08      	cmp	r3, #8
 800468a:	d10e      	bne.n	80046aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f82d 	bl	80046fa <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e023      	b.n	80046f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d10e      	bne.n	80046d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f817 	bl	80046fa <UART_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e00d      	b.n	80046f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b09c      	sub	sp, #112	; 0x70
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470a:	e0a5      	b.n	8004858 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	f000 80a1 	beq.w	8004858 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fc fba3 	bl	8000e60 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <UART_WaitOnFlagUntilTimeout+0x32>
 8004726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004728:	2b00      	cmp	r3, #0
 800472a:	d13e      	bne.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800473a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004740:	667b      	str	r3, [r7, #100]	; 0x64
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800474a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800474c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e6      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	663b      	str	r3, [r7, #96]	; 0x60
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800477e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004780:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e5      	bne.n	800475e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e067      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d04f      	beq.n	8004858 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c6:	d147      	bne.n	8004858 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e6      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3308      	adds	r3, #8
 800480a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	613b      	str	r3, [r7, #16]
   return(result);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	66bb      	str	r3, [r7, #104]	; 0x68
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3308      	adds	r3, #8
 8004822:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004824:	623a      	str	r2, [r7, #32]
 8004826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	69f9      	ldr	r1, [r7, #28]
 800482a:	6a3a      	ldr	r2, [r7, #32]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	61bb      	str	r3, [r7, #24]
   return(result);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e5      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e010      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	429a      	cmp	r2, r3
 8004874:	f43f af4a 	beq.w	800470c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3770      	adds	r7, #112	; 0x70
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004882:	b480      	push	{r7}
 8004884:	b095      	sub	sp, #84	; 0x54
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a8:	643b      	str	r3, [r7, #64]	; 0x40
 80048aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e6      	bne.n	800488a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e5      	bne.n	80048bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d118      	bne.n	800492a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	60bb      	str	r3, [r7, #8]
   return(result);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f023 0310 	bic.w	r3, r3, #16
 800490c:	647b      	str	r3, [r7, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6979      	ldr	r1, [r7, #20]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	613b      	str	r3, [r7, #16]
   return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800493c:	bf00      	nop
 800493e:	3754      	adds	r7, #84	; 0x54
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff fb0e 	bl	8003f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	60bb      	str	r3, [r7, #8]
   return(result);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	613b      	str	r3, [r7, #16]
   return(result);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e6      	bne.n	800497c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fada 	bl	8003f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c0:	bf00      	nop
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <__errno>:
 80049dc:	4b01      	ldr	r3, [pc, #4]	; (80049e4 <__errno+0x8>)
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4d0d      	ldr	r5, [pc, #52]	; (8004a20 <__libc_init_array+0x38>)
 80049ec:	4c0d      	ldr	r4, [pc, #52]	; (8004a24 <__libc_init_array+0x3c>)
 80049ee:	1b64      	subs	r4, r4, r5
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	2600      	movs	r6, #0
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	d109      	bne.n	8004a0c <__libc_init_array+0x24>
 80049f8:	4d0b      	ldr	r5, [pc, #44]	; (8004a28 <__libc_init_array+0x40>)
 80049fa:	4c0c      	ldr	r4, [pc, #48]	; (8004a2c <__libc_init_array+0x44>)
 80049fc:	f000 ffae 	bl	800595c <_init>
 8004a00:	1b64      	subs	r4, r4, r5
 8004a02:	10a4      	asrs	r4, r4, #2
 8004a04:	2600      	movs	r6, #0
 8004a06:	42a6      	cmp	r6, r4
 8004a08:	d105      	bne.n	8004a16 <__libc_init_array+0x2e>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a10:	4798      	blx	r3
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7ee      	b.n	80049f4 <__libc_init_array+0xc>
 8004a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1a:	4798      	blx	r3
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	e7f2      	b.n	8004a06 <__libc_init_array+0x1e>
 8004a20:	08005a7c 	.word	0x08005a7c
 8004a24:	08005a7c 	.word	0x08005a7c
 8004a28:	08005a7c 	.word	0x08005a7c
 8004a2c:	08005a80 	.word	0x08005a80

08004a30 <memset>:
 8004a30:	4402      	add	r2, r0
 8004a32:	4603      	mov	r3, r0
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d100      	bne.n	8004a3a <memset+0xa>
 8004a38:	4770      	bx	lr
 8004a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a3e:	e7f9      	b.n	8004a34 <memset+0x4>

08004a40 <iprintf>:
 8004a40:	b40f      	push	{r0, r1, r2, r3}
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <iprintf+0x2c>)
 8004a44:	b513      	push	{r0, r1, r4, lr}
 8004a46:	681c      	ldr	r4, [r3, #0]
 8004a48:	b124      	cbz	r4, 8004a54 <iprintf+0x14>
 8004a4a:	69a3      	ldr	r3, [r4, #24]
 8004a4c:	b913      	cbnz	r3, 8004a54 <iprintf+0x14>
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f000 f866 	bl	8004b20 <__sinit>
 8004a54:	ab05      	add	r3, sp, #20
 8004a56:	9a04      	ldr	r2, [sp, #16]
 8004a58:	68a1      	ldr	r1, [r4, #8]
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 f9bd 	bl	8004ddc <_vfiprintf_r>
 8004a62:	b002      	add	sp, #8
 8004a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a68:	b004      	add	sp, #16
 8004a6a:	4770      	bx	lr
 8004a6c:	2000000c 	.word	0x2000000c

08004a70 <std>:
 8004a70:	2300      	movs	r3, #0
 8004a72:	b510      	push	{r4, lr}
 8004a74:	4604      	mov	r4, r0
 8004a76:	e9c0 3300 	strd	r3, r3, [r0]
 8004a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a7e:	6083      	str	r3, [r0, #8]
 8004a80:	8181      	strh	r1, [r0, #12]
 8004a82:	6643      	str	r3, [r0, #100]	; 0x64
 8004a84:	81c2      	strh	r2, [r0, #14]
 8004a86:	6183      	str	r3, [r0, #24]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	305c      	adds	r0, #92	; 0x5c
 8004a8e:	f7ff ffcf 	bl	8004a30 <memset>
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <std+0x38>)
 8004a94:	6263      	str	r3, [r4, #36]	; 0x24
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <std+0x3c>)
 8004a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <std+0x40>)
 8004a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <std+0x44>)
 8004aa0:	6224      	str	r4, [r4, #32]
 8004aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8004aa4:	bd10      	pop	{r4, pc}
 8004aa6:	bf00      	nop
 8004aa8:	08005385 	.word	0x08005385
 8004aac:	080053a7 	.word	0x080053a7
 8004ab0:	080053df 	.word	0x080053df
 8004ab4:	08005403 	.word	0x08005403

08004ab8 <_cleanup_r>:
 8004ab8:	4901      	ldr	r1, [pc, #4]	; (8004ac0 <_cleanup_r+0x8>)
 8004aba:	f000 b8af 	b.w	8004c1c <_fwalk_reent>
 8004abe:	bf00      	nop
 8004ac0:	080056dd 	.word	0x080056dd

08004ac4 <__sfmoreglue>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	2268      	movs	r2, #104	; 0x68
 8004ac8:	1e4d      	subs	r5, r1, #1
 8004aca:	4355      	muls	r5, r2
 8004acc:	460e      	mov	r6, r1
 8004ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ad2:	f000 f8e5 	bl	8004ca0 <_malloc_r>
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	b140      	cbz	r0, 8004aec <__sfmoreglue+0x28>
 8004ada:	2100      	movs	r1, #0
 8004adc:	e9c0 1600 	strd	r1, r6, [r0]
 8004ae0:	300c      	adds	r0, #12
 8004ae2:	60a0      	str	r0, [r4, #8]
 8004ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ae8:	f7ff ffa2 	bl	8004a30 <memset>
 8004aec:	4620      	mov	r0, r4
 8004aee:	bd70      	pop	{r4, r5, r6, pc}

08004af0 <__sfp_lock_acquire>:
 8004af0:	4801      	ldr	r0, [pc, #4]	; (8004af8 <__sfp_lock_acquire+0x8>)
 8004af2:	f000 b8b3 	b.w	8004c5c <__retarget_lock_acquire_recursive>
 8004af6:	bf00      	nop
 8004af8:	2000020d 	.word	0x2000020d

08004afc <__sfp_lock_release>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__sfp_lock_release+0x8>)
 8004afe:	f000 b8ae 	b.w	8004c5e <__retarget_lock_release_recursive>
 8004b02:	bf00      	nop
 8004b04:	2000020d 	.word	0x2000020d

08004b08 <__sinit_lock_acquire>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__sinit_lock_acquire+0x8>)
 8004b0a:	f000 b8a7 	b.w	8004c5c <__retarget_lock_acquire_recursive>
 8004b0e:	bf00      	nop
 8004b10:	2000020e 	.word	0x2000020e

08004b14 <__sinit_lock_release>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__sinit_lock_release+0x8>)
 8004b16:	f000 b8a2 	b.w	8004c5e <__retarget_lock_release_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	2000020e 	.word	0x2000020e

08004b20 <__sinit>:
 8004b20:	b510      	push	{r4, lr}
 8004b22:	4604      	mov	r4, r0
 8004b24:	f7ff fff0 	bl	8004b08 <__sinit_lock_acquire>
 8004b28:	69a3      	ldr	r3, [r4, #24]
 8004b2a:	b11b      	cbz	r3, 8004b34 <__sinit+0x14>
 8004b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b30:	f7ff bff0 	b.w	8004b14 <__sinit_lock_release>
 8004b34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b38:	6523      	str	r3, [r4, #80]	; 0x50
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <__sinit+0x68>)
 8004b3c:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <__sinit+0x6c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	bf04      	itt	eq
 8004b46:	2301      	moveq	r3, #1
 8004b48:	61a3      	streq	r3, [r4, #24]
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f000 f820 	bl	8004b90 <__sfp>
 8004b50:	6060      	str	r0, [r4, #4]
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 f81c 	bl	8004b90 <__sfp>
 8004b58:	60a0      	str	r0, [r4, #8]
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 f818 	bl	8004b90 <__sfp>
 8004b60:	2200      	movs	r2, #0
 8004b62:	60e0      	str	r0, [r4, #12]
 8004b64:	2104      	movs	r1, #4
 8004b66:	6860      	ldr	r0, [r4, #4]
 8004b68:	f7ff ff82 	bl	8004a70 <std>
 8004b6c:	68a0      	ldr	r0, [r4, #8]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	2109      	movs	r1, #9
 8004b72:	f7ff ff7d 	bl	8004a70 <std>
 8004b76:	68e0      	ldr	r0, [r4, #12]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	2112      	movs	r1, #18
 8004b7c:	f7ff ff78 	bl	8004a70 <std>
 8004b80:	2301      	movs	r3, #1
 8004b82:	61a3      	str	r3, [r4, #24]
 8004b84:	e7d2      	b.n	8004b2c <__sinit+0xc>
 8004b86:	bf00      	nop
 8004b88:	080059dc 	.word	0x080059dc
 8004b8c:	08004ab9 	.word	0x08004ab9

08004b90 <__sfp>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	4607      	mov	r7, r0
 8004b94:	f7ff ffac 	bl	8004af0 <__sfp_lock_acquire>
 8004b98:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <__sfp+0x84>)
 8004b9a:	681e      	ldr	r6, [r3, #0]
 8004b9c:	69b3      	ldr	r3, [r6, #24]
 8004b9e:	b913      	cbnz	r3, 8004ba6 <__sfp+0x16>
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f7ff ffbd 	bl	8004b20 <__sinit>
 8004ba6:	3648      	adds	r6, #72	; 0x48
 8004ba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	d503      	bpl.n	8004bb8 <__sfp+0x28>
 8004bb0:	6833      	ldr	r3, [r6, #0]
 8004bb2:	b30b      	cbz	r3, 8004bf8 <__sfp+0x68>
 8004bb4:	6836      	ldr	r6, [r6, #0]
 8004bb6:	e7f7      	b.n	8004ba8 <__sfp+0x18>
 8004bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bbc:	b9d5      	cbnz	r5, 8004bf4 <__sfp+0x64>
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <__sfp+0x88>)
 8004bc0:	60e3      	str	r3, [r4, #12]
 8004bc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bc6:	6665      	str	r5, [r4, #100]	; 0x64
 8004bc8:	f000 f847 	bl	8004c5a <__retarget_lock_init_recursive>
 8004bcc:	f7ff ff96 	bl	8004afc <__sfp_lock_release>
 8004bd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bd8:	6025      	str	r5, [r4, #0]
 8004bda:	61a5      	str	r5, [r4, #24]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	4629      	mov	r1, r5
 8004be0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004be4:	f7ff ff24 	bl	8004a30 <memset>
 8004be8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf4:	3468      	adds	r4, #104	; 0x68
 8004bf6:	e7d9      	b.n	8004bac <__sfp+0x1c>
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f7ff ff62 	bl	8004ac4 <__sfmoreglue>
 8004c00:	4604      	mov	r4, r0
 8004c02:	6030      	str	r0, [r6, #0]
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d1d5      	bne.n	8004bb4 <__sfp+0x24>
 8004c08:	f7ff ff78 	bl	8004afc <__sfp_lock_release>
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	e7ee      	b.n	8004bf0 <__sfp+0x60>
 8004c12:	bf00      	nop
 8004c14:	080059dc 	.word	0x080059dc
 8004c18:	ffff0001 	.word	0xffff0001

08004c1c <_fwalk_reent>:
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c20:	4606      	mov	r6, r0
 8004c22:	4688      	mov	r8, r1
 8004c24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c28:	2700      	movs	r7, #0
 8004c2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c2e:	f1b9 0901 	subs.w	r9, r9, #1
 8004c32:	d505      	bpl.n	8004c40 <_fwalk_reent+0x24>
 8004c34:	6824      	ldr	r4, [r4, #0]
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	d1f7      	bne.n	8004c2a <_fwalk_reent+0xe>
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c40:	89ab      	ldrh	r3, [r5, #12]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d907      	bls.n	8004c56 <_fwalk_reent+0x3a>
 8004c46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	d003      	beq.n	8004c56 <_fwalk_reent+0x3a>
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4630      	mov	r0, r6
 8004c52:	47c0      	blx	r8
 8004c54:	4307      	orrs	r7, r0
 8004c56:	3568      	adds	r5, #104	; 0x68
 8004c58:	e7e9      	b.n	8004c2e <_fwalk_reent+0x12>

08004c5a <__retarget_lock_init_recursive>:
 8004c5a:	4770      	bx	lr

08004c5c <__retarget_lock_acquire_recursive>:
 8004c5c:	4770      	bx	lr

08004c5e <__retarget_lock_release_recursive>:
 8004c5e:	4770      	bx	lr

08004c60 <sbrk_aligned>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4e0e      	ldr	r6, [pc, #56]	; (8004c9c <sbrk_aligned+0x3c>)
 8004c64:	460c      	mov	r4, r1
 8004c66:	6831      	ldr	r1, [r6, #0]
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b911      	cbnz	r1, 8004c72 <sbrk_aligned+0x12>
 8004c6c:	f000 fb7a 	bl	8005364 <_sbrk_r>
 8004c70:	6030      	str	r0, [r6, #0]
 8004c72:	4621      	mov	r1, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 fb75 	bl	8005364 <_sbrk_r>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d00a      	beq.n	8004c94 <sbrk_aligned+0x34>
 8004c7e:	1cc4      	adds	r4, r0, #3
 8004c80:	f024 0403 	bic.w	r4, r4, #3
 8004c84:	42a0      	cmp	r0, r4
 8004c86:	d007      	beq.n	8004c98 <sbrk_aligned+0x38>
 8004c88:	1a21      	subs	r1, r4, r0
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 fb6a 	bl	8005364 <_sbrk_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d101      	bne.n	8004c98 <sbrk_aligned+0x38>
 8004c94:	f04f 34ff 	mov.w	r4, #4294967295
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	20000214 	.word	0x20000214

08004ca0 <_malloc_r>:
 8004ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca4:	1ccd      	adds	r5, r1, #3
 8004ca6:	f025 0503 	bic.w	r5, r5, #3
 8004caa:	3508      	adds	r5, #8
 8004cac:	2d0c      	cmp	r5, #12
 8004cae:	bf38      	it	cc
 8004cb0:	250c      	movcc	r5, #12
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	db01      	blt.n	8004cbc <_malloc_r+0x1c>
 8004cb8:	42a9      	cmp	r1, r5
 8004cba:	d905      	bls.n	8004cc8 <_malloc_r+0x28>
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	2600      	movs	r6, #0
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc8:	4e2e      	ldr	r6, [pc, #184]	; (8004d84 <_malloc_r+0xe4>)
 8004cca:	f000 fdbb 	bl	8005844 <__malloc_lock>
 8004cce:	6833      	ldr	r3, [r6, #0]
 8004cd0:	461c      	mov	r4, r3
 8004cd2:	bb34      	cbnz	r4, 8004d22 <_malloc_r+0x82>
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f7ff ffc2 	bl	8004c60 <sbrk_aligned>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	4604      	mov	r4, r0
 8004ce0:	d14d      	bne.n	8004d7e <_malloc_r+0xde>
 8004ce2:	6834      	ldr	r4, [r6, #0]
 8004ce4:	4626      	mov	r6, r4
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	d140      	bne.n	8004d6c <_malloc_r+0xcc>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	4631      	mov	r1, r6
 8004cee:	4638      	mov	r0, r7
 8004cf0:	eb04 0803 	add.w	r8, r4, r3
 8004cf4:	f000 fb36 	bl	8005364 <_sbrk_r>
 8004cf8:	4580      	cmp	r8, r0
 8004cfa:	d13a      	bne.n	8004d72 <_malloc_r+0xd2>
 8004cfc:	6821      	ldr	r1, [r4, #0]
 8004cfe:	3503      	adds	r5, #3
 8004d00:	1a6d      	subs	r5, r5, r1
 8004d02:	f025 0503 	bic.w	r5, r5, #3
 8004d06:	3508      	adds	r5, #8
 8004d08:	2d0c      	cmp	r5, #12
 8004d0a:	bf38      	it	cc
 8004d0c:	250c      	movcc	r5, #12
 8004d0e:	4629      	mov	r1, r5
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff ffa5 	bl	8004c60 <sbrk_aligned>
 8004d16:	3001      	adds	r0, #1
 8004d18:	d02b      	beq.n	8004d72 <_malloc_r+0xd2>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	442b      	add	r3, r5
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	e00e      	b.n	8004d40 <_malloc_r+0xa0>
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	1b52      	subs	r2, r2, r5
 8004d26:	d41e      	bmi.n	8004d66 <_malloc_r+0xc6>
 8004d28:	2a0b      	cmp	r2, #11
 8004d2a:	d916      	bls.n	8004d5a <_malloc_r+0xba>
 8004d2c:	1961      	adds	r1, r4, r5
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	6025      	str	r5, [r4, #0]
 8004d32:	bf18      	it	ne
 8004d34:	6059      	strne	r1, [r3, #4]
 8004d36:	6863      	ldr	r3, [r4, #4]
 8004d38:	bf08      	it	eq
 8004d3a:	6031      	streq	r1, [r6, #0]
 8004d3c:	5162      	str	r2, [r4, r5]
 8004d3e:	604b      	str	r3, [r1, #4]
 8004d40:	4638      	mov	r0, r7
 8004d42:	f104 060b 	add.w	r6, r4, #11
 8004d46:	f000 fd83 	bl	8005850 <__malloc_unlock>
 8004d4a:	f026 0607 	bic.w	r6, r6, #7
 8004d4e:	1d23      	adds	r3, r4, #4
 8004d50:	1af2      	subs	r2, r6, r3
 8004d52:	d0b6      	beq.n	8004cc2 <_malloc_r+0x22>
 8004d54:	1b9b      	subs	r3, r3, r6
 8004d56:	50a3      	str	r3, [r4, r2]
 8004d58:	e7b3      	b.n	8004cc2 <_malloc_r+0x22>
 8004d5a:	6862      	ldr	r2, [r4, #4]
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	bf0c      	ite	eq
 8004d60:	6032      	streq	r2, [r6, #0]
 8004d62:	605a      	strne	r2, [r3, #4]
 8004d64:	e7ec      	b.n	8004d40 <_malloc_r+0xa0>
 8004d66:	4623      	mov	r3, r4
 8004d68:	6864      	ldr	r4, [r4, #4]
 8004d6a:	e7b2      	b.n	8004cd2 <_malloc_r+0x32>
 8004d6c:	4634      	mov	r4, r6
 8004d6e:	6876      	ldr	r6, [r6, #4]
 8004d70:	e7b9      	b.n	8004ce6 <_malloc_r+0x46>
 8004d72:	230c      	movs	r3, #12
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4638      	mov	r0, r7
 8004d78:	f000 fd6a 	bl	8005850 <__malloc_unlock>
 8004d7c:	e7a1      	b.n	8004cc2 <_malloc_r+0x22>
 8004d7e:	6025      	str	r5, [r4, #0]
 8004d80:	e7de      	b.n	8004d40 <_malloc_r+0xa0>
 8004d82:	bf00      	nop
 8004d84:	20000210 	.word	0x20000210

08004d88 <__sfputc_r>:
 8004d88:	6893      	ldr	r3, [r2, #8]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	b410      	push	{r4}
 8004d90:	6093      	str	r3, [r2, #8]
 8004d92:	da08      	bge.n	8004da6 <__sfputc_r+0x1e>
 8004d94:	6994      	ldr	r4, [r2, #24]
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	db01      	blt.n	8004d9e <__sfputc_r+0x16>
 8004d9a:	290a      	cmp	r1, #10
 8004d9c:	d103      	bne.n	8004da6 <__sfputc_r+0x1e>
 8004d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004da2:	f000 bb33 	b.w	800540c <__swbuf_r>
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	1c58      	adds	r0, r3, #1
 8004daa:	6010      	str	r0, [r2, #0]
 8004dac:	7019      	strb	r1, [r3, #0]
 8004dae:	4608      	mov	r0, r1
 8004db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <__sfputs_r>:
 8004db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db8:	4606      	mov	r6, r0
 8004dba:	460f      	mov	r7, r1
 8004dbc:	4614      	mov	r4, r2
 8004dbe:	18d5      	adds	r5, r2, r3
 8004dc0:	42ac      	cmp	r4, r5
 8004dc2:	d101      	bne.n	8004dc8 <__sfputs_r+0x12>
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	e007      	b.n	8004dd8 <__sfputs_r+0x22>
 8004dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dcc:	463a      	mov	r2, r7
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7ff ffda 	bl	8004d88 <__sfputc_r>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d1f3      	bne.n	8004dc0 <__sfputs_r+0xa>
 8004dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ddc <_vfiprintf_r>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	460d      	mov	r5, r1
 8004de2:	b09d      	sub	sp, #116	; 0x74
 8004de4:	4614      	mov	r4, r2
 8004de6:	4698      	mov	r8, r3
 8004de8:	4606      	mov	r6, r0
 8004dea:	b118      	cbz	r0, 8004df4 <_vfiprintf_r+0x18>
 8004dec:	6983      	ldr	r3, [r0, #24]
 8004dee:	b90b      	cbnz	r3, 8004df4 <_vfiprintf_r+0x18>
 8004df0:	f7ff fe96 	bl	8004b20 <__sinit>
 8004df4:	4b89      	ldr	r3, [pc, #548]	; (800501c <_vfiprintf_r+0x240>)
 8004df6:	429d      	cmp	r5, r3
 8004df8:	d11b      	bne.n	8004e32 <_vfiprintf_r+0x56>
 8004dfa:	6875      	ldr	r5, [r6, #4]
 8004dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dfe:	07d9      	lsls	r1, r3, #31
 8004e00:	d405      	bmi.n	8004e0e <_vfiprintf_r+0x32>
 8004e02:	89ab      	ldrh	r3, [r5, #12]
 8004e04:	059a      	lsls	r2, r3, #22
 8004e06:	d402      	bmi.n	8004e0e <_vfiprintf_r+0x32>
 8004e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e0a:	f7ff ff27 	bl	8004c5c <__retarget_lock_acquire_recursive>
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	071b      	lsls	r3, r3, #28
 8004e12:	d501      	bpl.n	8004e18 <_vfiprintf_r+0x3c>
 8004e14:	692b      	ldr	r3, [r5, #16]
 8004e16:	b9eb      	cbnz	r3, 8004e54 <_vfiprintf_r+0x78>
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f000 fb5a 	bl	80054d4 <__swsetup_r>
 8004e20:	b1c0      	cbz	r0, 8004e54 <_vfiprintf_r+0x78>
 8004e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e24:	07dc      	lsls	r4, r3, #31
 8004e26:	d50e      	bpl.n	8004e46 <_vfiprintf_r+0x6a>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	b01d      	add	sp, #116	; 0x74
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	4b7b      	ldr	r3, [pc, #492]	; (8005020 <_vfiprintf_r+0x244>)
 8004e34:	429d      	cmp	r5, r3
 8004e36:	d101      	bne.n	8004e3c <_vfiprintf_r+0x60>
 8004e38:	68b5      	ldr	r5, [r6, #8]
 8004e3a:	e7df      	b.n	8004dfc <_vfiprintf_r+0x20>
 8004e3c:	4b79      	ldr	r3, [pc, #484]	; (8005024 <_vfiprintf_r+0x248>)
 8004e3e:	429d      	cmp	r5, r3
 8004e40:	bf08      	it	eq
 8004e42:	68f5      	ldreq	r5, [r6, #12]
 8004e44:	e7da      	b.n	8004dfc <_vfiprintf_r+0x20>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	0598      	lsls	r0, r3, #22
 8004e4a:	d4ed      	bmi.n	8004e28 <_vfiprintf_r+0x4c>
 8004e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e4e:	f7ff ff06 	bl	8004c5e <__retarget_lock_release_recursive>
 8004e52:	e7e9      	b.n	8004e28 <_vfiprintf_r+0x4c>
 8004e54:	2300      	movs	r3, #0
 8004e56:	9309      	str	r3, [sp, #36]	; 0x24
 8004e58:	2320      	movs	r3, #32
 8004e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e62:	2330      	movs	r3, #48	; 0x30
 8004e64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005028 <_vfiprintf_r+0x24c>
 8004e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e6c:	f04f 0901 	mov.w	r9, #1
 8004e70:	4623      	mov	r3, r4
 8004e72:	469a      	mov	sl, r3
 8004e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e78:	b10a      	cbz	r2, 8004e7e <_vfiprintf_r+0xa2>
 8004e7a:	2a25      	cmp	r2, #37	; 0x25
 8004e7c:	d1f9      	bne.n	8004e72 <_vfiprintf_r+0x96>
 8004e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e82:	d00b      	beq.n	8004e9c <_vfiprintf_r+0xc0>
 8004e84:	465b      	mov	r3, fp
 8004e86:	4622      	mov	r2, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7ff ff93 	bl	8004db6 <__sfputs_r>
 8004e90:	3001      	adds	r0, #1
 8004e92:	f000 80aa 	beq.w	8004fea <_vfiprintf_r+0x20e>
 8004e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e98:	445a      	add	r2, fp
 8004e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80a2 	beq.w	8004fea <_vfiprintf_r+0x20e>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb0:	f10a 0a01 	add.w	sl, sl, #1
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	9307      	str	r3, [sp, #28]
 8004eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8004ebe:	4654      	mov	r4, sl
 8004ec0:	2205      	movs	r2, #5
 8004ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec6:	4858      	ldr	r0, [pc, #352]	; (8005028 <_vfiprintf_r+0x24c>)
 8004ec8:	f7fb f982 	bl	80001d0 <memchr>
 8004ecc:	9a04      	ldr	r2, [sp, #16]
 8004ece:	b9d8      	cbnz	r0, 8004f08 <_vfiprintf_r+0x12c>
 8004ed0:	06d1      	lsls	r1, r2, #27
 8004ed2:	bf44      	itt	mi
 8004ed4:	2320      	movmi	r3, #32
 8004ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eda:	0713      	lsls	r3, r2, #28
 8004edc:	bf44      	itt	mi
 8004ede:	232b      	movmi	r3, #43	; 0x2b
 8004ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eea:	d015      	beq.n	8004f18 <_vfiprintf_r+0x13c>
 8004eec:	9a07      	ldr	r2, [sp, #28]
 8004eee:	4654      	mov	r4, sl
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f04f 0c0a 	mov.w	ip, #10
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efc:	3b30      	subs	r3, #48	; 0x30
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	d94e      	bls.n	8004fa0 <_vfiprintf_r+0x1c4>
 8004f02:	b1b0      	cbz	r0, 8004f32 <_vfiprintf_r+0x156>
 8004f04:	9207      	str	r2, [sp, #28]
 8004f06:	e014      	b.n	8004f32 <_vfiprintf_r+0x156>
 8004f08:	eba0 0308 	sub.w	r3, r0, r8
 8004f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f10:	4313      	orrs	r3, r2
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	46a2      	mov	sl, r4
 8004f16:	e7d2      	b.n	8004ebe <_vfiprintf_r+0xe2>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	1d19      	adds	r1, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9103      	str	r1, [sp, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bfbb      	ittet	lt
 8004f24:	425b      	neglt	r3, r3
 8004f26:	f042 0202 	orrlt.w	r2, r2, #2
 8004f2a:	9307      	strge	r3, [sp, #28]
 8004f2c:	9307      	strlt	r3, [sp, #28]
 8004f2e:	bfb8      	it	lt
 8004f30:	9204      	strlt	r2, [sp, #16]
 8004f32:	7823      	ldrb	r3, [r4, #0]
 8004f34:	2b2e      	cmp	r3, #46	; 0x2e
 8004f36:	d10c      	bne.n	8004f52 <_vfiprintf_r+0x176>
 8004f38:	7863      	ldrb	r3, [r4, #1]
 8004f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3c:	d135      	bne.n	8004faa <_vfiprintf_r+0x1ce>
 8004f3e:	9b03      	ldr	r3, [sp, #12]
 8004f40:	1d1a      	adds	r2, r3, #4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	9203      	str	r2, [sp, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfb8      	it	lt
 8004f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f4e:	3402      	adds	r4, #2
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005038 <_vfiprintf_r+0x25c>
 8004f56:	7821      	ldrb	r1, [r4, #0]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	4650      	mov	r0, sl
 8004f5c:	f7fb f938 	bl	80001d0 <memchr>
 8004f60:	b140      	cbz	r0, 8004f74 <_vfiprintf_r+0x198>
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	eba0 000a 	sub.w	r0, r0, sl
 8004f68:	fa03 f000 	lsl.w	r0, r3, r0
 8004f6c:	9b04      	ldr	r3, [sp, #16]
 8004f6e:	4303      	orrs	r3, r0
 8004f70:	3401      	adds	r4, #1
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f78:	482c      	ldr	r0, [pc, #176]	; (800502c <_vfiprintf_r+0x250>)
 8004f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f7e:	2206      	movs	r2, #6
 8004f80:	f7fb f926 	bl	80001d0 <memchr>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d03f      	beq.n	8005008 <_vfiprintf_r+0x22c>
 8004f88:	4b29      	ldr	r3, [pc, #164]	; (8005030 <_vfiprintf_r+0x254>)
 8004f8a:	bb1b      	cbnz	r3, 8004fd4 <_vfiprintf_r+0x1f8>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	3307      	adds	r3, #7
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	3308      	adds	r3, #8
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9a:	443b      	add	r3, r7
 8004f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f9e:	e767      	b.n	8004e70 <_vfiprintf_r+0x94>
 8004fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	e7a5      	b.n	8004ef6 <_vfiprintf_r+0x11a>
 8004faa:	2300      	movs	r3, #0
 8004fac:	3401      	adds	r4, #1
 8004fae:	9305      	str	r3, [sp, #20]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f04f 0c0a 	mov.w	ip, #10
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fbc:	3a30      	subs	r2, #48	; 0x30
 8004fbe:	2a09      	cmp	r2, #9
 8004fc0:	d903      	bls.n	8004fca <_vfiprintf_r+0x1ee>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0c5      	beq.n	8004f52 <_vfiprintf_r+0x176>
 8004fc6:	9105      	str	r1, [sp, #20]
 8004fc8:	e7c3      	b.n	8004f52 <_vfiprintf_r+0x176>
 8004fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fce:	4604      	mov	r4, r0
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e7f0      	b.n	8004fb6 <_vfiprintf_r+0x1da>
 8004fd4:	ab03      	add	r3, sp, #12
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4b16      	ldr	r3, [pc, #88]	; (8005034 <_vfiprintf_r+0x258>)
 8004fdc:	a904      	add	r1, sp, #16
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f3af 8000 	nop.w
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	1c78      	adds	r0, r7, #1
 8004fe8:	d1d6      	bne.n	8004f98 <_vfiprintf_r+0x1bc>
 8004fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fec:	07d9      	lsls	r1, r3, #31
 8004fee:	d405      	bmi.n	8004ffc <_vfiprintf_r+0x220>
 8004ff0:	89ab      	ldrh	r3, [r5, #12]
 8004ff2:	059a      	lsls	r2, r3, #22
 8004ff4:	d402      	bmi.n	8004ffc <_vfiprintf_r+0x220>
 8004ff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ff8:	f7ff fe31 	bl	8004c5e <__retarget_lock_release_recursive>
 8004ffc:	89ab      	ldrh	r3, [r5, #12]
 8004ffe:	065b      	lsls	r3, r3, #25
 8005000:	f53f af12 	bmi.w	8004e28 <_vfiprintf_r+0x4c>
 8005004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005006:	e711      	b.n	8004e2c <_vfiprintf_r+0x50>
 8005008:	ab03      	add	r3, sp, #12
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	462a      	mov	r2, r5
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <_vfiprintf_r+0x258>)
 8005010:	a904      	add	r1, sp, #16
 8005012:	4630      	mov	r0, r6
 8005014:	f000 f880 	bl	8005118 <_printf_i>
 8005018:	e7e4      	b.n	8004fe4 <_vfiprintf_r+0x208>
 800501a:	bf00      	nop
 800501c:	08005a00 	.word	0x08005a00
 8005020:	08005a20 	.word	0x08005a20
 8005024:	080059e0 	.word	0x080059e0
 8005028:	08005a40 	.word	0x08005a40
 800502c:	08005a4a 	.word	0x08005a4a
 8005030:	00000000 	.word	0x00000000
 8005034:	08004db7 	.word	0x08004db7
 8005038:	08005a46 	.word	0x08005a46

0800503c <_printf_common>:
 800503c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	4616      	mov	r6, r2
 8005042:	4699      	mov	r9, r3
 8005044:	688a      	ldr	r2, [r1, #8]
 8005046:	690b      	ldr	r3, [r1, #16]
 8005048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800504c:	4293      	cmp	r3, r2
 800504e:	bfb8      	it	lt
 8005050:	4613      	movlt	r3, r2
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005058:	4607      	mov	r7, r0
 800505a:	460c      	mov	r4, r1
 800505c:	b10a      	cbz	r2, 8005062 <_printf_common+0x26>
 800505e:	3301      	adds	r3, #1
 8005060:	6033      	str	r3, [r6, #0]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	0699      	lsls	r1, r3, #26
 8005066:	bf42      	ittt	mi
 8005068:	6833      	ldrmi	r3, [r6, #0]
 800506a:	3302      	addmi	r3, #2
 800506c:	6033      	strmi	r3, [r6, #0]
 800506e:	6825      	ldr	r5, [r4, #0]
 8005070:	f015 0506 	ands.w	r5, r5, #6
 8005074:	d106      	bne.n	8005084 <_printf_common+0x48>
 8005076:	f104 0a19 	add.w	sl, r4, #25
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	6832      	ldr	r2, [r6, #0]
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	42ab      	cmp	r3, r5
 8005082:	dc26      	bgt.n	80050d2 <_printf_common+0x96>
 8005084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005088:	1e13      	subs	r3, r2, #0
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	bf18      	it	ne
 800508e:	2301      	movne	r3, #1
 8005090:	0692      	lsls	r2, r2, #26
 8005092:	d42b      	bmi.n	80050ec <_printf_common+0xb0>
 8005094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005098:	4649      	mov	r1, r9
 800509a:	4638      	mov	r0, r7
 800509c:	47c0      	blx	r8
 800509e:	3001      	adds	r0, #1
 80050a0:	d01e      	beq.n	80050e0 <_printf_common+0xa4>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	68e5      	ldr	r5, [r4, #12]
 80050a6:	6832      	ldr	r2, [r6, #0]
 80050a8:	f003 0306 	and.w	r3, r3, #6
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	bf08      	it	eq
 80050b0:	1aad      	subeq	r5, r5, r2
 80050b2:	68a3      	ldr	r3, [r4, #8]
 80050b4:	6922      	ldr	r2, [r4, #16]
 80050b6:	bf0c      	ite	eq
 80050b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050bc:	2500      	movne	r5, #0
 80050be:	4293      	cmp	r3, r2
 80050c0:	bfc4      	itt	gt
 80050c2:	1a9b      	subgt	r3, r3, r2
 80050c4:	18ed      	addgt	r5, r5, r3
 80050c6:	2600      	movs	r6, #0
 80050c8:	341a      	adds	r4, #26
 80050ca:	42b5      	cmp	r5, r6
 80050cc:	d11a      	bne.n	8005104 <_printf_common+0xc8>
 80050ce:	2000      	movs	r0, #0
 80050d0:	e008      	b.n	80050e4 <_printf_common+0xa8>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4652      	mov	r2, sl
 80050d6:	4649      	mov	r1, r9
 80050d8:	4638      	mov	r0, r7
 80050da:	47c0      	blx	r8
 80050dc:	3001      	adds	r0, #1
 80050de:	d103      	bne.n	80050e8 <_printf_common+0xac>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e8:	3501      	adds	r5, #1
 80050ea:	e7c6      	b.n	800507a <_printf_common+0x3e>
 80050ec:	18e1      	adds	r1, r4, r3
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	2030      	movs	r0, #48	; 0x30
 80050f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050f6:	4422      	add	r2, r4
 80050f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005100:	3302      	adds	r3, #2
 8005102:	e7c7      	b.n	8005094 <_printf_common+0x58>
 8005104:	2301      	movs	r3, #1
 8005106:	4622      	mov	r2, r4
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	47c0      	blx	r8
 800510e:	3001      	adds	r0, #1
 8005110:	d0e6      	beq.n	80050e0 <_printf_common+0xa4>
 8005112:	3601      	adds	r6, #1
 8005114:	e7d9      	b.n	80050ca <_printf_common+0x8e>
	...

08005118 <_printf_i>:
 8005118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	7e0f      	ldrb	r7, [r1, #24]
 800511e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005120:	2f78      	cmp	r7, #120	; 0x78
 8005122:	4691      	mov	r9, r2
 8005124:	4680      	mov	r8, r0
 8005126:	460c      	mov	r4, r1
 8005128:	469a      	mov	sl, r3
 800512a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800512e:	d807      	bhi.n	8005140 <_printf_i+0x28>
 8005130:	2f62      	cmp	r7, #98	; 0x62
 8005132:	d80a      	bhi.n	800514a <_printf_i+0x32>
 8005134:	2f00      	cmp	r7, #0
 8005136:	f000 80d8 	beq.w	80052ea <_printf_i+0x1d2>
 800513a:	2f58      	cmp	r7, #88	; 0x58
 800513c:	f000 80a3 	beq.w	8005286 <_printf_i+0x16e>
 8005140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005148:	e03a      	b.n	80051c0 <_printf_i+0xa8>
 800514a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800514e:	2b15      	cmp	r3, #21
 8005150:	d8f6      	bhi.n	8005140 <_printf_i+0x28>
 8005152:	a101      	add	r1, pc, #4	; (adr r1, 8005158 <_printf_i+0x40>)
 8005154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051c5 	.word	0x080051c5
 8005160:	08005141 	.word	0x08005141
 8005164:	08005141 	.word	0x08005141
 8005168:	08005141 	.word	0x08005141
 800516c:	08005141 	.word	0x08005141
 8005170:	080051c5 	.word	0x080051c5
 8005174:	08005141 	.word	0x08005141
 8005178:	08005141 	.word	0x08005141
 800517c:	08005141 	.word	0x08005141
 8005180:	08005141 	.word	0x08005141
 8005184:	080052d1 	.word	0x080052d1
 8005188:	080051f5 	.word	0x080051f5
 800518c:	080052b3 	.word	0x080052b3
 8005190:	08005141 	.word	0x08005141
 8005194:	08005141 	.word	0x08005141
 8005198:	080052f3 	.word	0x080052f3
 800519c:	08005141 	.word	0x08005141
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005141 	.word	0x08005141
 80051a8:	08005141 	.word	0x08005141
 80051ac:	080052bb 	.word	0x080052bb
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	1d1a      	adds	r2, r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	602a      	str	r2, [r5, #0]
 80051b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0a3      	b.n	800530c <_printf_i+0x1f4>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	6829      	ldr	r1, [r5, #0]
 80051c8:	0606      	lsls	r6, r0, #24
 80051ca:	f101 0304 	add.w	r3, r1, #4
 80051ce:	d50a      	bpl.n	80051e6 <_printf_i+0xce>
 80051d0:	680e      	ldr	r6, [r1, #0]
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	2e00      	cmp	r6, #0
 80051d6:	da03      	bge.n	80051e0 <_printf_i+0xc8>
 80051d8:	232d      	movs	r3, #45	; 0x2d
 80051da:	4276      	negs	r6, r6
 80051dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e0:	485e      	ldr	r0, [pc, #376]	; (800535c <_printf_i+0x244>)
 80051e2:	230a      	movs	r3, #10
 80051e4:	e019      	b.n	800521a <_printf_i+0x102>
 80051e6:	680e      	ldr	r6, [r1, #0]
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ee:	bf18      	it	ne
 80051f0:	b236      	sxthne	r6, r6
 80051f2:	e7ef      	b.n	80051d4 <_printf_i+0xbc>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	1d19      	adds	r1, r3, #4
 80051fa:	6029      	str	r1, [r5, #0]
 80051fc:	0601      	lsls	r1, r0, #24
 80051fe:	d501      	bpl.n	8005204 <_printf_i+0xec>
 8005200:	681e      	ldr	r6, [r3, #0]
 8005202:	e002      	b.n	800520a <_printf_i+0xf2>
 8005204:	0646      	lsls	r6, r0, #25
 8005206:	d5fb      	bpl.n	8005200 <_printf_i+0xe8>
 8005208:	881e      	ldrh	r6, [r3, #0]
 800520a:	4854      	ldr	r0, [pc, #336]	; (800535c <_printf_i+0x244>)
 800520c:	2f6f      	cmp	r7, #111	; 0x6f
 800520e:	bf0c      	ite	eq
 8005210:	2308      	moveq	r3, #8
 8005212:	230a      	movne	r3, #10
 8005214:	2100      	movs	r1, #0
 8005216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800521a:	6865      	ldr	r5, [r4, #4]
 800521c:	60a5      	str	r5, [r4, #8]
 800521e:	2d00      	cmp	r5, #0
 8005220:	bfa2      	ittt	ge
 8005222:	6821      	ldrge	r1, [r4, #0]
 8005224:	f021 0104 	bicge.w	r1, r1, #4
 8005228:	6021      	strge	r1, [r4, #0]
 800522a:	b90e      	cbnz	r6, 8005230 <_printf_i+0x118>
 800522c:	2d00      	cmp	r5, #0
 800522e:	d04d      	beq.n	80052cc <_printf_i+0x1b4>
 8005230:	4615      	mov	r5, r2
 8005232:	fbb6 f1f3 	udiv	r1, r6, r3
 8005236:	fb03 6711 	mls	r7, r3, r1, r6
 800523a:	5dc7      	ldrb	r7, [r0, r7]
 800523c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005240:	4637      	mov	r7, r6
 8005242:	42bb      	cmp	r3, r7
 8005244:	460e      	mov	r6, r1
 8005246:	d9f4      	bls.n	8005232 <_printf_i+0x11a>
 8005248:	2b08      	cmp	r3, #8
 800524a:	d10b      	bne.n	8005264 <_printf_i+0x14c>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	07de      	lsls	r6, r3, #31
 8005250:	d508      	bpl.n	8005264 <_printf_i+0x14c>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	6861      	ldr	r1, [r4, #4]
 8005256:	4299      	cmp	r1, r3
 8005258:	bfde      	ittt	le
 800525a:	2330      	movle	r3, #48	; 0x30
 800525c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005260:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005264:	1b52      	subs	r2, r2, r5
 8005266:	6122      	str	r2, [r4, #16]
 8005268:	f8cd a000 	str.w	sl, [sp]
 800526c:	464b      	mov	r3, r9
 800526e:	aa03      	add	r2, sp, #12
 8005270:	4621      	mov	r1, r4
 8005272:	4640      	mov	r0, r8
 8005274:	f7ff fee2 	bl	800503c <_printf_common>
 8005278:	3001      	adds	r0, #1
 800527a:	d14c      	bne.n	8005316 <_printf_i+0x1fe>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	b004      	add	sp, #16
 8005282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005286:	4835      	ldr	r0, [pc, #212]	; (800535c <_printf_i+0x244>)
 8005288:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800528c:	6829      	ldr	r1, [r5, #0]
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f851 6b04 	ldr.w	r6, [r1], #4
 8005294:	6029      	str	r1, [r5, #0]
 8005296:	061d      	lsls	r5, r3, #24
 8005298:	d514      	bpl.n	80052c4 <_printf_i+0x1ac>
 800529a:	07df      	lsls	r7, r3, #31
 800529c:	bf44      	itt	mi
 800529e:	f043 0320 	orrmi.w	r3, r3, #32
 80052a2:	6023      	strmi	r3, [r4, #0]
 80052a4:	b91e      	cbnz	r6, 80052ae <_printf_i+0x196>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	f023 0320 	bic.w	r3, r3, #32
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	2310      	movs	r3, #16
 80052b0:	e7b0      	b.n	8005214 <_printf_i+0xfc>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f043 0320 	orr.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	2378      	movs	r3, #120	; 0x78
 80052bc:	4828      	ldr	r0, [pc, #160]	; (8005360 <_printf_i+0x248>)
 80052be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052c2:	e7e3      	b.n	800528c <_printf_i+0x174>
 80052c4:	0659      	lsls	r1, r3, #25
 80052c6:	bf48      	it	mi
 80052c8:	b2b6      	uxthmi	r6, r6
 80052ca:	e7e6      	b.n	800529a <_printf_i+0x182>
 80052cc:	4615      	mov	r5, r2
 80052ce:	e7bb      	b.n	8005248 <_printf_i+0x130>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	6826      	ldr	r6, [r4, #0]
 80052d4:	6961      	ldr	r1, [r4, #20]
 80052d6:	1d18      	adds	r0, r3, #4
 80052d8:	6028      	str	r0, [r5, #0]
 80052da:	0635      	lsls	r5, r6, #24
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	d501      	bpl.n	80052e4 <_printf_i+0x1cc>
 80052e0:	6019      	str	r1, [r3, #0]
 80052e2:	e002      	b.n	80052ea <_printf_i+0x1d2>
 80052e4:	0670      	lsls	r0, r6, #25
 80052e6:	d5fb      	bpl.n	80052e0 <_printf_i+0x1c8>
 80052e8:	8019      	strh	r1, [r3, #0]
 80052ea:	2300      	movs	r3, #0
 80052ec:	6123      	str	r3, [r4, #16]
 80052ee:	4615      	mov	r5, r2
 80052f0:	e7ba      	b.n	8005268 <_printf_i+0x150>
 80052f2:	682b      	ldr	r3, [r5, #0]
 80052f4:	1d1a      	adds	r2, r3, #4
 80052f6:	602a      	str	r2, [r5, #0]
 80052f8:	681d      	ldr	r5, [r3, #0]
 80052fa:	6862      	ldr	r2, [r4, #4]
 80052fc:	2100      	movs	r1, #0
 80052fe:	4628      	mov	r0, r5
 8005300:	f7fa ff66 	bl	80001d0 <memchr>
 8005304:	b108      	cbz	r0, 800530a <_printf_i+0x1f2>
 8005306:	1b40      	subs	r0, r0, r5
 8005308:	6060      	str	r0, [r4, #4]
 800530a:	6863      	ldr	r3, [r4, #4]
 800530c:	6123      	str	r3, [r4, #16]
 800530e:	2300      	movs	r3, #0
 8005310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005314:	e7a8      	b.n	8005268 <_printf_i+0x150>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	462a      	mov	r2, r5
 800531a:	4649      	mov	r1, r9
 800531c:	4640      	mov	r0, r8
 800531e:	47d0      	blx	sl
 8005320:	3001      	adds	r0, #1
 8005322:	d0ab      	beq.n	800527c <_printf_i+0x164>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	079b      	lsls	r3, r3, #30
 8005328:	d413      	bmi.n	8005352 <_printf_i+0x23a>
 800532a:	68e0      	ldr	r0, [r4, #12]
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	4298      	cmp	r0, r3
 8005330:	bfb8      	it	lt
 8005332:	4618      	movlt	r0, r3
 8005334:	e7a4      	b.n	8005280 <_printf_i+0x168>
 8005336:	2301      	movs	r3, #1
 8005338:	4632      	mov	r2, r6
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	47d0      	blx	sl
 8005340:	3001      	adds	r0, #1
 8005342:	d09b      	beq.n	800527c <_printf_i+0x164>
 8005344:	3501      	adds	r5, #1
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	9903      	ldr	r1, [sp, #12]
 800534a:	1a5b      	subs	r3, r3, r1
 800534c:	42ab      	cmp	r3, r5
 800534e:	dcf2      	bgt.n	8005336 <_printf_i+0x21e>
 8005350:	e7eb      	b.n	800532a <_printf_i+0x212>
 8005352:	2500      	movs	r5, #0
 8005354:	f104 0619 	add.w	r6, r4, #25
 8005358:	e7f5      	b.n	8005346 <_printf_i+0x22e>
 800535a:	bf00      	nop
 800535c:	08005a51 	.word	0x08005a51
 8005360:	08005a62 	.word	0x08005a62

08005364 <_sbrk_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_sbrk_r+0x1c>)
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fb fc9c 	bl	8000cac <_sbrk>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_sbrk_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_sbrk_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	20000218 	.word	0x20000218

08005384 <__sread>:
 8005384:	b510      	push	{r4, lr}
 8005386:	460c      	mov	r4, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	f000 fab2 	bl	80058f4 <_read_r>
 8005390:	2800      	cmp	r0, #0
 8005392:	bfab      	itete	ge
 8005394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005396:	89a3      	ldrhlt	r3, [r4, #12]
 8005398:	181b      	addge	r3, r3, r0
 800539a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800539e:	bfac      	ite	ge
 80053a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80053a2:	81a3      	strhlt	r3, [r4, #12]
 80053a4:	bd10      	pop	{r4, pc}

080053a6 <__swrite>:
 80053a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	461f      	mov	r7, r3
 80053ac:	898b      	ldrh	r3, [r1, #12]
 80053ae:	05db      	lsls	r3, r3, #23
 80053b0:	4605      	mov	r5, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	4616      	mov	r6, r2
 80053b6:	d505      	bpl.n	80053c4 <__swrite+0x1e>
 80053b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053bc:	2302      	movs	r3, #2
 80053be:	2200      	movs	r2, #0
 80053c0:	f000 f9c8 	bl	8005754 <_lseek_r>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	4632      	mov	r2, r6
 80053d2:	463b      	mov	r3, r7
 80053d4:	4628      	mov	r0, r5
 80053d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053da:	f000 b869 	b.w	80054b0 <_write_r>

080053de <__sseek>:
 80053de:	b510      	push	{r4, lr}
 80053e0:	460c      	mov	r4, r1
 80053e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e6:	f000 f9b5 	bl	8005754 <_lseek_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	bf15      	itete	ne
 80053f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053fa:	81a3      	strheq	r3, [r4, #12]
 80053fc:	bf18      	it	ne
 80053fe:	81a3      	strhne	r3, [r4, #12]
 8005400:	bd10      	pop	{r4, pc}

08005402 <__sclose>:
 8005402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005406:	f000 b8d3 	b.w	80055b0 <_close_r>
	...

0800540c <__swbuf_r>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	460e      	mov	r6, r1
 8005410:	4614      	mov	r4, r2
 8005412:	4605      	mov	r5, r0
 8005414:	b118      	cbz	r0, 800541e <__swbuf_r+0x12>
 8005416:	6983      	ldr	r3, [r0, #24]
 8005418:	b90b      	cbnz	r3, 800541e <__swbuf_r+0x12>
 800541a:	f7ff fb81 	bl	8004b20 <__sinit>
 800541e:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <__swbuf_r+0x98>)
 8005420:	429c      	cmp	r4, r3
 8005422:	d12b      	bne.n	800547c <__swbuf_r+0x70>
 8005424:	686c      	ldr	r4, [r5, #4]
 8005426:	69a3      	ldr	r3, [r4, #24]
 8005428:	60a3      	str	r3, [r4, #8]
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	071a      	lsls	r2, r3, #28
 800542e:	d52f      	bpl.n	8005490 <__swbuf_r+0x84>
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	b36b      	cbz	r3, 8005490 <__swbuf_r+0x84>
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	6820      	ldr	r0, [r4, #0]
 8005438:	1ac0      	subs	r0, r0, r3
 800543a:	6963      	ldr	r3, [r4, #20]
 800543c:	b2f6      	uxtb	r6, r6
 800543e:	4283      	cmp	r3, r0
 8005440:	4637      	mov	r7, r6
 8005442:	dc04      	bgt.n	800544e <__swbuf_r+0x42>
 8005444:	4621      	mov	r1, r4
 8005446:	4628      	mov	r0, r5
 8005448:	f000 f948 	bl	80056dc <_fflush_r>
 800544c:	bb30      	cbnz	r0, 800549c <__swbuf_r+0x90>
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	3b01      	subs	r3, #1
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	6022      	str	r2, [r4, #0]
 800545a:	701e      	strb	r6, [r3, #0]
 800545c:	6963      	ldr	r3, [r4, #20]
 800545e:	3001      	adds	r0, #1
 8005460:	4283      	cmp	r3, r0
 8005462:	d004      	beq.n	800546e <__swbuf_r+0x62>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	07db      	lsls	r3, r3, #31
 8005468:	d506      	bpl.n	8005478 <__swbuf_r+0x6c>
 800546a:	2e0a      	cmp	r6, #10
 800546c:	d104      	bne.n	8005478 <__swbuf_r+0x6c>
 800546e:	4621      	mov	r1, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f000 f933 	bl	80056dc <_fflush_r>
 8005476:	b988      	cbnz	r0, 800549c <__swbuf_r+0x90>
 8005478:	4638      	mov	r0, r7
 800547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <__swbuf_r+0x9c>)
 800547e:	429c      	cmp	r4, r3
 8005480:	d101      	bne.n	8005486 <__swbuf_r+0x7a>
 8005482:	68ac      	ldr	r4, [r5, #8]
 8005484:	e7cf      	b.n	8005426 <__swbuf_r+0x1a>
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <__swbuf_r+0xa0>)
 8005488:	429c      	cmp	r4, r3
 800548a:	bf08      	it	eq
 800548c:	68ec      	ldreq	r4, [r5, #12]
 800548e:	e7ca      	b.n	8005426 <__swbuf_r+0x1a>
 8005490:	4621      	mov	r1, r4
 8005492:	4628      	mov	r0, r5
 8005494:	f000 f81e 	bl	80054d4 <__swsetup_r>
 8005498:	2800      	cmp	r0, #0
 800549a:	d0cb      	beq.n	8005434 <__swbuf_r+0x28>
 800549c:	f04f 37ff 	mov.w	r7, #4294967295
 80054a0:	e7ea      	b.n	8005478 <__swbuf_r+0x6c>
 80054a2:	bf00      	nop
 80054a4:	08005a00 	.word	0x08005a00
 80054a8:	08005a20 	.word	0x08005a20
 80054ac:	080059e0 	.word	0x080059e0

080054b0 <_write_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	; (80054d0 <_write_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fb f87f 	bl	80005c2 <_write>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_write_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_write_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000218 	.word	0x20000218

080054d4 <__swsetup_r>:
 80054d4:	4b32      	ldr	r3, [pc, #200]	; (80055a0 <__swsetup_r+0xcc>)
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	681d      	ldr	r5, [r3, #0]
 80054da:	4606      	mov	r6, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	b125      	cbz	r5, 80054ea <__swsetup_r+0x16>
 80054e0:	69ab      	ldr	r3, [r5, #24]
 80054e2:	b913      	cbnz	r3, 80054ea <__swsetup_r+0x16>
 80054e4:	4628      	mov	r0, r5
 80054e6:	f7ff fb1b 	bl	8004b20 <__sinit>
 80054ea:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <__swsetup_r+0xd0>)
 80054ec:	429c      	cmp	r4, r3
 80054ee:	d10f      	bne.n	8005510 <__swsetup_r+0x3c>
 80054f0:	686c      	ldr	r4, [r5, #4]
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054f8:	0719      	lsls	r1, r3, #28
 80054fa:	d42c      	bmi.n	8005556 <__swsetup_r+0x82>
 80054fc:	06dd      	lsls	r5, r3, #27
 80054fe:	d411      	bmi.n	8005524 <__swsetup_r+0x50>
 8005500:	2309      	movs	r3, #9
 8005502:	6033      	str	r3, [r6, #0]
 8005504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	e03e      	b.n	800558e <__swsetup_r+0xba>
 8005510:	4b25      	ldr	r3, [pc, #148]	; (80055a8 <__swsetup_r+0xd4>)
 8005512:	429c      	cmp	r4, r3
 8005514:	d101      	bne.n	800551a <__swsetup_r+0x46>
 8005516:	68ac      	ldr	r4, [r5, #8]
 8005518:	e7eb      	b.n	80054f2 <__swsetup_r+0x1e>
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <__swsetup_r+0xd8>)
 800551c:	429c      	cmp	r4, r3
 800551e:	bf08      	it	eq
 8005520:	68ec      	ldreq	r4, [r5, #12]
 8005522:	e7e6      	b.n	80054f2 <__swsetup_r+0x1e>
 8005524:	0758      	lsls	r0, r3, #29
 8005526:	d512      	bpl.n	800554e <__swsetup_r+0x7a>
 8005528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552a:	b141      	cbz	r1, 800553e <__swsetup_r+0x6a>
 800552c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005530:	4299      	cmp	r1, r3
 8005532:	d002      	beq.n	800553a <__swsetup_r+0x66>
 8005534:	4630      	mov	r0, r6
 8005536:	f000 f991 	bl	800585c <_free_r>
 800553a:	2300      	movs	r3, #0
 800553c:	6363      	str	r3, [r4, #52]	; 0x34
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	2300      	movs	r3, #0
 8005548:	6063      	str	r3, [r4, #4]
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	f043 0308 	orr.w	r3, r3, #8
 8005554:	81a3      	strh	r3, [r4, #12]
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	b94b      	cbnz	r3, 800556e <__swsetup_r+0x9a>
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005564:	d003      	beq.n	800556e <__swsetup_r+0x9a>
 8005566:	4621      	mov	r1, r4
 8005568:	4630      	mov	r0, r6
 800556a:	f000 f92b 	bl	80057c4 <__smakebuf_r>
 800556e:	89a0      	ldrh	r0, [r4, #12]
 8005570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005574:	f010 0301 	ands.w	r3, r0, #1
 8005578:	d00a      	beq.n	8005590 <__swsetup_r+0xbc>
 800557a:	2300      	movs	r3, #0
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	6963      	ldr	r3, [r4, #20]
 8005580:	425b      	negs	r3, r3
 8005582:	61a3      	str	r3, [r4, #24]
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	b943      	cbnz	r3, 800559a <__swsetup_r+0xc6>
 8005588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800558c:	d1ba      	bne.n	8005504 <__swsetup_r+0x30>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	0781      	lsls	r1, r0, #30
 8005592:	bf58      	it	pl
 8005594:	6963      	ldrpl	r3, [r4, #20]
 8005596:	60a3      	str	r3, [r4, #8]
 8005598:	e7f4      	b.n	8005584 <__swsetup_r+0xb0>
 800559a:	2000      	movs	r0, #0
 800559c:	e7f7      	b.n	800558e <__swsetup_r+0xba>
 800559e:	bf00      	nop
 80055a0:	2000000c 	.word	0x2000000c
 80055a4:	08005a00 	.word	0x08005a00
 80055a8:	08005a20 	.word	0x08005a20
 80055ac:	080059e0 	.word	0x080059e0

080055b0 <_close_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d06      	ldr	r5, [pc, #24]	; (80055cc <_close_r+0x1c>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	f7fb fb41 	bl	8000c42 <_close>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_close_r+0x1a>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_close_r+0x1a>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	20000218 	.word	0x20000218

080055d0 <__sflush_r>:
 80055d0:	898a      	ldrh	r2, [r1, #12]
 80055d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d6:	4605      	mov	r5, r0
 80055d8:	0710      	lsls	r0, r2, #28
 80055da:	460c      	mov	r4, r1
 80055dc:	d458      	bmi.n	8005690 <__sflush_r+0xc0>
 80055de:	684b      	ldr	r3, [r1, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dc05      	bgt.n	80055f0 <__sflush_r+0x20>
 80055e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dc02      	bgt.n	80055f0 <__sflush_r+0x20>
 80055ea:	2000      	movs	r0, #0
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	d0f9      	beq.n	80055ea <__sflush_r+0x1a>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055fc:	682f      	ldr	r7, [r5, #0]
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	d032      	beq.n	8005668 <__sflush_r+0x98>
 8005602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	075a      	lsls	r2, r3, #29
 8005608:	d505      	bpl.n	8005616 <__sflush_r+0x46>
 800560a:	6863      	ldr	r3, [r4, #4]
 800560c:	1ac0      	subs	r0, r0, r3
 800560e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005610:	b10b      	cbz	r3, 8005616 <__sflush_r+0x46>
 8005612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005614:	1ac0      	subs	r0, r0, r3
 8005616:	2300      	movs	r3, #0
 8005618:	4602      	mov	r2, r0
 800561a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800561c:	6a21      	ldr	r1, [r4, #32]
 800561e:	4628      	mov	r0, r5
 8005620:	47b0      	blx	r6
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	d106      	bne.n	8005636 <__sflush_r+0x66>
 8005628:	6829      	ldr	r1, [r5, #0]
 800562a:	291d      	cmp	r1, #29
 800562c:	d82c      	bhi.n	8005688 <__sflush_r+0xb8>
 800562e:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <__sflush_r+0x108>)
 8005630:	40ca      	lsrs	r2, r1
 8005632:	07d6      	lsls	r6, r2, #31
 8005634:	d528      	bpl.n	8005688 <__sflush_r+0xb8>
 8005636:	2200      	movs	r2, #0
 8005638:	6062      	str	r2, [r4, #4]
 800563a:	04d9      	lsls	r1, r3, #19
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	d504      	bpl.n	800564c <__sflush_r+0x7c>
 8005642:	1c42      	adds	r2, r0, #1
 8005644:	d101      	bne.n	800564a <__sflush_r+0x7a>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	b903      	cbnz	r3, 800564c <__sflush_r+0x7c>
 800564a:	6560      	str	r0, [r4, #84]	; 0x54
 800564c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800564e:	602f      	str	r7, [r5, #0]
 8005650:	2900      	cmp	r1, #0
 8005652:	d0ca      	beq.n	80055ea <__sflush_r+0x1a>
 8005654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005658:	4299      	cmp	r1, r3
 800565a:	d002      	beq.n	8005662 <__sflush_r+0x92>
 800565c:	4628      	mov	r0, r5
 800565e:	f000 f8fd 	bl	800585c <_free_r>
 8005662:	2000      	movs	r0, #0
 8005664:	6360      	str	r0, [r4, #52]	; 0x34
 8005666:	e7c1      	b.n	80055ec <__sflush_r+0x1c>
 8005668:	6a21      	ldr	r1, [r4, #32]
 800566a:	2301      	movs	r3, #1
 800566c:	4628      	mov	r0, r5
 800566e:	47b0      	blx	r6
 8005670:	1c41      	adds	r1, r0, #1
 8005672:	d1c7      	bne.n	8005604 <__sflush_r+0x34>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0c4      	beq.n	8005604 <__sflush_r+0x34>
 800567a:	2b1d      	cmp	r3, #29
 800567c:	d001      	beq.n	8005682 <__sflush_r+0xb2>
 800567e:	2b16      	cmp	r3, #22
 8005680:	d101      	bne.n	8005686 <__sflush_r+0xb6>
 8005682:	602f      	str	r7, [r5, #0]
 8005684:	e7b1      	b.n	80055ea <__sflush_r+0x1a>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	e7ad      	b.n	80055ec <__sflush_r+0x1c>
 8005690:	690f      	ldr	r7, [r1, #16]
 8005692:	2f00      	cmp	r7, #0
 8005694:	d0a9      	beq.n	80055ea <__sflush_r+0x1a>
 8005696:	0793      	lsls	r3, r2, #30
 8005698:	680e      	ldr	r6, [r1, #0]
 800569a:	bf08      	it	eq
 800569c:	694b      	ldreq	r3, [r1, #20]
 800569e:	600f      	str	r7, [r1, #0]
 80056a0:	bf18      	it	ne
 80056a2:	2300      	movne	r3, #0
 80056a4:	eba6 0807 	sub.w	r8, r6, r7
 80056a8:	608b      	str	r3, [r1, #8]
 80056aa:	f1b8 0f00 	cmp.w	r8, #0
 80056ae:	dd9c      	ble.n	80055ea <__sflush_r+0x1a>
 80056b0:	6a21      	ldr	r1, [r4, #32]
 80056b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056b4:	4643      	mov	r3, r8
 80056b6:	463a      	mov	r2, r7
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b0      	blx	r6
 80056bc:	2800      	cmp	r0, #0
 80056be:	dc06      	bgt.n	80056ce <__sflush_r+0xfe>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	e78e      	b.n	80055ec <__sflush_r+0x1c>
 80056ce:	4407      	add	r7, r0
 80056d0:	eba8 0800 	sub.w	r8, r8, r0
 80056d4:	e7e9      	b.n	80056aa <__sflush_r+0xda>
 80056d6:	bf00      	nop
 80056d8:	20400001 	.word	0x20400001

080056dc <_fflush_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	4605      	mov	r5, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b913      	cbnz	r3, 80056ec <_fflush_r+0x10>
 80056e6:	2500      	movs	r5, #0
 80056e8:	4628      	mov	r0, r5
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	b118      	cbz	r0, 80056f6 <_fflush_r+0x1a>
 80056ee:	6983      	ldr	r3, [r0, #24]
 80056f0:	b90b      	cbnz	r3, 80056f6 <_fflush_r+0x1a>
 80056f2:	f7ff fa15 	bl	8004b20 <__sinit>
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <_fflush_r+0x6c>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d11b      	bne.n	8005734 <_fflush_r+0x58>
 80056fc:	686c      	ldr	r4, [r5, #4]
 80056fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0ef      	beq.n	80056e6 <_fflush_r+0xa>
 8005706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005708:	07d0      	lsls	r0, r2, #31
 800570a:	d404      	bmi.n	8005716 <_fflush_r+0x3a>
 800570c:	0599      	lsls	r1, r3, #22
 800570e:	d402      	bmi.n	8005716 <_fflush_r+0x3a>
 8005710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005712:	f7ff faa3 	bl	8004c5c <__retarget_lock_acquire_recursive>
 8005716:	4628      	mov	r0, r5
 8005718:	4621      	mov	r1, r4
 800571a:	f7ff ff59 	bl	80055d0 <__sflush_r>
 800571e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005720:	07da      	lsls	r2, r3, #31
 8005722:	4605      	mov	r5, r0
 8005724:	d4e0      	bmi.n	80056e8 <_fflush_r+0xc>
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	059b      	lsls	r3, r3, #22
 800572a:	d4dd      	bmi.n	80056e8 <_fflush_r+0xc>
 800572c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800572e:	f7ff fa96 	bl	8004c5e <__retarget_lock_release_recursive>
 8005732:	e7d9      	b.n	80056e8 <_fflush_r+0xc>
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <_fflush_r+0x70>)
 8005736:	429c      	cmp	r4, r3
 8005738:	d101      	bne.n	800573e <_fflush_r+0x62>
 800573a:	68ac      	ldr	r4, [r5, #8]
 800573c:	e7df      	b.n	80056fe <_fflush_r+0x22>
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <_fflush_r+0x74>)
 8005740:	429c      	cmp	r4, r3
 8005742:	bf08      	it	eq
 8005744:	68ec      	ldreq	r4, [r5, #12]
 8005746:	e7da      	b.n	80056fe <_fflush_r+0x22>
 8005748:	08005a00 	.word	0x08005a00
 800574c:	08005a20 	.word	0x08005a20
 8005750:	080059e0 	.word	0x080059e0

08005754 <_lseek_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d07      	ldr	r5, [pc, #28]	; (8005774 <_lseek_r+0x20>)
 8005758:	4604      	mov	r4, r0
 800575a:	4608      	mov	r0, r1
 800575c:	4611      	mov	r1, r2
 800575e:	2200      	movs	r2, #0
 8005760:	602a      	str	r2, [r5, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f7fb fa94 	bl	8000c90 <_lseek>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_lseek_r+0x1e>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_lseek_r+0x1e>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20000218 	.word	0x20000218

08005778 <__swhatbuf_r>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	460e      	mov	r6, r1
 800577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005780:	2900      	cmp	r1, #0
 8005782:	b096      	sub	sp, #88	; 0x58
 8005784:	4614      	mov	r4, r2
 8005786:	461d      	mov	r5, r3
 8005788:	da08      	bge.n	800579c <__swhatbuf_r+0x24>
 800578a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	061a      	lsls	r2, r3, #24
 8005794:	d410      	bmi.n	80057b8 <__swhatbuf_r+0x40>
 8005796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800579a:	e00e      	b.n	80057ba <__swhatbuf_r+0x42>
 800579c:	466a      	mov	r2, sp
 800579e:	f000 f8bb 	bl	8005918 <_fstat_r>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	dbf1      	blt.n	800578a <__swhatbuf_r+0x12>
 80057a6:	9a01      	ldr	r2, [sp, #4]
 80057a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057b0:	425a      	negs	r2, r3
 80057b2:	415a      	adcs	r2, r3
 80057b4:	602a      	str	r2, [r5, #0]
 80057b6:	e7ee      	b.n	8005796 <__swhatbuf_r+0x1e>
 80057b8:	2340      	movs	r3, #64	; 0x40
 80057ba:	2000      	movs	r0, #0
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	b016      	add	sp, #88	; 0x58
 80057c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080057c4 <__smakebuf_r>:
 80057c4:	898b      	ldrh	r3, [r1, #12]
 80057c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057c8:	079d      	lsls	r5, r3, #30
 80057ca:	4606      	mov	r6, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	d507      	bpl.n	80057e0 <__smakebuf_r+0x1c>
 80057d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	2301      	movs	r3, #1
 80057da:	6163      	str	r3, [r4, #20]
 80057dc:	b002      	add	sp, #8
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	ab01      	add	r3, sp, #4
 80057e2:	466a      	mov	r2, sp
 80057e4:	f7ff ffc8 	bl	8005778 <__swhatbuf_r>
 80057e8:	9900      	ldr	r1, [sp, #0]
 80057ea:	4605      	mov	r5, r0
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff fa57 	bl	8004ca0 <_malloc_r>
 80057f2:	b948      	cbnz	r0, 8005808 <__smakebuf_r+0x44>
 80057f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f8:	059a      	lsls	r2, r3, #22
 80057fa:	d4ef      	bmi.n	80057dc <__smakebuf_r+0x18>
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	e7e3      	b.n	80057d0 <__smakebuf_r+0xc>
 8005808:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <__smakebuf_r+0x7c>)
 800580a:	62b3      	str	r3, [r6, #40]	; 0x28
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	6020      	str	r0, [r4, #0]
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	6163      	str	r3, [r4, #20]
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	6120      	str	r0, [r4, #16]
 800581e:	b15b      	cbz	r3, 8005838 <__smakebuf_r+0x74>
 8005820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005824:	4630      	mov	r0, r6
 8005826:	f000 f889 	bl	800593c <_isatty_r>
 800582a:	b128      	cbz	r0, 8005838 <__smakebuf_r+0x74>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	89a0      	ldrh	r0, [r4, #12]
 800583a:	4305      	orrs	r5, r0
 800583c:	81a5      	strh	r5, [r4, #12]
 800583e:	e7cd      	b.n	80057dc <__smakebuf_r+0x18>
 8005840:	08004ab9 	.word	0x08004ab9

08005844 <__malloc_lock>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__malloc_lock+0x8>)
 8005846:	f7ff ba09 	b.w	8004c5c <__retarget_lock_acquire_recursive>
 800584a:	bf00      	nop
 800584c:	2000020c 	.word	0x2000020c

08005850 <__malloc_unlock>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__malloc_unlock+0x8>)
 8005852:	f7ff ba04 	b.w	8004c5e <__retarget_lock_release_recursive>
 8005856:	bf00      	nop
 8005858:	2000020c 	.word	0x2000020c

0800585c <_free_r>:
 800585c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800585e:	2900      	cmp	r1, #0
 8005860:	d044      	beq.n	80058ec <_free_r+0x90>
 8005862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005866:	9001      	str	r0, [sp, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f1a1 0404 	sub.w	r4, r1, #4
 800586e:	bfb8      	it	lt
 8005870:	18e4      	addlt	r4, r4, r3
 8005872:	f7ff ffe7 	bl	8005844 <__malloc_lock>
 8005876:	4a1e      	ldr	r2, [pc, #120]	; (80058f0 <_free_r+0x94>)
 8005878:	9801      	ldr	r0, [sp, #4]
 800587a:	6813      	ldr	r3, [r2, #0]
 800587c:	b933      	cbnz	r3, 800588c <_free_r+0x30>
 800587e:	6063      	str	r3, [r4, #4]
 8005880:	6014      	str	r4, [r2, #0]
 8005882:	b003      	add	sp, #12
 8005884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005888:	f7ff bfe2 	b.w	8005850 <__malloc_unlock>
 800588c:	42a3      	cmp	r3, r4
 800588e:	d908      	bls.n	80058a2 <_free_r+0x46>
 8005890:	6825      	ldr	r5, [r4, #0]
 8005892:	1961      	adds	r1, r4, r5
 8005894:	428b      	cmp	r3, r1
 8005896:	bf01      	itttt	eq
 8005898:	6819      	ldreq	r1, [r3, #0]
 800589a:	685b      	ldreq	r3, [r3, #4]
 800589c:	1949      	addeq	r1, r1, r5
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	e7ed      	b.n	800587e <_free_r+0x22>
 80058a2:	461a      	mov	r2, r3
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	b10b      	cbz	r3, 80058ac <_free_r+0x50>
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	d9fa      	bls.n	80058a2 <_free_r+0x46>
 80058ac:	6811      	ldr	r1, [r2, #0]
 80058ae:	1855      	adds	r5, r2, r1
 80058b0:	42a5      	cmp	r5, r4
 80058b2:	d10b      	bne.n	80058cc <_free_r+0x70>
 80058b4:	6824      	ldr	r4, [r4, #0]
 80058b6:	4421      	add	r1, r4
 80058b8:	1854      	adds	r4, r2, r1
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	6011      	str	r1, [r2, #0]
 80058be:	d1e0      	bne.n	8005882 <_free_r+0x26>
 80058c0:	681c      	ldr	r4, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	6053      	str	r3, [r2, #4]
 80058c6:	4421      	add	r1, r4
 80058c8:	6011      	str	r1, [r2, #0]
 80058ca:	e7da      	b.n	8005882 <_free_r+0x26>
 80058cc:	d902      	bls.n	80058d4 <_free_r+0x78>
 80058ce:	230c      	movs	r3, #12
 80058d0:	6003      	str	r3, [r0, #0]
 80058d2:	e7d6      	b.n	8005882 <_free_r+0x26>
 80058d4:	6825      	ldr	r5, [r4, #0]
 80058d6:	1961      	adds	r1, r4, r5
 80058d8:	428b      	cmp	r3, r1
 80058da:	bf04      	itt	eq
 80058dc:	6819      	ldreq	r1, [r3, #0]
 80058de:	685b      	ldreq	r3, [r3, #4]
 80058e0:	6063      	str	r3, [r4, #4]
 80058e2:	bf04      	itt	eq
 80058e4:	1949      	addeq	r1, r1, r5
 80058e6:	6021      	streq	r1, [r4, #0]
 80058e8:	6054      	str	r4, [r2, #4]
 80058ea:	e7ca      	b.n	8005882 <_free_r+0x26>
 80058ec:	b003      	add	sp, #12
 80058ee:	bd30      	pop	{r4, r5, pc}
 80058f0:	20000210 	.word	0x20000210

080058f4 <_read_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d07      	ldr	r5, [pc, #28]	; (8005914 <_read_r+0x20>)
 80058f8:	4604      	mov	r4, r0
 80058fa:	4608      	mov	r0, r1
 80058fc:	4611      	mov	r1, r2
 80058fe:	2200      	movs	r2, #0
 8005900:	602a      	str	r2, [r5, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	f7fb f980 	bl	8000c08 <_read>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_read_r+0x1e>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_read_r+0x1e>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	20000218 	.word	0x20000218

08005918 <_fstat_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4d07      	ldr	r5, [pc, #28]	; (8005938 <_fstat_r+0x20>)
 800591c:	2300      	movs	r3, #0
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	f7fb f998 	bl	8000c5a <_fstat>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d102      	bne.n	8005934 <_fstat_r+0x1c>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	b103      	cbz	r3, 8005934 <_fstat_r+0x1c>
 8005932:	6023      	str	r3, [r4, #0]
 8005934:	bd38      	pop	{r3, r4, r5, pc}
 8005936:	bf00      	nop
 8005938:	20000218 	.word	0x20000218

0800593c <_isatty_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d06      	ldr	r5, [pc, #24]	; (8005958 <_isatty_r+0x1c>)
 8005940:	2300      	movs	r3, #0
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fb f997 	bl	8000c7a <_isatty>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_isatty_r+0x1a>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_isatty_r+0x1a>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20000218 	.word	0x20000218

0800595c <_init>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr

08005968 <_fini>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr
