
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064fc  080064fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006504  08006504  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800650c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  0800657c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  0800657c  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4de  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002264  00000000  00000000  0002f57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00032480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002789e  00000000  00000000  00033040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f180  00000000  00000000  0005a8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee36c  00000000  00000000  00069a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b04  00000000  00000000  00157e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063e0 	.word	0x080063e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080063e0 	.word	0x080063e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_write>:
/* USER CODE BEGIN 0 */

#define MainBuf_SIZE 20
uint8_t MainBuf[MainBuf_SIZE];

int _write(int file, char *ptr, int len) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
		ITM_SendChar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffc9 	bl	8000574 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
	}
	return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <byte_to_bin>:
void byte_to_bin(uint8_t byte, bool* output) {
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	6039      	str	r1, [r7, #0]
 8000604:	71fb      	strb	r3, [r7, #7]
  for (size_t i = 0; i < 8; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e013      	b.n	8000634 <byte_to_bin+0x3a>
    output[7 - i] = (byte >> i) & 1;
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	fa42 f303 	asr.w	r3, r2, r3
 8000614:	f003 0201 	and.w	r2, r3, #1
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f1c3 0307 	rsb	r3, r3, #7
 800061e:	6839      	ldr	r1, [r7, #0]
 8000620:	440b      	add	r3, r1
 8000622:	2a00      	cmp	r2, #0
 8000624:	bf14      	ite	ne
 8000626:	2201      	movne	r2, #1
 8000628:	2200      	moveq	r2, #0
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b07      	cmp	r3, #7
 8000638:	d9e8      	bls.n	800060c <byte_to_bin+0x12>
  }
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <boolgenSPI>:
  }
  printf("\n");
}

void boolgenSPI(bool* R,bool* G,bool* B,bool* R2,bool* G2,bool* B2,unsigned char* Data )
{
 8000648:	b480      	push	{r7}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
  for(uint8_t i=0;i<8;i++)
 8000656:	2300      	movs	r3, #0
 8000658:	75fb      	strb	r3, [r7, #23]
 800065a:	e01c      	b.n	8000696 <boolgenSPI+0x4e>
  {
    if(R[i]==true)
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <boolgenSPI+0x2c>
    {
      Data[i]=one;
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800066c:	4413      	add	r3, r2
 800066e:	22f0      	movs	r2, #240	; 0xf0
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e00d      	b.n	8000690 <boolgenSPI+0x48>
    }
    else if(R[i]==false)
 8000674:	7dfb      	ldrb	r3, [r7, #23]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d004      	beq.n	8000690 <boolgenSPI+0x48>
    {
      Data[i]=zero;
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800068a:	4413      	add	r3, r2
 800068c:	22c0      	movs	r2, #192	; 0xc0
 800068e:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	3301      	adds	r3, #1
 8000694:	75fb      	strb	r3, [r7, #23]
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d9df      	bls.n	800065c <boolgenSPI+0x14>
    }
  }
  for(uint8_t i=0;i<8;i++)
 800069c:	2300      	movs	r3, #0
 800069e:	75bb      	strb	r3, [r7, #22]
 80006a0:	e020      	b.n	80006e4 <boolgenSPI+0x9c>
  {
    if(G[i]==true)
 80006a2:	7dbb      	ldrb	r3, [r7, #22]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <boolgenSPI+0x76>
    {
      Data[8+i]=one;
 80006ae:	7dbb      	ldrb	r3, [r7, #22]
 80006b0:	3308      	adds	r3, #8
 80006b2:	461a      	mov	r2, r3
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	4413      	add	r3, r2
 80006b8:	22f0      	movs	r2, #240	; 0xf0
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e00f      	b.n	80006de <boolgenSPI+0x96>
    }
    else if(G[i]==false)
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	f083 0301 	eor.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d006      	beq.n	80006de <boolgenSPI+0x96>
    {
      Data[8+i]=zero;
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	3308      	adds	r3, #8
 80006d4:	461a      	mov	r2, r3
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	4413      	add	r3, r2
 80006da:	22c0      	movs	r2, #192	; 0xc0
 80006dc:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 80006de:	7dbb      	ldrb	r3, [r7, #22]
 80006e0:	3301      	adds	r3, #1
 80006e2:	75bb      	strb	r3, [r7, #22]
 80006e4:	7dbb      	ldrb	r3, [r7, #22]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d9db      	bls.n	80006a2 <boolgenSPI+0x5a>
    }
  }
  for(uint8_t i=0;i<8;i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	757b      	strb	r3, [r7, #21]
 80006ee:	e020      	b.n	8000732 <boolgenSPI+0xea>
  {
    if(B[i]==true)
 80006f0:	7d7b      	ldrb	r3, [r7, #21]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d007      	beq.n	800070c <boolgenSPI+0xc4>
    {
      Data[16+i]=one;
 80006fc:	7d7b      	ldrb	r3, [r7, #21]
 80006fe:	3310      	adds	r3, #16
 8000700:	461a      	mov	r2, r3
 8000702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000704:	4413      	add	r3, r2
 8000706:	22f0      	movs	r2, #240	; 0xf0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e00f      	b.n	800072c <boolgenSPI+0xe4>
    }
    else if(B[i]==false)
 800070c:	7d7b      	ldrb	r3, [r7, #21]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f083 0301 	eor.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <boolgenSPI+0xe4>
    {
      Data[16+i]=zero;
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	3310      	adds	r3, #16
 8000722:	461a      	mov	r2, r3
 8000724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000726:	4413      	add	r3, r2
 8000728:	22c0      	movs	r2, #192	; 0xc0
 800072a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 800072c:	7d7b      	ldrb	r3, [r7, #21]
 800072e:	3301      	adds	r3, #1
 8000730:	757b      	strb	r3, [r7, #21]
 8000732:	7d7b      	ldrb	r3, [r7, #21]
 8000734:	2b07      	cmp	r3, #7
 8000736:	d9db      	bls.n	80006f0 <boolgenSPI+0xa8>
    }
  }
  for(uint8_t i=0;i<40;i++)
 8000738:	2300      	movs	r3, #0
 800073a:	753b      	strb	r3, [r7, #20]
 800073c:	e009      	b.n	8000752 <boolgenSPI+0x10a>
   {
	  Data[24+i]=life;
 800073e:	7d3b      	ldrb	r3, [r7, #20]
 8000740:	3318      	adds	r3, #24
 8000742:	461a      	mov	r2, r3
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	4413      	add	r3, r2
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<40;i++)
 800074c:	7d3b      	ldrb	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	753b      	strb	r3, [r7, #20]
 8000752:	7d3b      	ldrb	r3, [r7, #20]
 8000754:	2b27      	cmp	r3, #39	; 0x27
 8000756:	d9f2      	bls.n	800073e <boolgenSPI+0xf6>
   }
  for(uint8_t i=0;i<8;i++)
 8000758:	2300      	movs	r3, #0
 800075a:	74fb      	strb	r3, [r7, #19]
 800075c:	e020      	b.n	80007a0 <boolgenSPI+0x158>
    {
      if(R2[i]==true)
 800075e:	7cfb      	ldrb	r3, [r7, #19]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d007      	beq.n	800077a <boolgenSPI+0x132>
      {
        Data[64+i]=one;
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	3340      	adds	r3, #64	; 0x40
 800076e:	461a      	mov	r2, r3
 8000770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000772:	4413      	add	r3, r2
 8000774:	22f0      	movs	r2, #240	; 0xf0
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e00f      	b.n	800079a <boolgenSPI+0x152>
      }
      else if(R2[i]==false)
 800077a:	7cfb      	ldrb	r3, [r7, #19]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f083 0301 	eor.w	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d006      	beq.n	800079a <boolgenSPI+0x152>
      {
        Data[64+i]=zero;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	3340      	adds	r3, #64	; 0x40
 8000790:	461a      	mov	r2, r3
 8000792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000794:	4413      	add	r3, r2
 8000796:	22c0      	movs	r2, #192	; 0xc0
 8000798:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 800079a:	7cfb      	ldrb	r3, [r7, #19]
 800079c:	3301      	adds	r3, #1
 800079e:	74fb      	strb	r3, [r7, #19]
 80007a0:	7cfb      	ldrb	r3, [r7, #19]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	d9db      	bls.n	800075e <boolgenSPI+0x116>
      }
    }
  for(uint8_t i=0;i<8;i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	74bb      	strb	r3, [r7, #18]
 80007aa:	e020      	b.n	80007ee <boolgenSPI+0x1a6>
    {
      if(G2[i]==true)
 80007ac:	7cbb      	ldrb	r3, [r7, #18]
 80007ae:	6a3a      	ldr	r2, [r7, #32]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <boolgenSPI+0x180>
      {
        Data[72+i]=one;
 80007b8:	7cbb      	ldrb	r3, [r7, #18]
 80007ba:	3348      	adds	r3, #72	; 0x48
 80007bc:	461a      	mov	r2, r3
 80007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c0:	4413      	add	r3, r2
 80007c2:	22f0      	movs	r2, #240	; 0xf0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e00f      	b.n	80007e8 <boolgenSPI+0x1a0>
      }
      else if(G2[i]==false)
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	6a3a      	ldr	r2, [r7, #32]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f083 0301 	eor.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <boolgenSPI+0x1a0>
      {
        Data[72+i]=zero;
 80007da:	7cbb      	ldrb	r3, [r7, #18]
 80007dc:	3348      	adds	r3, #72	; 0x48
 80007de:	461a      	mov	r2, r3
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	4413      	add	r3, r2
 80007e4:	22c0      	movs	r2, #192	; 0xc0
 80007e6:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 80007e8:	7cbb      	ldrb	r3, [r7, #18]
 80007ea:	3301      	adds	r3, #1
 80007ec:	74bb      	strb	r3, [r7, #18]
 80007ee:	7cbb      	ldrb	r3, [r7, #18]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9db      	bls.n	80007ac <boolgenSPI+0x164>
      }
    }
  for(uint8_t i=0;i<8;i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	747b      	strb	r3, [r7, #17]
 80007f8:	e020      	b.n	800083c <boolgenSPI+0x1f4>
    {
      if(B2[i]==true)
 80007fa:	7c7b      	ldrb	r3, [r7, #17]
 80007fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <boolgenSPI+0x1ce>
      {
        Data[80+i]=one;
 8000806:	7c7b      	ldrb	r3, [r7, #17]
 8000808:	3350      	adds	r3, #80	; 0x50
 800080a:	461a      	mov	r2, r3
 800080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080e:	4413      	add	r3, r2
 8000810:	22f0      	movs	r2, #240	; 0xf0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e00f      	b.n	8000836 <boolgenSPI+0x1ee>
      }
      else if(B2[i]==false)
 8000816:	7c7b      	ldrb	r3, [r7, #17]
 8000818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <boolgenSPI+0x1ee>
      {
        Data[80+i]=zero;
 8000828:	7c7b      	ldrb	r3, [r7, #17]
 800082a:	3350      	adds	r3, #80	; 0x50
 800082c:	461a      	mov	r2, r3
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	4413      	add	r3, r2
 8000832:	22c0      	movs	r2, #192	; 0xc0
 8000834:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<8;i++)
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	3301      	adds	r3, #1
 800083a:	747b      	strb	r3, [r7, #17]
 800083c:	7c7b      	ldrb	r3, [r7, #17]
 800083e:	2b07      	cmp	r3, #7
 8000840:	d9db      	bls.n	80007fa <boolgenSPI+0x1b2>
      }
    }
  //Przerwa w transmisji
  for(uint8_t i=0;i<40;i++)
 8000842:	2300      	movs	r3, #0
 8000844:	743b      	strb	r3, [r7, #16]
 8000846:	e009      	b.n	800085c <boolgenSPI+0x214>
   {
	  Data[88+i]=life;
 8000848:	7c3b      	ldrb	r3, [r7, #16]
 800084a:	3358      	adds	r3, #88	; 0x58
 800084c:	461a      	mov	r2, r3
 800084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000850:	4413      	add	r3, r2
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0;i<40;i++)
 8000856:	7c3b      	ldrb	r3, [r7, #16]
 8000858:	3301      	adds	r3, #1
 800085a:	743b      	strb	r3, [r7, #16]
 800085c:	7c3b      	ldrb	r3, [r7, #16]
 800085e:	2b27      	cmp	r3, #39	; 0x27
 8000860:	d9f2      	bls.n	8000848 <boolgenSPI+0x200>
//Czytanie
//  for(uint8_t i=0;i<128;i++)
//  {
//    printf("%u \n",Data[i]);
//  }
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b5b0      	push	{r4, r5, r7, lr}
 8000872:	b0d4      	sub	sp, #336	; 0x150
 8000874:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fc56 	bl	8001126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f8f3 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f000 f9e3 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000882:	f000 f9af 	bl	8000be4 <MX_DMA_Init>
  MX_SPI3_Init();
 8000886:	f000 f93f 	bl	8000b08 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800088a:	f000 f97b 	bl	8000b84 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	memset(input, 0x00, 6);
 800088e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000892:	2206      	movs	r2, #6
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f004 fe0c 	bl	80054b4 <memset>
//
		//printf("piwo \n");
//Odczyt z UART


		HAL_UART_Receive(&huart2, (uint8_t*) input, 6, HAL_MAX_DELAY);
 800089c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	2206      	movs	r2, #6
 80008a6:	486c      	ldr	r0, [pc, #432]	; (8000a58 <main+0x1e8>)
 80008a8:	f003 fcf2 	bl	8004290 <HAL_UART_Receive>

		printf("LED1: %d %d %d LED2: %d %d %d \n", input[0], input[1], input[2],
 80008ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008c0:	785b      	ldrb	r3, [r3, #1]
 80008c2:	461c      	mov	r4, r3
 80008c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008cc:	789b      	ldrb	r3, [r3, #2]
 80008ce:	461d      	mov	r5, r3
				input[3], input[4], input[5]);
 80008d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008d8:	78db      	ldrb	r3, [r3, #3]
		printf("LED1: %d %d %d LED2: %d %d %d \n", input[0], input[1], input[2],
 80008da:	461a      	mov	r2, r3
				input[3], input[4], input[5]);
 80008dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008e4:	791b      	ldrb	r3, [r3, #4]
		printf("LED1: %d %d %d LED2: %d %d %d \n", input[0], input[1], input[2],
 80008e6:	4619      	mov	r1, r3
				input[3], input[4], input[5]);
 80008e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008f0:	795b      	ldrb	r3, [r3, #5]
		printf("LED1: %d %d %d LED2: %d %d %d \n", input[0], input[1], input[2],
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	9101      	str	r1, [sp, #4]
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	462b      	mov	r3, r5
 80008fa:	4622      	mov	r2, r4
 80008fc:	4601      	mov	r1, r0
 80008fe:	4857      	ldr	r0, [pc, #348]	; (8000a5c <main+0x1ec>)
 8000900:	f004 fde0 	bl	80054c4 <iprintf>

		R1=(uint8_t*)input[0];
 8000904:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000908:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		G1=(uint8_t*)input[1];
 8000912:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000916:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		B1=(uint8_t*)input[2];
 8000920:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000924:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		R2=(uint8_t*)input[3];
 800092e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000932:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000936:	78db      	ldrb	r3, [r3, #3]
 8000938:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
		G2=(uint8_t*)input[4];
 800093c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000940:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000944:	791b      	ldrb	r3, [r3, #4]
 8000946:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
		B2=(uint8_t*)input[5];
 800094a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800094e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000952:	795b      	ldrb	r3, [r3, #5]
 8000954:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
		byte_to_bin(R1, aR1);
 8000958:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800095c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fe49 	bl	80005fa <byte_to_bin>
//		readbin(aR1);
		byte_to_bin(G1, aG1);
 8000968:	f107 0220 	add.w	r2, r7, #32
 800096c:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe41 	bl	80005fa <byte_to_bin>
//		readbin(aG1);
		byte_to_bin(B1, aB1);
 8000978:	f107 0218 	add.w	r2, r7, #24
 800097c:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe39 	bl	80005fa <byte_to_bin>
//		readbin(aB1);
		byte_to_bin(R2, aR2);
 8000988:	f107 0210 	add.w	r2, r7, #16
 800098c:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe31 	bl	80005fa <byte_to_bin>
//		readbin(aR2);
		byte_to_bin(G2, aG2);
 8000998:	f107 0208 	add.w	r2, r7, #8
 800099c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe29 	bl	80005fa <byte_to_bin>
//		readbin(aG2);
		byte_to_bin(B2, aB2);
 80009a8:	463a      	mov	r2, r7
 80009aa:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe22 	bl	80005fa <byte_to_bin>
//		readbin(aB2);
		boolgenSPI(aR1, aG1, aB1, aR2, aG2, aB2, Data);
 80009b6:	f107 0410 	add.w	r4, r7, #16
 80009ba:	f107 0218 	add.w	r2, r7, #24
 80009be:	f107 0120 	add.w	r1, r7, #32
 80009c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80009c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80009ca:	9302      	str	r3, [sp, #8]
 80009cc:	463b      	mov	r3, r7
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	4623      	mov	r3, r4
 80009d8:	f7ff fe36 	bl	8000648 <boolgenSPI>
		HAL_SPI_Transmit(&hspi3, Data, 128, HAL_MAX_DELAY);
 80009dc:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <main+0x1f0>)
 80009e8:	f002 fc77 	bl	80032da <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,(uint8_t*) Rdata, 128,HAL_MAX_DELAY);
 80009ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <main+0x1f0>)
 80009f8:	f002 fddd 	bl	80035b6 <HAL_SPI_Receive>
		printf("LED1: %d %d %d LED2: %d %d %d \n", Rdata[0], Rdata[1],Rdata[2], Rdata[3],Rdata[4], Rdata[5]);
 80009fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	461c      	mov	r4, r3
 8000a14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	461d      	mov	r5, r3
 8000a20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a28:	78db      	ldrb	r3, [r3, #3]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	4619      	mov	r1, r3
 8000a38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	9302      	str	r3, [sp, #8]
 8000a44:	9101      	str	r1, [sp, #4]
 8000a46:	9200      	str	r2, [sp, #0]
 8000a48:	462b      	mov	r3, r5
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	4601      	mov	r1, r0
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <main+0x1ec>)
 8000a50:	f004 fd38 	bl	80054c4 <iprintf>
		HAL_UART_Receive(&huart2, (uint8_t*) input, 6, HAL_MAX_DELAY);
 8000a54:	e722      	b.n	800089c <main+0x2c>
 8000a56:	bf00      	nop
 8000a58:	20000138 	.word	0x20000138
 8000a5c:	080063fc 	.word	0x080063fc
 8000a60:	2000008c 	.word	0x2000008c

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b096      	sub	sp, #88	; 0x58
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2244      	movs	r2, #68	; 0x44
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fd1e 	bl	80054b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a8a:	f001 f871 	bl	8001b70 <HAL_PWREx_ControlVoltageScaling>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a94:	f000 f8fc 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f8a8 	bl	8001c1c <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ad2:	f000 f8dd 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2303      	movs	r3, #3
 8000adc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fc70 	bl	80023d4 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afa:	f000 f8c9 	bl	8000c90 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3758      	adds	r7, #88	; 0x58
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <MX_SPI3_Init+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b26:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b3e:	2210      	movs	r2, #16
 8000b40:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b56:	2207      	movs	r2, #7
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b68:	f002 fb14 	bl	8003194 <HAL_SPI_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f000 f88d 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000008c 	.word	0x2000008c
 8000b80:	40003c00 	.word	0x40003c00

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <MX_USART2_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc8:	f003 fb14 	bl	80041f4 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 f85d 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000138 	.word	0x20000138
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_DMA_Init+0x60>)
 8000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_DMA_Init+0x60>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6493      	str	r3, [r2, #72]	; 0x48
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_DMA_Init+0x60>)
 8000bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_DMA_Init+0x60>)
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <MX_DMA_Init+0x60>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_DMA_Init+0x60>)
 8000c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2010      	movs	r0, #16
 8000c20:	f000 fbd1 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c24:	2010      	movs	r0, #16
 8000c26:	f000 fbea 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2039      	movs	r0, #57	; 0x39
 8000c30:	f000 fbc9 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000c34:	2039      	movs	r0, #57	; 0x39
 8000c36:	f000 fbe2 	bl	80013fe <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_GPIO_Init+0x44>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <MX_GPIO_Init+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_GPIO_Init+0x44>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_GPIO_Init+0x44>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <MX_GPIO_Init+0x44>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_GPIO_Init+0x44>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <HAL_SPI_MspInit+0xe0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d159      	bne.n	8000dba <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_SPI_MspInit+0xe4>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_SPI_MspInit+0xe4>)
 8000d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_SPI_MspInit+0xe4>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_SPI_MspInit+0xe4>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <HAL_SPI_MspInit+0xe4>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <HAL_SPI_MspInit+0xe4>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	481e      	ldr	r0, [pc, #120]	; (8000dcc <HAL_SPI_MspInit+0xe8>)
 8000d54:	f000 fd54 	bl	8001800 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_SPI_MspInit+0xf0>)
 8000d5c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000d90:	f000 fb50 	bl	8001434 <HAL_DMA_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000d9a:	f7ff ff79 	bl	8000c90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000da2:	655a      	str	r2, [r3, #84]	; 0x54
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_SPI_MspInit+0xec>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2033      	movs	r0, #51	; 0x33
 8000db0:	f000 fb09 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000db4:	2033      	movs	r0, #51	; 0x33
 8000db6:	f000 fb22 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40003c00 	.word	0x40003c00
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	200000f0 	.word	0x200000f0
 8000dd4:	4002041c 	.word	0x4002041c

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ac      	sub	sp, #176	; 0xb0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2288      	movs	r2, #136	; 0x88
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fb5b 	bl	80054b4 <memset>
  if(huart->Instance==USART2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <HAL_UART_MspInit+0x114>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d16c      	bne.n	8000ee2 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fd01 	bl	800281c <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e20:	f7ff ff36 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <HAL_UART_MspInit+0x118>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <HAL_UART_MspInit+0x118>)
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_UART_MspInit+0x118>)
 8000e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <HAL_UART_MspInit+0x118>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	4a2b      	ldr	r2, [pc, #172]	; (8000ef0 <HAL_UART_MspInit+0x118>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_UART_MspInit+0x118>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e54:	230c      	movs	r3, #12
 8000e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f000 fcc0 	bl	8001800 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e82:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_UART_MspInit+0x120>)
 8000e84:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000eac:	2220      	movs	r2, #32
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000eb8:	f000 fabc 	bl	8001434 <HAL_DMA_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000ec2:	f7ff fee5 	bl	8000c90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000eca:	671a      	str	r2, [r3, #112]	; 0x70
 8000ecc:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2026      	movs	r0, #38	; 0x26
 8000ed8:	f000 fa75 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000edc:	2026      	movs	r0, #38	; 0x26
 8000ede:	f000 fa8e 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	37b0      	adds	r7, #176	; 0xb0
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	200001bc 	.word	0x200001bc
 8000ef8:	4002006c 	.word	0x4002006c

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f942 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DMA1_Channel6_IRQHandler+0x10>)
 8000f56:	f000 fba4 	bl	80016a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001bc 	.word	0x200001bc

08000f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART2_IRQHandler+0x10>)
 8000f6a:	f003 fa63 	bl	8004434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000138 	.word	0x20000138

08000f78 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <SPI3_IRQHandler+0x10>)
 8000f7e:	f002 fe5d 	bl	8003c3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000008c 	.word	0x2000008c

08000f8c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA2_Channel2_IRQHandler+0x10>)
 8000f92:	f000 fb86 	bl	80016a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000f0 	.word	0x200000f0

08000fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb2:	f3af 8000 	nop.w
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
  }

  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_isatty>:

int _isatty(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f004 f9f4 	bl	8005460 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20018000 	.word	0x20018000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000204 	.word	0x20000204
 80010ac:	20000220 	.word	0x20000220

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff ffea 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f004 f9b3 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff fbb3 	bl	8000870 <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001118:	0800650c 	.word	0x0800650c
  ldr r2, =_sbss
 800111c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001120:	2000021c 	.word	0x2000021c

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>

08001126 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f93d 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001136:	200f      	movs	r0, #15
 8001138:	f000 f80e 	bl	8001158 <HAL_InitTick>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e001      	b.n	800114c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001148:	f7ff fda8 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_InitTick+0x6c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d023      	beq.n	80011b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_InitTick+0x70>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f949 	bl	800141a <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10f      	bne.n	80011ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d809      	bhi.n	80011a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 f913 	bl	80013c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_InitTick+0x74>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e007      	b.n	80011b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e004      	b.n	80011b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e001      	b.n	80011b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000208 	.word	0x20000208

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000208 	.word	0x20000208

08001210 <__NVIC_SetPriorityGrouping>:
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff29 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff3e 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff31 	bl	8001274 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e098      	b.n	8001578 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <HAL_DMA_Init+0x150>)
 800144e:	429a      	cmp	r2, r3
 8001450:	d80f      	bhi.n	8001472 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <HAL_DMA_Init+0x154>)
 800145a:	4413      	add	r3, r2
 800145c:	4a4b      	ldr	r2, [pc, #300]	; (800158c <HAL_DMA_Init+0x158>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	009a      	lsls	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a48      	ldr	r2, [pc, #288]	; (8001590 <HAL_DMA_Init+0x15c>)
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
 8001470:	e00e      	b.n	8001490 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b46      	ldr	r3, [pc, #280]	; (8001594 <HAL_DMA_Init+0x160>)
 800147a:	4413      	add	r3, r2
 800147c:	4a43      	ldr	r2, [pc, #268]	; (800158c <HAL_DMA_Init+0x158>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	009a      	lsls	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a42      	ldr	r2, [pc, #264]	; (8001598 <HAL_DMA_Init+0x164>)
 800148e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ea:	d039      	beq.n	8001560 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_DMA_Init+0x15c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d11a      	bne.n	800152c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_DMA_Init+0x168>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 031c 	and.w	r3, r3, #28
 8001502:	210f      	movs	r1, #15
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4924      	ldr	r1, [pc, #144]	; (800159c <HAL_DMA_Init+0x168>)
 800150c:	4013      	ands	r3, r2
 800150e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_DMA_Init+0x168>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f003 031c 	and.w	r3, r3, #28
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	491d      	ldr	r1, [pc, #116]	; (800159c <HAL_DMA_Init+0x168>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
 800152a:	e019      	b.n	8001560 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_DMA_Init+0x16c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f003 031c 	and.w	r3, r3, #28
 8001538:	210f      	movs	r1, #15
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	4917      	ldr	r1, [pc, #92]	; (80015a0 <HAL_DMA_Init+0x16c>)
 8001542:	4013      	ands	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_DMA_Init+0x16c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f003 031c 	and.w	r3, r3, #28
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	4911      	ldr	r1, [pc, #68]	; (80015a0 <HAL_DMA_Init+0x16c>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40020407 	.word	0x40020407
 8001588:	bffdfff8 	.word	0xbffdfff8
 800158c:	cccccccd 	.word	0xcccccccd
 8001590:	40020000 	.word	0x40020000
 8001594:	bffdfbf8 	.word	0xbffdfbf8
 8001598:	40020400 	.word	0x40020400
 800159c:	400200a8 	.word	0x400200a8
 80015a0:	400204a8 	.word	0x400204a8

080015a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d008      	beq.n	80015ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e022      	b.n	8001614 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 020e 	bic.w	r2, r2, #14
 80015dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 021c 	and.w	r2, r3, #28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d005      	beq.n	8001644 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e029      	b.n	8001698 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021c 	and.w	r2, r3, #28
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
    }
  }
  return status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f003 031c 	and.w	r3, r3, #28
 80016c2:	2204      	movs	r2, #4
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d026      	beq.n	800171c <HAL_DMA_IRQHandler+0x7a>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d021      	beq.n	800171c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d107      	bne.n	80016f6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0204 	bic.w	r2, r2, #4
 80016f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f003 021c 	and.w	r2, r3, #28
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2104      	movs	r1, #4
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	2b00      	cmp	r3, #0
 8001710:	d071      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800171a:	e06c      	b.n	80017f6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f003 031c 	and.w	r3, r3, #28
 8001724:	2202      	movs	r2, #2
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02e      	beq.n	800178e <HAL_DMA_IRQHandler+0xec>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d029      	beq.n	800178e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 020a 	bic.w	r2, r2, #10
 8001756:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f003 021c 	and.w	r2, r3, #28
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2102      	movs	r1, #2
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d038      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800178c:	e033      	b.n	80017f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f003 031c 	and.w	r3, r3, #28
 8001796:	2208      	movs	r2, #8
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x156>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d025      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 020e 	bic.w	r2, r2, #14
 80017ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	f003 021c 	and.w	r2, r3, #28
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
}
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e17f      	b.n	8001b10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8171 	beq.w	8001b0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x40>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d118      	bne.n	80018e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018b4:	2201      	movs	r2, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	f003 0201 	and.w	r2, r3, #1
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d017      	beq.n	800191c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d123      	bne.n	8001970 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	08da      	lsrs	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3208      	adds	r2, #8
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	6939      	ldr	r1, [r7, #16]
 800196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80ac 	beq.w	8001b0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b5c      	ldr	r3, [pc, #368]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ca:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <HAL_GPIO_Init+0x334>)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f4:	d025      	beq.n	8001a42 <HAL_GPIO_Init+0x242>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x338>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x23e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_GPIO_Init+0x33c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x23a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x340>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x236>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x344>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x232>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_GPIO_Init+0x348>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x22e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x34c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x22a>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a42:	2300      	movs	r3, #0
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a54:	4937      	ldr	r1, [pc, #220]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a86:	4a32      	ldr	r2, [pc, #200]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ada:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae78 	bne.w	8001810 <HAL_GPIO_Init+0x10>
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010000 	.word	0x40010000
 8001b38:	48000400 	.word	0x48000400
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48000c00 	.word	0x48000c00
 8001b44:	48001000 	.word	0x48001000
 8001b48:	48001400 	.word	0x48001400
 8001b4c:	48001800 	.word	0x48001800
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40007000 	.word	0x40007000

08001b70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7e:	d130      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8c:	d038      	beq.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b96:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2232      	movs	r2, #50	; 0x32
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb4:	e002      	b.n	8001bbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc8:	d102      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f2      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bdc:	d110      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e00f      	b.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bee:	d007      	beq.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bf8:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40007000 	.word	0x40007000
 8001c14:	20000000 	.word	0x20000000
 8001c18:	431bde83 	.word	0x431bde83

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e3ca      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c38:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80e4 	beq.w	8001e18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4a>
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	f040 808b 	bne.w	8001d74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	f040 8087 	bne.w	8001d74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x62>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e3a2      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1a      	ldr	r2, [r3, #32]
 8001c82:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d004      	beq.n	8001c98 <HAL_RCC_OscConfig+0x7c>
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c96:	e005      	b.n	8001ca4 <HAL_RCC_OscConfig+0x88>
 8001c98:	4b7c      	ldr	r3, [pc, #496]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d223      	bcs.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 fd55 	bl	800275c <RCC_SetFlashLatencyFromMSIRange>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e383      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cbc:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	496d      	ldr	r1, [pc, #436]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cda:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	4968      	ldr	r1, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
 8001cee:	e025      	b.n	8001d3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf0:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a65      	ldr	r2, [pc, #404]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4960      	ldr	r1, [pc, #384]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	495b      	ldr	r1, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fd15 	bl	800275c <RCC_SetFlashLatencyFromMSIRange>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e343      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d3c:	f000 fc4a 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	4950      	ldr	r1, [pc, #320]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_RCC_OscConfig+0x278>)
 8001d5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d5c:	4b4e      	ldr	r3, [pc, #312]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f9f9 	bl	8001158 <HAL_InitTick>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d052      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	e327      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d032      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a42      	ldr	r2, [pc, #264]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fa36 	bl	80011f8 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d90:	f7ff fa32 	bl	80011f8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e310      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4931      	ldr	r1, [pc, #196]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	492c      	ldr	r1, [pc, #176]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
 8001de0:	e01a      	b.n	8001e18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a29      	ldr	r2, [pc, #164]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dee:	f7ff fa03 	bl	80011f8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df6:	f7ff f9ff 	bl	80011f8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e2dd      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x1da>
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d074      	beq.n	8001f0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x21a>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d10e      	bne.n	8001e4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d10b      	bne.n	8001e4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d064      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d160      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e2ba      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x24a>
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	e026      	b.n	8001eb4 <HAL_RCC_OscConfig+0x298>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6e:	d115      	bne.n	8001e9c <HAL_RCC_OscConfig+0x280>
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a02      	ldr	r2, [pc, #8]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e014      	b.n	8001eb4 <HAL_RCC_OscConfig+0x298>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	0800641c 	.word	0x0800641c
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004
 8001e9c:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a9f      	ldr	r2, [pc, #636]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b9d      	ldr	r3, [pc, #628]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a9c      	ldr	r2, [pc, #624]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f99c 	bl	80011f8 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f998 	bl	80011f8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e276      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed6:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2a8>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f988 	bl	80011f8 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff f984 	bl	80011f8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e262      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001efe:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x2d0>
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d060      	beq.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_OscConfig+0x310>
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d119      	bne.n	8001f5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d116      	bne.n	8001f5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2c:	4b7c      	ldr	r3, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_OscConfig+0x328>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e23f      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	4973      	ldr	r1, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f58:	e040      	b.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d023      	beq.n	8001faa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f943 	bl	80011f8 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff f93f 	bl	80011f8 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e21d      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	495f      	ldr	r1, [pc, #380]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
 8001fa8:	e018      	b.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5c      	ldr	r2, [pc, #368]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f91f 	bl	80011f8 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f91b 	bl	80011f8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1f9      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03c      	beq.n	8002062 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01c      	beq.n	800202a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff f8fa 	bl	80011f8 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff f8f6 	bl	80011f8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1d4      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 800201c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ef      	beq.n	8002008 <HAL_RCC_OscConfig+0x3ec>
 8002028:	e01b      	b.n	8002062 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 800202c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002030:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff f8dd 	bl	80011f8 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002042:	f7ff f8d9 	bl	80011f8 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1b7      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8002056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ef      	bne.n	8002042 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80a6 	beq.w	80021bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10d      	bne.n	800209c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002098:	2301      	movs	r3, #1
 800209a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_RCC_OscConfig+0x508>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d118      	bne.n	80020da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_RCC_OscConfig+0x508>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x508>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b4:	f7ff f8a0 	bl	80011f8 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020bc:	f7ff f89c 	bl	80011f8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e17a      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_RCC_OscConfig+0x508>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4d8>
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f2:	e029      	b.n	8002148 <HAL_RCC_OscConfig+0x52c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d115      	bne.n	8002128 <HAL_RCC_OscConfig+0x50c>
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	4a03      	ldr	r2, [pc, #12]	; (8002120 <HAL_RCC_OscConfig+0x504>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x52c>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
 8002128:	4b9c      	ldr	r3, [pc, #624]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	4a9b      	ldr	r2, [pc, #620]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002138:	4b98      	ldr	r3, [pc, #608]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	4a97      	ldr	r2, [pc, #604]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d016      	beq.n	800217e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7ff f852 	bl	80011f8 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7ff f84e 	bl	80011f8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e12a      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ed      	beq.n	8002158 <HAL_RCC_OscConfig+0x53c>
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7ff f83b 	bl	80011f8 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff f837 	bl	80011f8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e113      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800219c:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ed      	bne.n	8002186 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b7a      	ldr	r3, [pc, #488]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a79      	ldr	r2, [pc, #484]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80fe 	beq.w	80023c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	f040 80d0 	bne.w	8002370 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021d0:	4b72      	ldr	r3, [pc, #456]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d130      	bne.n	8002246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	3b01      	subs	r3, #1
 80021f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d127      	bne.n	8002246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d11f      	bne.n	8002246 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002210:	2a07      	cmp	r2, #7
 8002212:	bf14      	ite	ne
 8002214:	2201      	movne	r2, #1
 8002216:	2200      	moveq	r2, #0
 8002218:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221a:	4293      	cmp	r3, r2
 800221c:	d113      	bne.n	8002246 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	3b01      	subs	r3, #1
 800222c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d109      	bne.n	8002246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	3b01      	subs	r3, #1
 8002240:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d06e      	beq.n	8002324 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d069      	beq.n	8002320 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0ad      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800226e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002274:	f7fe ffc0 	bl	80011f8 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7fe ffbc 	bl	80011f8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e09a      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228e:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229a:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <HAL_RCC_OscConfig+0x784>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022aa:	3a01      	subs	r2, #1
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022b4:	0212      	lsls	r2, r2, #8
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022bc:	0852      	lsrs	r2, r2, #1
 80022be:	3a01      	subs	r2, #1
 80022c0:	0552      	lsls	r2, r2, #21
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022c8:	0852      	lsrs	r2, r2, #1
 80022ca:	3a01      	subs	r2, #1
 80022cc:	0652      	lsls	r2, r2, #25
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d4:	0912      	lsrs	r2, r2, #4
 80022d6:	0452      	lsls	r2, r2, #17
 80022d8:	430a      	orrs	r2, r1
 80022da:	4930      	ldr	r1, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022e0:	4b2e      	ldr	r3, [pc, #184]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2d      	ldr	r2, [pc, #180]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a2a      	ldr	r2, [pc, #168]	; (800239c <HAL_RCC_OscConfig+0x780>)
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f8:	f7fe ff7e 	bl	80011f8 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7fe ff7a 	bl	80011f8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e058      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800231e:	e050      	b.n	80023c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e04f      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d148      	bne.n	80023c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002330:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002348:	f7fe ff56 	bl	80011f8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe ff52 	bl	80011f8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e030      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x734>
 800236e:	e028      	b.n	80023c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d023      	beq.n	80023be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_OscConfig+0x780>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_RCC_OscConfig+0x780>)
 800237c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe ff39 	bl	80011f8 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	e00c      	b.n	80023a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe ff35 	bl	80011f8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d905      	bls.n	80023a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e013      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
 800239c:	40021000 	.word	0x40021000
 80023a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x7b0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ec      	bne.n	800238a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_RCC_OscConfig+0x7b0>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4905      	ldr	r1, [pc, #20]	; (80023cc <HAL_RCC_OscConfig+0x7b0>)
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_OscConfig+0x7b4>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
 80023bc:	e001      	b.n	80023c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	feeefffc 	.word	0xfeeefffc

080023d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0e7      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d910      	bls.n	8002418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4970      	ldr	r1, [pc, #448]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0cf      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d010      	beq.n	8002446 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002430:	429a      	cmp	r2, r3
 8002432:	d908      	bls.n	8002446 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4960      	ldr	r1, [pc, #384]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d04c      	beq.n	80024ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d121      	bne.n	80024aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0a6      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d115      	bne.n	80024aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e09a      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248a:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e08e      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e086      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024aa:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f023 0203 	bic.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4943      	ldr	r1, [pc, #268]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024bc:	f7fe fe9c 	bl	80011f8 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	e00a      	b.n	80024da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	f7fe fe98 	bl	80011f8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e06e      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 020c 	and.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1eb      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002504:	429a      	cmp	r2, r3
 8002506:	d208      	bcs.n	800251a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	492b      	ldr	r1, [pc, #172]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d210      	bcs.n	800254a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 0207 	bic.w	r2, r3, #7
 8002530:	4923      	ldr	r1, [pc, #140]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_RCC_ClockConfig+0x1ec>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e036      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4918      	ldr	r1, [pc, #96]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4910      	ldr	r1, [pc, #64]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002588:	f000 f824 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	490b      	ldr	r1, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x1f4>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1f8>)
 80025a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1fc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fdd3 	bl	8001158 <HAL_InitTick>
 80025b2:	4603      	mov	r3, r0
 80025b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80025b6:	7afb      	ldrb	r3, [r7, #11]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40021000 	.word	0x40021000
 80025c8:	0800641c 	.word	0x0800641c
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e2:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x34>
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d121      	bne.n	8002646 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d11e      	bne.n	8002646 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002608:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002614:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e005      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002630:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002638:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10d      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002644:	e00a      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d102      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	e004      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d101      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800265a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d134      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d003      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0xa6>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d003      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0xac>
 8002678:	e005      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800267c:	617b      	str	r3, [r7, #20]
      break;
 800267e:	e005      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002682:	617b      	str	r3, [r7, #20]
      break;
 8002684:	e002      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	617b      	str	r3, [r7, #20]
      break;
 800268a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	3301      	adds	r3, #1
 8002698:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	fb03 f202 	mul.w	r2, r3, r2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_GetSysClockFreq+0x108>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	0e5b      	lsrs	r3, r3, #25
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	3301      	adds	r3, #1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026cc:	69bb      	ldr	r3, [r7, #24]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08006434 	.word	0x08006434
 80026e4:	00f42400 	.word	0x00f42400
 80026e8:	007a1200 	.word	0x007a1200

080026ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002708:	f7ff fff0 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4904      	ldr	r1, [pc, #16]	; (800272c <HAL_RCC_GetPCLK1Freq+0x28>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	0800642c 	.word	0x0800642c

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002734:	f7ff ffda 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0adb      	lsrs	r3, r3, #11
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	0800642c 	.word	0x0800642c

0800275c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002774:	f7ff f9ee 	bl	8001b54 <HAL_PWREx_GetVoltageRange>
 8002778:	6178      	str	r0, [r7, #20]
 800277a:	e014      	b.n	80027a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002780:	4a24      	ldr	r2, [pc, #144]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	6593      	str	r3, [r2, #88]	; 0x58
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002794:	f7ff f9de 	bl	8001b54 <HAL_PWREx_GetVoltageRange>
 8002798:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ac:	d10b      	bne.n	80027c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	d919      	bls.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2ba0      	cmp	r3, #160	; 0xa0
 80027b8:	d902      	bls.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027ba:	2302      	movs	r3, #2
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e013      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027c0:	2301      	movs	r3, #1
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	e010      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d902      	bls.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027cc:	2303      	movs	r3, #3
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	e00a      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b80      	cmp	r3, #128	; 0x80
 80027d6:	d102      	bne.n	80027de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d8:	2302      	movs	r3, #2
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	e004      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b70      	cmp	r3, #112	; 0x70
 80027e2:	d101      	bne.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e4:	2301      	movs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 0207 	bic.w	r2, r3, #7
 80027f0:	4909      	ldr	r1, [pc, #36]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	429a      	cmp	r2, r3
 8002804:	d001      	beq.n	800280a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	40022000 	.word	0x40022000

0800281c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002824:	2300      	movs	r3, #0
 8002826:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002828:	2300      	movs	r3, #0
 800282a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002834:	2b00      	cmp	r3, #0
 8002836:	d041      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002840:	d02a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002842:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002846:	d824      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800284c:	d008      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800284e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002852:	d81e      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285c:	d010      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800285e:	e018      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002860:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a85      	ldr	r2, [pc, #532]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800286c:	e015      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fabb 	bl	8002df0 <RCCEx_PLLSAI1_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800287e:	e00c      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3320      	adds	r3, #32
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fba6 	bl	8002fd8 <RCCEx_PLLSAI2_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002890:	e003      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	74fb      	strb	r3, [r7, #19]
      break;
 8002896:	e000      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a0:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ae:	4973      	ldr	r1, [pc, #460]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028b6:	e001      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d041      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028d0:	d02a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028d6:	d824      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e2:	d81e      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ec:	d010      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028ee:	e018      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028f0:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028fc:	e015      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa73 	bl	8002df0 <RCCEx_PLLSAI1_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800290e:	e00c      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3320      	adds	r3, #32
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fb5e 	bl	8002fd8 <RCCEx_PLLSAI2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002920:	e003      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	74fb      	strb	r3, [r7, #19]
      break;
 8002926:	e000      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002930:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800293e:	494f      	ldr	r1, [pc, #316]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002946:	e001      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80a0 	beq.w	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800296e:	2300      	movs	r3, #0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6593      	str	r3, [r2, #88]	; 0x58
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298c:	2301      	movs	r3, #1
 800298e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800299c:	f7fe fc2c 	bl	80011f8 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029a2:	e009      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fc28 	bl	80011f8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d902      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	74fb      	strb	r3, [r7, #19]
        break;
 80029b6:	e005      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029b8:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ef      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d15c      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01f      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d019      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fbe7 	bl	80011f8 <HAL_GetTick>
 8002a2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2c:	e00b      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fbe3 	bl	80011f8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d902      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	74fb      	strb	r3, [r7, #19]
            break;
 8002a44:	e006      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ec      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a72:	e009      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
 8002a78:	e006      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a88:	7c7b      	ldrb	r3, [r7, #17]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a9d      	ldr	r2, [pc, #628]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa6:	4b98      	ldr	r3, [pc, #608]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f023 0203 	bic.w	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	4994      	ldr	r1, [pc, #592]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac8:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 020c 	bic.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	498c      	ldr	r1, [pc, #560]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aea:	4b87      	ldr	r3, [pc, #540]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4983      	ldr	r1, [pc, #524]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b0c:	4b7e      	ldr	r3, [pc, #504]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	497b      	ldr	r1, [pc, #492]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	4972      	ldr	r1, [pc, #456]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b50:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	496a      	ldr	r1, [pc, #424]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b72:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	4961      	ldr	r1, [pc, #388]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b94:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	4959      	ldr	r1, [pc, #356]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	4950      	ldr	r1, [pc, #320]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	4948      	ldr	r1, [pc, #288]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	493f      	ldr	r1, [pc, #252]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d028      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2a:	4937      	ldr	r1, [pc, #220]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c46:	60d3      	str	r3, [r2, #12]
 8002c48:	e011      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f8c8 	bl	8002df0 <RCCEx_PLLSAI1_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d028      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	491f      	ldr	r1, [pc, #124]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca4:	60d3      	str	r3, [r2, #12]
 8002ca6:	e011      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f899 	bl	8002df0 <RCCEx_PLLSAI1_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02b      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a02      	ldr	r2, [pc, #8]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	60d3      	str	r3, [r2, #12]
 8002d04:	e014      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f867 	bl	8002df0 <RCCEx_PLLSAI1_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02f      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4a:	4928      	ldr	r1, [pc, #160]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f844 	bl	8002df0 <RCCEx_PLLSAI1_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d014      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	74bb      	strb	r3, [r7, #18]
 8002d76:	e011      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3320      	adds	r3, #32
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f925 	bl	8002fd8 <RCCEx_PLLSAI2_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002de2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000

08002df0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dfe:	4b75      	ldr	r3, [pc, #468]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d018      	beq.n	8002e3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e0a:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0203 	and.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d10d      	bne.n	8002e36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e22:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
       ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d047      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e044      	b.n	8002ec6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d018      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0x86>
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d825      	bhi.n	8002e94 <RCCEx_PLLSAI1_Config+0xa4>
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d002      	beq.n	8002e52 <RCCEx_PLLSAI1_Config+0x62>
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d009      	beq.n	8002e64 <RCCEx_PLLSAI1_Config+0x74>
 8002e50:	e020      	b.n	8002e94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e52:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11d      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e62:	e01a      	b.n	8002e9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e64:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d116      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e74:	e013      	b.n	8002e9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e82:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e92:	e006      	b.n	8002ea2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      break;
 8002e98:	e004      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e002      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ea2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	4944      	ldr	r1, [pc, #272]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d17d      	bne.n	8002fc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ecc:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed8:	f7fe f98e 	bl	80011f8 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ede:	e009      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee0:	f7fe f98a 	bl	80011f8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d902      	bls.n	8002ef4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef2:	e005      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ef4:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ef      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d160      	bne.n	8002fc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d111      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	0912      	lsrs	r2, r2, #4
 8002f24:	0452      	lsls	r2, r2, #17
 8002f26:	430a      	orrs	r2, r1
 8002f28:	492a      	ldr	r1, [pc, #168]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	610b      	str	r3, [r1, #16]
 8002f2e:	e027      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d112      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6892      	ldr	r2, [r2, #8]
 8002f46:	0211      	lsls	r1, r2, #8
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6912      	ldr	r2, [r2, #16]
 8002f4c:	0852      	lsrs	r2, r2, #1
 8002f4e:	3a01      	subs	r2, #1
 8002f50:	0552      	lsls	r2, r2, #21
 8002f52:	430a      	orrs	r2, r1
 8002f54:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]
 8002f5a:	e011      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	0211      	lsls	r1, r2, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6952      	ldr	r2, [r2, #20]
 8002f72:	0852      	lsrs	r2, r2, #1
 8002f74:	3a01      	subs	r2, #1
 8002f76:	0652      	lsls	r2, r2, #25
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f934 	bl	80011f8 <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f92:	e009      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f94:	f7fe f930 	bl	80011f8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa6:	e005      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d018      	beq.n	8003024 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0203 	and.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d10d      	bne.n	800301e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
       ||
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800300a:	4b61      	ldr	r3, [pc, #388]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
       ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d047      	beq.n	80030ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e044      	b.n	80030ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d018      	beq.n	800305e <RCCEx_PLLSAI2_Config+0x86>
 800302c:	2b03      	cmp	r3, #3
 800302e:	d825      	bhi.n	800307c <RCCEx_PLLSAI2_Config+0xa4>
 8003030:	2b01      	cmp	r3, #1
 8003032:	d002      	beq.n	800303a <RCCEx_PLLSAI2_Config+0x62>
 8003034:	2b02      	cmp	r3, #2
 8003036:	d009      	beq.n	800304c <RCCEx_PLLSAI2_Config+0x74>
 8003038:	e020      	b.n	800307c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800303a:	4b55      	ldr	r3, [pc, #340]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11d      	bne.n	8003082 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304a:	e01a      	b.n	8003082 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800304c:	4b50      	ldr	r3, [pc, #320]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e013      	b.n	8003086 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800305e:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800307a:	e006      	b.n	800308a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      break;
 8003080:	e004      	b.n	800308c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003082:	bf00      	nop
 8003084:	e002      	b.n	800308c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800308a:	bf00      	nop
    }

    if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	430b      	orrs	r3, r1
 80030a8:	4939      	ldr	r1, [pc, #228]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d167      	bne.n	8003184 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a35      	ldr	r2, [pc, #212]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fe f89a 	bl	80011f8 <HAL_GetTick>
 80030c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030c6:	e009      	b.n	80030dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030c8:	f7fe f896 	bl	80011f8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d902      	bls.n	80030dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	73fb      	strb	r3, [r7, #15]
        break;
 80030da:	e005      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030dc:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ef      	bne.n	80030c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d14a      	bne.n	8003184 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030f4:	4b26      	ldr	r3, [pc, #152]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	0211      	lsls	r1, r2, #8
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	0912      	lsrs	r2, r2, #4
 800310c:	0452      	lsls	r2, r2, #17
 800310e:	430a      	orrs	r2, r1
 8003110:	491f      	ldr	r1, [pc, #124]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	614b      	str	r3, [r1, #20]
 8003116:	e011      	b.n	800313c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003120:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6892      	ldr	r2, [r2, #8]
 8003128:	0211      	lsls	r1, r2, #8
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6912      	ldr	r2, [r2, #16]
 800312e:	0852      	lsrs	r2, r2, #1
 8003130:	3a01      	subs	r2, #1
 8003132:	0652      	lsls	r2, r2, #25
 8003134:	430a      	orrs	r2, r1
 8003136:	4916      	ldr	r1, [pc, #88]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a13      	ldr	r2, [pc, #76]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe f856 	bl	80011f8 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800314e:	e009      	b.n	8003164 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003150:	f7fe f852 	bl	80011f8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d902      	bls.n	8003164 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	73fb      	strb	r3, [r7, #15]
          break;
 8003162:	e005      	b.n	8003170 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ef      	beq.n	8003150 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4904      	ldr	r1, [pc, #16]	; (8003190 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003180:	4313      	orrs	r3, r2
 8003182:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000

08003194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e095      	b.n	80032d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b6:	d009      	beq.n	80031cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
 80031be:	e005      	b.n	80031cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fd7c 	bl	8000ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003202:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800320c:	d902      	bls.n	8003214 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e002      	b.n	800321a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003218:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003222:	d007      	beq.n	8003234 <HAL_SPI_Init+0xa0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800322c:	d002      	beq.n	8003234 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	ea42 0103 	orr.w	r1, r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	f003 0204 	and.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032b0:	ea42 0103 	orr.w	r1, r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b088      	sub	sp, #32
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_SPI_Transmit+0x22>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e158      	b.n	80035ae <HAL_SPI_Transmit+0x2d4>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003304:	f7fd ff78 	bl	80011f8 <HAL_GetTick>
 8003308:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800331e:	e13d      	b.n	800359c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_SPI_Transmit+0x52>
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003330:	e134      	b.n	800359c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2203      	movs	r2, #3
 8003336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	d10f      	bne.n	800339e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800339c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d007      	beq.n	80033bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033c4:	d94b      	bls.n	800345e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_Transmit+0xfa>
 80033ce:	8afb      	ldrh	r3, [r7, #22]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d13e      	bne.n	8003452 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033f8:	e02b      	b.n	8003452 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d112      	bne.n	800342e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800342c:	e011      	b.n	8003452 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800342e:	f7fd fee3 	bl	80011f8 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d803      	bhi.n	8003446 <HAL_SPI_Transmit+0x16c>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d102      	bne.n	800344c <HAL_SPI_Transmit+0x172>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003450:	e0a4      	b.n	800359c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ce      	bne.n	80033fa <HAL_SPI_Transmit+0x120>
 800345c:	e07c      	b.n	8003558 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_Transmit+0x192>
 8003466:	8afb      	ldrh	r3, [r7, #22]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d170      	bne.n	800354e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d912      	bls.n	800349c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	881a      	ldrh	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	1c9a      	adds	r2, r3, #2
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b02      	subs	r3, #2
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800349a:	e058      	b.n	800354e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	7812      	ldrb	r2, [r2, #0]
 80034a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034c2:	e044      	b.n	800354e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d12b      	bne.n	800352a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d912      	bls.n	8003502 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b02      	subs	r3, #2
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003500:	e025      	b.n	800354e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003528:	e011      	b.n	800354e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800352a:	f7fd fe65 	bl	80011f8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d803      	bhi.n	8003542 <HAL_SPI_Transmit+0x268>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d102      	bne.n	8003548 <HAL_SPI_Transmit+0x26e>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800354c:	e026      	b.n	800359c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1b5      	bne.n	80034c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	6839      	ldr	r1, [r7, #0]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fe03 	bl	8004168 <SPI_EndRxTxTransaction>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e000      	b.n	800359c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800359a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b088      	sub	sp, #32
 80035ba:	af02      	add	r7, sp, #8
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d2:	d112      	bne.n	80035fa <HAL_SPI_Receive+0x44>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10e      	bne.n	80035fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2204      	movs	r2, #4
 80035e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f910 	bl	8003816 <HAL_SPI_TransmitReceive>
 80035f6:	4603      	mov	r3, r0
 80035f8:	e109      	b.n	800380e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_SPI_Receive+0x52>
 8003604:	2302      	movs	r3, #2
 8003606:	e102      	b.n	800380e <HAL_SPI_Receive+0x258>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003610:	f7fd fdf2 	bl	80011f8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003626:	e0e9      	b.n	80037fc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Receive+0x7e>
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003638:	e0e0      	b.n	80037fc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2204      	movs	r2, #4
 800363e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003684:	d908      	bls.n	8003698 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e007      	b.n	80036a8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d10f      	bne.n	80036d2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d007      	beq.n	80036f0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036f8:	d867      	bhi.n	80037ca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036fa:	e030      	b.n	800375e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d117      	bne.n	800373a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f103 020c 	add.w	r2, r3, #12
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003738:	e011      	b.n	800375e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800373a:	f7fd fd5d 	bl	80011f8 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <HAL_SPI_Receive+0x19c>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Receive+0x1a2>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800375c:	e04e      	b.n	80037fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1c8      	bne.n	80036fc <HAL_SPI_Receive+0x146>
 800376a:	e034      	b.n	80037d6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d115      	bne.n	80037a6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	b292      	uxth	r2, r2
 8003786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80037a4:	e011      	b.n	80037ca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a6:	f7fd fd27 	bl	80011f8 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d803      	bhi.n	80037be <HAL_SPI_Receive+0x208>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d102      	bne.n	80037c4 <HAL_SPI_Receive+0x20e>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037c8:	e018      	b.n	80037fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ca      	bne.n	800376c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	6839      	ldr	r1, [r7, #0]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fc6c 	bl	80040b8 <SPI_EndRxTransaction>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
 80037f8:	e000      	b.n	80037fc <HAL_SPI_Receive+0x246>
  }

error :
 80037fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800380c:	7dfb      	ldrb	r3, [r7, #23]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b08a      	sub	sp, #40	; 0x28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003824:	2301      	movs	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_SPI_TransmitReceive+0x26>
 8003838:	2302      	movs	r3, #2
 800383a:	e1fb      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x41e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003844:	f7fd fcd8 	bl	80011f8 <HAL_GetTick>
 8003848:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003850:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003858:	887b      	ldrh	r3, [r7, #2]
 800385a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003860:	7efb      	ldrb	r3, [r7, #27]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d00e      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x6e>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386c:	d106      	bne.n	800387c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_SPI_TransmitReceive+0x66>
 8003876:	7efb      	ldrb	r3, [r7, #27]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d003      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003882:	e1cd      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x80>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x80>
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800389c:	e1c0      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d003      	beq.n	80038b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2205      	movs	r2, #5
 80038ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	887a      	ldrh	r2, [r7, #2]
 80038ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f4:	d802      	bhi.n	80038fc <HAL_SPI_TransmitReceive+0xe6>
 80038f6:	8a3b      	ldrh	r3, [r7, #16]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d908      	bls.n	800390e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	e007      	b.n	800391e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800391c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d007      	beq.n	800393c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003944:	d97c      	bls.n	8003a40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_SPI_TransmitReceive+0x13e>
 800394e:	8a7b      	ldrh	r3, [r7, #18]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d169      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	1c9a      	adds	r2, r3, #2
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003978:	e056      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	d11b      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	2b01      	cmp	r3, #1
 8003996:	d113      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d11c      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x1f2>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d016      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	b292      	uxth	r2, r2
 80039e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	1c9a      	adds	r2, r3, #2
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a04:	2301      	movs	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a08:	f7fd fbf6 	bl	80011f8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d807      	bhi.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d003      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a26:	e0fb      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1a3      	bne.n	800397a <HAL_SPI_TransmitReceive+0x164>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d19d      	bne.n	800397a <HAL_SPI_TransmitReceive+0x164>
 8003a3e:	e0df      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x23a>
 8003a48:	8a7b      	ldrh	r3, [r7, #18]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f040 80cb 	bne.w	8003be6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d912      	bls.n	8003a80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	1c9a      	adds	r2, r3, #2
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b02      	subs	r3, #2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a7e:	e0b2      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aa6:	e09e      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d134      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x30a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02f      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x30a>
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d12c      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d912      	bls.n	8003af6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	881a      	ldrh	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b02      	subs	r3, #2
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af4:	e012      	b.n	8003b1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d148      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x3aa>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d042      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d923      	bls.n	8003b8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	b292      	uxth	r2, r2
 8003b52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b02      	subs	r3, #2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d81f      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	e016      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f103 020c 	add.w	r2, r3, #12
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bc0:	f7fd fb1a 	bl	80011f8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d803      	bhi.n	8003bd8 <HAL_SPI_TransmitReceive+0x3c2>
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d102      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x3c8>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003be4:	e01c      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f af5b 	bne.w	8003aa8 <HAL_SPI_TransmitReceive+0x292>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f47f af54 	bne.w	8003aa8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 faaf 	bl	8004168 <SPI_EndRxTxTransaction>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60
 8003c1c:	e000      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10f      	bne.n	8003c80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
    return;
 8003c7e:	e0d7      	b.n	8003e30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_SPI_IRQHandler+0x66>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	09db      	lsrs	r3, r3, #7
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
    return;
 8003ca0:	e0c6      	b.n	8003e30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_SPI_IRQHandler+0x8c>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80b4 	beq.w	8003e30 <HAL_SPI_IRQHandler+0x1f4>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80ad 	beq.w	8003e30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d023      	beq.n	8003d2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d011      	beq.n	8003d12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	e00b      	b.n	8003d2a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
        return;
 8003d28:	e082      	b.n	8003e30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d014      	beq.n	8003d60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	f043 0201 	orr.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	0a1b      	lsrs	r3, r3, #8
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00c      	beq.n	8003d86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	f043 0208 	orr.w	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d04f      	beq.n	8003e2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_SPI_IRQHandler+0x17e>
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d034      	beq.n	8003e24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0203 	bic.w	r2, r2, #3
 8003dc8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d011      	beq.n	8003df6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_SPI_IRQHandler+0x1fc>)
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fc1e 	bl	8001620 <HAL_DMA_Abort_IT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <HAL_SPI_IRQHandler+0x1fc>)
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd fc08 	bl	8001620 <HAL_DMA_Abort_IT>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003e22:	e003      	b.n	8003e2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f809 	bl	8003e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e2a:	e000      	b.n	8003e2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e2c:	bf00      	nop
    return;
 8003e2e:	bf00      	nop
  }
}
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	08003e51 	.word	0x08003e51

08003e3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff ffe5 	bl	8003e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e8c:	f7fd f9b4 	bl	80011f8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e9c:	f7fd f9ac 	bl	80011f8 <HAL_GetTick>
 8003ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	015b      	lsls	r3, r3, #5
 8003ea8:	0d1b      	lsrs	r3, r3, #20
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb2:	e054      	b.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d050      	beq.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ebc:	f7fd f99c 	bl	80011f8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d902      	bls.n	8003ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d13d      	bne.n	8003f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eea:	d111      	bne.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d004      	beq.n	8003f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d107      	bne.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f18:	d10f      	bne.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e017      	b.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d19b      	bne.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000000 	.word	0x20000000

08003f8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f9e:	f7fd f92b 	bl	80011f8 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003fae:	f7fd f923 	bl	80011f8 <HAL_GetTick>
 8003fb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fbc:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00da      	lsls	r2, r3, #3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	0d1b      	lsrs	r3, r3, #20
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fd4:	e060      	b.n	8004098 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fdc:	d107      	bne.n	8003fee <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d050      	beq.n	8004098 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ff6:	f7fd f8ff 	bl	80011f8 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	429a      	cmp	r2, r3
 8004004:	d902      	bls.n	800400c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d13d      	bne.n	8004088 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800401a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004024:	d111      	bne.n	800404a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d004      	beq.n	800403a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d107      	bne.n	800404a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004048:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004052:	d10f      	bne.n	8004074 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004072:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e010      	b.n	80040aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3b01      	subs	r3, #1
 8004096:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d196      	bne.n	8003fd6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3728      	adds	r7, #40	; 0x28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000000 	.word	0x20000000

080040b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040cc:	d111      	bne.n	80040f2 <SPI_EndRxTransaction+0x3a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d6:	d004      	beq.n	80040e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e0:	d107      	bne.n	80040f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2200      	movs	r2, #0
 80040fa:	2180      	movs	r1, #128	; 0x80
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff febd 	bl	8003e7c <SPI_WaitFlagStateUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e023      	b.n	8004160 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004120:	d11d      	bne.n	800415e <SPI_EndRxTransaction+0xa6>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800412a:	d004      	beq.n	8004136 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004134:	d113      	bne.n	800415e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2200      	movs	r2, #0
 800413e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff ff22 	bl	8003f8c <SPI_WaitFifoStateUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e000      	b.n	8004160 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff ff03 	bl	8003f8c <SPI_WaitFifoStateUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e027      	b.n	80041ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff fe68 	bl	8003e7c <SPI_WaitFlagStateUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e014      	b.n	80041ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff fedc 	bl	8003f8c <SPI_WaitFifoStateUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e000      	b.n	80041ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e040      	b.n	8004288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fdde 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fc00 	bl	8004a38 <UART_SetConfig>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e022      	b.n	8004288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 feac 	bl	8004fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800425e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 ff33 	bl	80050ec <UART_CheckIdleState>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	f040 80bf 	bne.w	8004428 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_UART_Receive+0x26>
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0b7      	b.n	800442a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_UART_Receive+0x38>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0b0      	b.n	800442a <HAL_UART_Receive+0x19a>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2222      	movs	r2, #34	; 0x22
 80042dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e4:	f7fc ff88 	bl	80011f8 <HAL_GetTick>
 80042e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004302:	d10e      	bne.n	8004322 <HAL_UART_Receive+0x92>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <HAL_UART_Receive+0x88>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004316:	e02d      	b.n	8004374 <HAL_UART_Receive+0xe4>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	22ff      	movs	r2, #255	; 0xff
 800431c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004320:	e028      	b.n	8004374 <HAL_UART_Receive+0xe4>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_UART_Receive+0xb6>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_UART_Receive+0xac>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	22ff      	movs	r2, #255	; 0xff
 8004336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800433a:	e01b      	b.n	8004374 <HAL_UART_Receive+0xe4>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	227f      	movs	r2, #127	; 0x7f
 8004340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004344:	e016      	b.n	8004374 <HAL_UART_Receive+0xe4>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800434e:	d10d      	bne.n	800436c <HAL_UART_Receive+0xdc>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <HAL_UART_Receive+0xd2>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	227f      	movs	r2, #127	; 0x7f
 800435c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004360:	e008      	b.n	8004374 <HAL_UART_Receive+0xe4>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	223f      	movs	r2, #63	; 0x3f
 8004366:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800436a:	e003      	b.n	8004374 <HAL_UART_Receive+0xe4>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800437a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d108      	bne.n	8004398 <HAL_UART_Receive+0x108>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e003      	b.n	80043a0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80043a8:	e033      	b.n	8004412 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2120      	movs	r1, #32
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fee2 	bl	800517e <UART_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e032      	b.n	800442a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10c      	bne.n	80043e4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	8a7b      	ldrh	r3, [r7, #18]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	3302      	adds	r3, #2
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e00d      	b.n	8004400 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	8a7b      	ldrh	r3, [r7, #18]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4013      	ands	r3, r2
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3301      	adds	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1c5      	bne.n	80043aa <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b0ba      	sub	sp, #232	; 0xe8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800445a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800445e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004462:	4013      	ands	r3, r2
 8004464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d115      	bne.n	800449c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00f      	beq.n	800449c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800447c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 82a6 	beq.w	80049de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
      }
      return;
 800449a:	e2a0      	b.n	80049de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800449c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8117 	beq.w	80046d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044b6:	4b85      	ldr	r3, [pc, #532]	; (80046cc <HAL_UART_IRQHandler+0x298>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 810a 	beq.w	80046d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d011      	beq.n	80044f0 <HAL_UART_IRQHandler+0xbc>
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d011      	beq.n	8004520 <HAL_UART_IRQHandler+0xec>
 80044fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2202      	movs	r2, #2
 800450e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004516:	f043 0204 	orr.w	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d011      	beq.n	8004550 <HAL_UART_IRQHandler+0x11c>
 800452c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2204      	movs	r2, #4
 800453e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004546:	f043 0202 	orr.w	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d017      	beq.n	800458c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2208      	movs	r2, #8
 800457a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	f043 0208 	orr.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800458c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004594:	2b00      	cmp	r3, #0
 8004596:	d012      	beq.n	80045be <HAL_UART_IRQHandler+0x18a>
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00c      	beq.n	80045be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 820c 	beq.w	80049e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d005      	beq.n	8004616 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800460a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800460e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	d04f      	beq.n	80046b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fe75 	bl	8005306 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d141      	bne.n	80046ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800465a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800466e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1d9      	bne.n	800462a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	2b00      	cmp	r3, #0
 800467c:	d013      	beq.n	80046a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <HAL_UART_IRQHandler+0x29c>)
 8004684:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4618      	mov	r0, r3
 800468c:	f7fc ffc8 	bl	8001620 <HAL_DMA_Abort_IT>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d017      	beq.n	80046c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046a0:	4610      	mov	r0, r2
 80046a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e00f      	b.n	80046c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9b0 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e00b      	b.n	80046c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f9ac 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	e007      	b.n	80046c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9a8 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80046c4:	e18d      	b.n	80049e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c6:	bf00      	nop
    return;
 80046c8:	e18b      	b.n	80049e2 <HAL_UART_IRQHandler+0x5ae>
 80046ca:	bf00      	nop
 80046cc:	04000120 	.word	0x04000120
 80046d0:	080053cd 	.word	0x080053cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d8:	2b01      	cmp	r3, #1
 80046da:	f040 8146 	bne.w	800496a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 813f 	beq.w	800496a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8138 	beq.w	800496a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2210      	movs	r2, #16
 8004700:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	f040 80b4 	bne.w	800487a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800471e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 815f 	beq.w	80049e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800472e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004732:	429a      	cmp	r2, r3
 8004734:	f080 8157 	bcs.w	80049e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800473e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 8085 	bne.w	800485e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800476c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800477e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004782:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800478a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1da      	bne.n	8004754 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3308      	adds	r3, #8
 80047be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e1      	bne.n	800479e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800480c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e3      	bne.n	80047da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800482c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482e:	f023 0310 	bic.w	r3, r3, #16
 8004832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004840:	65bb      	str	r3, [r7, #88]	; 0x58
 8004842:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004846:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800484e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e4      	bne.n	800481e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4618      	mov	r0, r3
 800485a:	f7fc fea3 	bl	80015a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800486a:	b29b      	uxth	r3, r3
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	b29b      	uxth	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8d4 	bl	8004a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004878:	e0b5      	b.n	80049e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004886:	b29b      	uxth	r3, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80a7 	beq.w	80049ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800489c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a2 	beq.w	80049ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e4      	bne.n	80048a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	623b      	str	r3, [r7, #32]
   return(result);
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004900:	633a      	str	r2, [r7, #48]	; 0x30
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e3      	bne.n	80048dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	60fb      	str	r3, [r7, #12]
   return(result);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	69b9      	ldr	r1, [r7, #24]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	617b      	str	r3, [r7, #20]
   return(result);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e4      	bne.n	8004926 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800495c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f85c 	bl	8004a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004968:	e03f      	b.n	80049ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00e      	beq.n	8004994 <HAL_UART_IRQHandler+0x560>
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800498a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fd5d 	bl	800544c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004992:	e02d      	b.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01c      	beq.n	80049ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
    }
    return;
 80049bc:	e017      	b.n	80049ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d012      	beq.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fd0e 	bl	80053f8 <UART_EndTransmit_IT>
    return;
 80049dc:	e008      	b.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80049de:	bf00      	nop
 80049e0:	e006      	b.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80049e2:	bf00      	nop
 80049e4:	e004      	b.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80049e6:	bf00      	nop
 80049e8:	e002      	b.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80049ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80049f0:	37e8      	adds	r7, #232	; 0xe8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop

080049f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b08a      	sub	sp, #40	; 0x28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4ba4      	ldr	r3, [pc, #656]	; (8004cf8 <UART_SetConfig+0x2c0>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a99      	ldr	r2, [pc, #612]	; (8004cfc <UART_SetConfig+0x2c4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a90      	ldr	r2, [pc, #576]	; (8004d00 <UART_SetConfig+0x2c8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d126      	bne.n	8004b10 <UART_SetConfig+0xd8>
 8004ac2:	4b90      	ldr	r3, [pc, #576]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d81b      	bhi.n	8004b08 <UART_SetConfig+0xd0>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0xa0>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aee:	e116      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004af0:	2302      	movs	r3, #2
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e112      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004af8:	2304      	movs	r3, #4
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e10e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b00:	2308      	movs	r3, #8
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e10a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e106      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7c      	ldr	r2, [pc, #496]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d138      	bne.n	8004b8c <UART_SetConfig+0x154>
 8004b1a:	4b7a      	ldr	r3, [pc, #488]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d82d      	bhi.n	8004b84 <UART_SetConfig+0x14c>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0xf8>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b85 	.word	0x08004b85
 8004b38:	08004b85 	.word	0x08004b85
 8004b3c:	08004b85 	.word	0x08004b85
 8004b40:	08004b75 	.word	0x08004b75
 8004b44:	08004b85 	.word	0x08004b85
 8004b48:	08004b85 	.word	0x08004b85
 8004b4c:	08004b85 	.word	0x08004b85
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	08004b85 	.word	0x08004b85
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b7d 	.word	0x08004b7d
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	e0d8      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e0d4      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b74:	2304      	movs	r3, #4
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	e0d0      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b82:	e0cc      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b84:	2310      	movs	r3, #16
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e0c8      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d125      	bne.n	8004be2 <UART_SetConfig+0x1aa>
 8004b96:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d016      	beq.n	8004bd2 <UART_SetConfig+0x19a>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d818      	bhi.n	8004bda <UART_SetConfig+0x1a2>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d00a      	beq.n	8004bc2 <UART_SetConfig+0x18a>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d814      	bhi.n	8004bda <UART_SetConfig+0x1a2>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <UART_SetConfig+0x182>
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d008      	beq.n	8004bca <UART_SetConfig+0x192>
 8004bb8:	e00f      	b.n	8004bda <UART_SetConfig+0x1a2>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc0:	e0ad      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc8:	e0a9      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd0:	e0a5      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd8:	e0a1      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be0:	e09d      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a4a      	ldr	r2, [pc, #296]	; (8004d10 <UART_SetConfig+0x2d8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d125      	bne.n	8004c38 <UART_SetConfig+0x200>
 8004bec:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bf8:	d016      	beq.n	8004c28 <UART_SetConfig+0x1f0>
 8004bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004bfc:	d818      	bhi.n	8004c30 <UART_SetConfig+0x1f8>
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d00a      	beq.n	8004c18 <UART_SetConfig+0x1e0>
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d814      	bhi.n	8004c30 <UART_SetConfig+0x1f8>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <UART_SetConfig+0x1d8>
 8004c0a:	2b40      	cmp	r3, #64	; 0x40
 8004c0c:	d008      	beq.n	8004c20 <UART_SetConfig+0x1e8>
 8004c0e:	e00f      	b.n	8004c30 <UART_SetConfig+0x1f8>
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e082      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e07e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e07a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e076      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e072      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <UART_SetConfig+0x2dc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d12a      	bne.n	8004c98 <UART_SetConfig+0x260>
 8004c42:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c50:	d01a      	beq.n	8004c88 <UART_SetConfig+0x250>
 8004c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c56:	d81b      	bhi.n	8004c90 <UART_SetConfig+0x258>
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5c:	d00c      	beq.n	8004c78 <UART_SetConfig+0x240>
 8004c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c62:	d815      	bhi.n	8004c90 <UART_SetConfig+0x258>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <UART_SetConfig+0x238>
 8004c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6c:	d008      	beq.n	8004c80 <UART_SetConfig+0x248>
 8004c6e:	e00f      	b.n	8004c90 <UART_SetConfig+0x258>
 8004c70:	2300      	movs	r3, #0
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e052      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e04e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c80:	2304      	movs	r3, #4
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e04a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c88:	2308      	movs	r3, #8
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e046      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e042      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <UART_SetConfig+0x2c4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d13a      	bne.n	8004d18 <UART_SetConfig+0x2e0>
 8004ca2:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb0:	d01a      	beq.n	8004ce8 <UART_SetConfig+0x2b0>
 8004cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb6:	d81b      	bhi.n	8004cf0 <UART_SetConfig+0x2b8>
 8004cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbc:	d00c      	beq.n	8004cd8 <UART_SetConfig+0x2a0>
 8004cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc2:	d815      	bhi.n	8004cf0 <UART_SetConfig+0x2b8>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <UART_SetConfig+0x298>
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d008      	beq.n	8004ce0 <UART_SetConfig+0x2a8>
 8004cce:	e00f      	b.n	8004cf0 <UART_SetConfig+0x2b8>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e022      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e01e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e01a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e016      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e012      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004cf8:	efff69f3 	.word	0xefff69f3
 8004cfc:	40008000 	.word	0x40008000
 8004d00:	40013800 	.word	0x40013800
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40004400 	.word	0x40004400
 8004d0c:	40004800 	.word	0x40004800
 8004d10:	40004c00 	.word	0x40004c00
 8004d14:	40005000 	.word	0x40005000
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a9f      	ldr	r2, [pc, #636]	; (8004fa0 <UART_SetConfig+0x568>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d17a      	bne.n	8004e1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d824      	bhi.n	8004d7a <UART_SetConfig+0x342>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x300>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d6b 	.word	0x08004d6b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d7b 	.word	0x08004d7b
 8004d58:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fd fcd2 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8004d60:	61f8      	str	r0, [r7, #28]
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b8f      	ldr	r3, [pc, #572]	; (8004fa4 <UART_SetConfig+0x56c>)
 8004d66:	61fb      	str	r3, [r7, #28]
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fd fc33 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8004d6e:	61f8      	str	r0, [r7, #28]
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80fb 	beq.w	8004f84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d305      	bcc.n	8004daa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d903      	bls.n	8004db2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004db0:	e0e8      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2200      	movs	r2, #0
 8004db6:	461c      	mov	r4, r3
 8004db8:	4615      	mov	r5, r2
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	022b      	lsls	r3, r5, #8
 8004dc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dc8:	0222      	lsls	r2, r4, #8
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	6849      	ldr	r1, [r1, #4]
 8004dce:	0849      	lsrs	r1, r1, #1
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	4688      	mov	r8, r1
 8004dd4:	4681      	mov	r9, r0
 8004dd6:	eb12 0a08 	adds.w	sl, r2, r8
 8004dda:	eb43 0b09 	adc.w	fp, r3, r9
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dec:	4650      	mov	r0, sl
 8004dee:	4659      	mov	r1, fp
 8004df0:	f7fb fa3e 	bl	8000270 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e02:	d308      	bcc.n	8004e16 <UART_SetConfig+0x3de>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0a:	d204      	bcs.n	8004e16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	e0b6      	b.n	8004f84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e1c:	e0b2      	b.n	8004f84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e26:	d15e      	bne.n	8004ee6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d828      	bhi.n	8004e82 <UART_SetConfig+0x44a>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x400>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fd fc52 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8004e60:	61f8      	str	r0, [r7, #28]
        break;
 8004e62:	e014      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fd fc64 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8004e68:	61f8      	str	r0, [r7, #28]
        break;
 8004e6a:	e010      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	; (8004fa4 <UART_SetConfig+0x56c>)
 8004e6e:	61fb      	str	r3, [r7, #28]
        break;
 8004e70:	e00d      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fd fbaf 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8004e76:	61f8      	str	r0, [r7, #28]
        break;
 8004e78:	e009      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7e:	61fb      	str	r3, [r7, #28]
        break;
 8004e80:	e005      	b.n	8004e8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d077      	beq.n	8004f84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005a      	lsls	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	441a      	add	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b0f      	cmp	r3, #15
 8004eae:	d916      	bls.n	8004ede <UART_SetConfig+0x4a6>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb6:	d212      	bcs.n	8004ede <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f023 030f 	bic.w	r3, r3, #15
 8004ec0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	8afb      	ldrh	r3, [r7, #22]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	8afa      	ldrh	r2, [r7, #22]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	e052      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ee4:	e04e      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d827      	bhi.n	8004f3e <UART_SetConfig+0x506>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0x4bc>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	08004f3f 	.word	0x08004f3f
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f3f 	.word	0x08004f3f
 8004f14:	08004f37 	.word	0x08004f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7fd fbf4 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	61f8      	str	r0, [r7, #28]
        break;
 8004f1e:	e014      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f20:	f7fd fc06 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8004f24:	61f8      	str	r0, [r7, #28]
        break;
 8004f26:	e010      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <UART_SetConfig+0x56c>)
 8004f2a:	61fb      	str	r3, [r7, #28]
        break;
 8004f2c:	e00d      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2e:	f7fd fb51 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8004f32:	61f8      	str	r0, [r7, #28]
        break;
 8004f34:	e009      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3a:	61fb      	str	r3, [r7, #28]
        break;
 8004f3c:	e005      	b.n	8004f4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f48:	bf00      	nop
    }

    if (pclk != 0U)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	085a      	lsrs	r2, r3, #1
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d909      	bls.n	8004f7e <UART_SetConfig+0x546>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d205      	bcs.n	8004f7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e002      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40008000 	.word	0x40008000
 8004fa4:	00f42400 	.word	0x00f42400

08004fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01a      	beq.n	80050be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a6:	d10a      	bne.n	80050be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
  }
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050fc:	f7fc f87c 	bl	80011f8 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b08      	cmp	r3, #8
 800510e:	d10e      	bne.n	800512e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f82d 	bl	800517e <UART_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e023      	b.n	8005176 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d10e      	bne.n	800515a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f817 	bl	800517e <UART_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e00d      	b.n	8005176 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b09c      	sub	sp, #112	; 0x70
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	4613      	mov	r3, r2
 800518c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518e:	e0a5      	b.n	80052dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	f000 80a1 	beq.w	80052dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fc f82d 	bl	80011f8 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80051aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d13e      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051c4:	667b      	str	r3, [r7, #100]	; 0x64
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3308      	adds	r3, #8
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	663b      	str	r3, [r7, #96]	; 0x60
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005202:	64ba      	str	r2, [r7, #72]	; 0x48
 8005204:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e5      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e067      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d04f      	beq.n	80052dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524a:	d147      	bne.n	80052dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005254:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800526a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
 8005276:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800527a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e6      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3308      	adds	r3, #8
 800528e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	613b      	str	r3, [r7, #16]
   return(result);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	66bb      	str	r3, [r7, #104]	; 0x68
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052a8:	623a      	str	r2, [r7, #32]
 80052aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	69f9      	ldr	r1, [r7, #28]
 80052ae:	6a3a      	ldr	r2, [r7, #32]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e5      	bne.n	8005288 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e010      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4013      	ands	r3, r2
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	f43f af4a 	beq.w	8005190 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3770      	adds	r7, #112	; 0x70
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005306:	b480      	push	{r7}
 8005308:	b095      	sub	sp, #84	; 0x54
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
 800532e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	2b01      	cmp	r3, #1
 800537a:	d118      	bne.n	80053ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	60bb      	str	r3, [r7, #8]
   return(result);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6979      	ldr	r1, [r7, #20]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	613b      	str	r3, [r7, #16]
   return(result);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e6      	bne.n	800537c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80053c0:	bf00      	nop
 80053c2:	3754      	adds	r7, #84	; 0x54
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fb0e 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	60bb      	str	r3, [r7, #8]
   return(result);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	613b      	str	r3, [r7, #16]
   return(result);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fada 	bl	80049f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005444:	bf00      	nop
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <__errno>:
 8005460:	4b01      	ldr	r3, [pc, #4]	; (8005468 <__errno+0x8>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	2000000c 	.word	0x2000000c

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 ffae 	bl	80063e0 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08006504 	.word	0x08006504
 80054a8:	08006504 	.word	0x08006504
 80054ac:	08006504 	.word	0x08006504
 80054b0:	08006508 	.word	0x08006508

080054b4 <memset>:
 80054b4:	4402      	add	r2, r0
 80054b6:	4603      	mov	r3, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d100      	bne.n	80054be <memset+0xa>
 80054bc:	4770      	bx	lr
 80054be:	f803 1b01 	strb.w	r1, [r3], #1
 80054c2:	e7f9      	b.n	80054b8 <memset+0x4>

080054c4 <iprintf>:
 80054c4:	b40f      	push	{r0, r1, r2, r3}
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <iprintf+0x2c>)
 80054c8:	b513      	push	{r0, r1, r4, lr}
 80054ca:	681c      	ldr	r4, [r3, #0]
 80054cc:	b124      	cbz	r4, 80054d8 <iprintf+0x14>
 80054ce:	69a3      	ldr	r3, [r4, #24]
 80054d0:	b913      	cbnz	r3, 80054d8 <iprintf+0x14>
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 f866 	bl	80055a4 <__sinit>
 80054d8:	ab05      	add	r3, sp, #20
 80054da:	9a04      	ldr	r2, [sp, #16]
 80054dc:	68a1      	ldr	r1, [r4, #8]
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 f9bd 	bl	8005860 <_vfiprintf_r>
 80054e6:	b002      	add	sp, #8
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	b004      	add	sp, #16
 80054ee:	4770      	bx	lr
 80054f0:	2000000c 	.word	0x2000000c

080054f4 <std>:
 80054f4:	2300      	movs	r3, #0
 80054f6:	b510      	push	{r4, lr}
 80054f8:	4604      	mov	r4, r0
 80054fa:	e9c0 3300 	strd	r3, r3, [r0]
 80054fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005502:	6083      	str	r3, [r0, #8]
 8005504:	8181      	strh	r1, [r0, #12]
 8005506:	6643      	str	r3, [r0, #100]	; 0x64
 8005508:	81c2      	strh	r2, [r0, #14]
 800550a:	6183      	str	r3, [r0, #24]
 800550c:	4619      	mov	r1, r3
 800550e:	2208      	movs	r2, #8
 8005510:	305c      	adds	r0, #92	; 0x5c
 8005512:	f7ff ffcf 	bl	80054b4 <memset>
 8005516:	4b05      	ldr	r3, [pc, #20]	; (800552c <std+0x38>)
 8005518:	6263      	str	r3, [r4, #36]	; 0x24
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <std+0x3c>)
 800551c:	62a3      	str	r3, [r4, #40]	; 0x28
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <std+0x40>)
 8005520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <std+0x44>)
 8005524:	6224      	str	r4, [r4, #32]
 8005526:	6323      	str	r3, [r4, #48]	; 0x30
 8005528:	bd10      	pop	{r4, pc}
 800552a:	bf00      	nop
 800552c:	08005e09 	.word	0x08005e09
 8005530:	08005e2b 	.word	0x08005e2b
 8005534:	08005e63 	.word	0x08005e63
 8005538:	08005e87 	.word	0x08005e87

0800553c <_cleanup_r>:
 800553c:	4901      	ldr	r1, [pc, #4]	; (8005544 <_cleanup_r+0x8>)
 800553e:	f000 b8af 	b.w	80056a0 <_fwalk_reent>
 8005542:	bf00      	nop
 8005544:	08006161 	.word	0x08006161

08005548 <__sfmoreglue>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	2268      	movs	r2, #104	; 0x68
 800554c:	1e4d      	subs	r5, r1, #1
 800554e:	4355      	muls	r5, r2
 8005550:	460e      	mov	r6, r1
 8005552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005556:	f000 f8e5 	bl	8005724 <_malloc_r>
 800555a:	4604      	mov	r4, r0
 800555c:	b140      	cbz	r0, 8005570 <__sfmoreglue+0x28>
 800555e:	2100      	movs	r1, #0
 8005560:	e9c0 1600 	strd	r1, r6, [r0]
 8005564:	300c      	adds	r0, #12
 8005566:	60a0      	str	r0, [r4, #8]
 8005568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800556c:	f7ff ffa2 	bl	80054b4 <memset>
 8005570:	4620      	mov	r0, r4
 8005572:	bd70      	pop	{r4, r5, r6, pc}

08005574 <__sfp_lock_acquire>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__sfp_lock_acquire+0x8>)
 8005576:	f000 b8b3 	b.w	80056e0 <__retarget_lock_acquire_recursive>
 800557a:	bf00      	nop
 800557c:	2000020d 	.word	0x2000020d

08005580 <__sfp_lock_release>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__sfp_lock_release+0x8>)
 8005582:	f000 b8ae 	b.w	80056e2 <__retarget_lock_release_recursive>
 8005586:	bf00      	nop
 8005588:	2000020d 	.word	0x2000020d

0800558c <__sinit_lock_acquire>:
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <__sinit_lock_acquire+0x8>)
 800558e:	f000 b8a7 	b.w	80056e0 <__retarget_lock_acquire_recursive>
 8005592:	bf00      	nop
 8005594:	2000020e 	.word	0x2000020e

08005598 <__sinit_lock_release>:
 8005598:	4801      	ldr	r0, [pc, #4]	; (80055a0 <__sinit_lock_release+0x8>)
 800559a:	f000 b8a2 	b.w	80056e2 <__retarget_lock_release_recursive>
 800559e:	bf00      	nop
 80055a0:	2000020e 	.word	0x2000020e

080055a4 <__sinit>:
 80055a4:	b510      	push	{r4, lr}
 80055a6:	4604      	mov	r4, r0
 80055a8:	f7ff fff0 	bl	800558c <__sinit_lock_acquire>
 80055ac:	69a3      	ldr	r3, [r4, #24]
 80055ae:	b11b      	cbz	r3, 80055b8 <__sinit+0x14>
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	f7ff bff0 	b.w	8005598 <__sinit_lock_release>
 80055b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055bc:	6523      	str	r3, [r4, #80]	; 0x50
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <__sinit+0x68>)
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <__sinit+0x6c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	bf04      	itt	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	61a3      	streq	r3, [r4, #24]
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 f820 	bl	8005614 <__sfp>
 80055d4:	6060      	str	r0, [r4, #4]
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 f81c 	bl	8005614 <__sfp>
 80055dc:	60a0      	str	r0, [r4, #8]
 80055de:	4620      	mov	r0, r4
 80055e0:	f000 f818 	bl	8005614 <__sfp>
 80055e4:	2200      	movs	r2, #0
 80055e6:	60e0      	str	r0, [r4, #12]
 80055e8:	2104      	movs	r1, #4
 80055ea:	6860      	ldr	r0, [r4, #4]
 80055ec:	f7ff ff82 	bl	80054f4 <std>
 80055f0:	68a0      	ldr	r0, [r4, #8]
 80055f2:	2201      	movs	r2, #1
 80055f4:	2109      	movs	r1, #9
 80055f6:	f7ff ff7d 	bl	80054f4 <std>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	2202      	movs	r2, #2
 80055fe:	2112      	movs	r1, #18
 8005600:	f7ff ff78 	bl	80054f4 <std>
 8005604:	2301      	movs	r3, #1
 8005606:	61a3      	str	r3, [r4, #24]
 8005608:	e7d2      	b.n	80055b0 <__sinit+0xc>
 800560a:	bf00      	nop
 800560c:	08006464 	.word	0x08006464
 8005610:	0800553d 	.word	0x0800553d

08005614 <__sfp>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	4607      	mov	r7, r0
 8005618:	f7ff ffac 	bl	8005574 <__sfp_lock_acquire>
 800561c:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <__sfp+0x84>)
 800561e:	681e      	ldr	r6, [r3, #0]
 8005620:	69b3      	ldr	r3, [r6, #24]
 8005622:	b913      	cbnz	r3, 800562a <__sfp+0x16>
 8005624:	4630      	mov	r0, r6
 8005626:	f7ff ffbd 	bl	80055a4 <__sinit>
 800562a:	3648      	adds	r6, #72	; 0x48
 800562c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005630:	3b01      	subs	r3, #1
 8005632:	d503      	bpl.n	800563c <__sfp+0x28>
 8005634:	6833      	ldr	r3, [r6, #0]
 8005636:	b30b      	cbz	r3, 800567c <__sfp+0x68>
 8005638:	6836      	ldr	r6, [r6, #0]
 800563a:	e7f7      	b.n	800562c <__sfp+0x18>
 800563c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005640:	b9d5      	cbnz	r5, 8005678 <__sfp+0x64>
 8005642:	4b16      	ldr	r3, [pc, #88]	; (800569c <__sfp+0x88>)
 8005644:	60e3      	str	r3, [r4, #12]
 8005646:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800564a:	6665      	str	r5, [r4, #100]	; 0x64
 800564c:	f000 f847 	bl	80056de <__retarget_lock_init_recursive>
 8005650:	f7ff ff96 	bl	8005580 <__sfp_lock_release>
 8005654:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005658:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800565c:	6025      	str	r5, [r4, #0]
 800565e:	61a5      	str	r5, [r4, #24]
 8005660:	2208      	movs	r2, #8
 8005662:	4629      	mov	r1, r5
 8005664:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005668:	f7ff ff24 	bl	80054b4 <memset>
 800566c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005670:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005674:	4620      	mov	r0, r4
 8005676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005678:	3468      	adds	r4, #104	; 0x68
 800567a:	e7d9      	b.n	8005630 <__sfp+0x1c>
 800567c:	2104      	movs	r1, #4
 800567e:	4638      	mov	r0, r7
 8005680:	f7ff ff62 	bl	8005548 <__sfmoreglue>
 8005684:	4604      	mov	r4, r0
 8005686:	6030      	str	r0, [r6, #0]
 8005688:	2800      	cmp	r0, #0
 800568a:	d1d5      	bne.n	8005638 <__sfp+0x24>
 800568c:	f7ff ff78 	bl	8005580 <__sfp_lock_release>
 8005690:	230c      	movs	r3, #12
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	e7ee      	b.n	8005674 <__sfp+0x60>
 8005696:	bf00      	nop
 8005698:	08006464 	.word	0x08006464
 800569c:	ffff0001 	.word	0xffff0001

080056a0 <_fwalk_reent>:
 80056a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a4:	4606      	mov	r6, r0
 80056a6:	4688      	mov	r8, r1
 80056a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056ac:	2700      	movs	r7, #0
 80056ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056b2:	f1b9 0901 	subs.w	r9, r9, #1
 80056b6:	d505      	bpl.n	80056c4 <_fwalk_reent+0x24>
 80056b8:	6824      	ldr	r4, [r4, #0]
 80056ba:	2c00      	cmp	r4, #0
 80056bc:	d1f7      	bne.n	80056ae <_fwalk_reent+0xe>
 80056be:	4638      	mov	r0, r7
 80056c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c4:	89ab      	ldrh	r3, [r5, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d907      	bls.n	80056da <_fwalk_reent+0x3a>
 80056ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056ce:	3301      	adds	r3, #1
 80056d0:	d003      	beq.n	80056da <_fwalk_reent+0x3a>
 80056d2:	4629      	mov	r1, r5
 80056d4:	4630      	mov	r0, r6
 80056d6:	47c0      	blx	r8
 80056d8:	4307      	orrs	r7, r0
 80056da:	3568      	adds	r5, #104	; 0x68
 80056dc:	e7e9      	b.n	80056b2 <_fwalk_reent+0x12>

080056de <__retarget_lock_init_recursive>:
 80056de:	4770      	bx	lr

080056e0 <__retarget_lock_acquire_recursive>:
 80056e0:	4770      	bx	lr

080056e2 <__retarget_lock_release_recursive>:
 80056e2:	4770      	bx	lr

080056e4 <sbrk_aligned>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4e0e      	ldr	r6, [pc, #56]	; (8005720 <sbrk_aligned+0x3c>)
 80056e8:	460c      	mov	r4, r1
 80056ea:	6831      	ldr	r1, [r6, #0]
 80056ec:	4605      	mov	r5, r0
 80056ee:	b911      	cbnz	r1, 80056f6 <sbrk_aligned+0x12>
 80056f0:	f000 fb7a 	bl	8005de8 <_sbrk_r>
 80056f4:	6030      	str	r0, [r6, #0]
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 fb75 	bl	8005de8 <_sbrk_r>
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	d00a      	beq.n	8005718 <sbrk_aligned+0x34>
 8005702:	1cc4      	adds	r4, r0, #3
 8005704:	f024 0403 	bic.w	r4, r4, #3
 8005708:	42a0      	cmp	r0, r4
 800570a:	d007      	beq.n	800571c <sbrk_aligned+0x38>
 800570c:	1a21      	subs	r1, r4, r0
 800570e:	4628      	mov	r0, r5
 8005710:	f000 fb6a 	bl	8005de8 <_sbrk_r>
 8005714:	3001      	adds	r0, #1
 8005716:	d101      	bne.n	800571c <sbrk_aligned+0x38>
 8005718:	f04f 34ff 	mov.w	r4, #4294967295
 800571c:	4620      	mov	r0, r4
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	20000214 	.word	0x20000214

08005724 <_malloc_r>:
 8005724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005728:	1ccd      	adds	r5, r1, #3
 800572a:	f025 0503 	bic.w	r5, r5, #3
 800572e:	3508      	adds	r5, #8
 8005730:	2d0c      	cmp	r5, #12
 8005732:	bf38      	it	cc
 8005734:	250c      	movcc	r5, #12
 8005736:	2d00      	cmp	r5, #0
 8005738:	4607      	mov	r7, r0
 800573a:	db01      	blt.n	8005740 <_malloc_r+0x1c>
 800573c:	42a9      	cmp	r1, r5
 800573e:	d905      	bls.n	800574c <_malloc_r+0x28>
 8005740:	230c      	movs	r3, #12
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	2600      	movs	r6, #0
 8005746:	4630      	mov	r0, r6
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	4e2e      	ldr	r6, [pc, #184]	; (8005808 <_malloc_r+0xe4>)
 800574e:	f000 fdbb 	bl	80062c8 <__malloc_lock>
 8005752:	6833      	ldr	r3, [r6, #0]
 8005754:	461c      	mov	r4, r3
 8005756:	bb34      	cbnz	r4, 80057a6 <_malloc_r+0x82>
 8005758:	4629      	mov	r1, r5
 800575a:	4638      	mov	r0, r7
 800575c:	f7ff ffc2 	bl	80056e4 <sbrk_aligned>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	4604      	mov	r4, r0
 8005764:	d14d      	bne.n	8005802 <_malloc_r+0xde>
 8005766:	6834      	ldr	r4, [r6, #0]
 8005768:	4626      	mov	r6, r4
 800576a:	2e00      	cmp	r6, #0
 800576c:	d140      	bne.n	80057f0 <_malloc_r+0xcc>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	4631      	mov	r1, r6
 8005772:	4638      	mov	r0, r7
 8005774:	eb04 0803 	add.w	r8, r4, r3
 8005778:	f000 fb36 	bl	8005de8 <_sbrk_r>
 800577c:	4580      	cmp	r8, r0
 800577e:	d13a      	bne.n	80057f6 <_malloc_r+0xd2>
 8005780:	6821      	ldr	r1, [r4, #0]
 8005782:	3503      	adds	r5, #3
 8005784:	1a6d      	subs	r5, r5, r1
 8005786:	f025 0503 	bic.w	r5, r5, #3
 800578a:	3508      	adds	r5, #8
 800578c:	2d0c      	cmp	r5, #12
 800578e:	bf38      	it	cc
 8005790:	250c      	movcc	r5, #12
 8005792:	4629      	mov	r1, r5
 8005794:	4638      	mov	r0, r7
 8005796:	f7ff ffa5 	bl	80056e4 <sbrk_aligned>
 800579a:	3001      	adds	r0, #1
 800579c:	d02b      	beq.n	80057f6 <_malloc_r+0xd2>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	442b      	add	r3, r5
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	e00e      	b.n	80057c4 <_malloc_r+0xa0>
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	1b52      	subs	r2, r2, r5
 80057aa:	d41e      	bmi.n	80057ea <_malloc_r+0xc6>
 80057ac:	2a0b      	cmp	r2, #11
 80057ae:	d916      	bls.n	80057de <_malloc_r+0xba>
 80057b0:	1961      	adds	r1, r4, r5
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	6025      	str	r5, [r4, #0]
 80057b6:	bf18      	it	ne
 80057b8:	6059      	strne	r1, [r3, #4]
 80057ba:	6863      	ldr	r3, [r4, #4]
 80057bc:	bf08      	it	eq
 80057be:	6031      	streq	r1, [r6, #0]
 80057c0:	5162      	str	r2, [r4, r5]
 80057c2:	604b      	str	r3, [r1, #4]
 80057c4:	4638      	mov	r0, r7
 80057c6:	f104 060b 	add.w	r6, r4, #11
 80057ca:	f000 fd83 	bl	80062d4 <__malloc_unlock>
 80057ce:	f026 0607 	bic.w	r6, r6, #7
 80057d2:	1d23      	adds	r3, r4, #4
 80057d4:	1af2      	subs	r2, r6, r3
 80057d6:	d0b6      	beq.n	8005746 <_malloc_r+0x22>
 80057d8:	1b9b      	subs	r3, r3, r6
 80057da:	50a3      	str	r3, [r4, r2]
 80057dc:	e7b3      	b.n	8005746 <_malloc_r+0x22>
 80057de:	6862      	ldr	r2, [r4, #4]
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	bf0c      	ite	eq
 80057e4:	6032      	streq	r2, [r6, #0]
 80057e6:	605a      	strne	r2, [r3, #4]
 80057e8:	e7ec      	b.n	80057c4 <_malloc_r+0xa0>
 80057ea:	4623      	mov	r3, r4
 80057ec:	6864      	ldr	r4, [r4, #4]
 80057ee:	e7b2      	b.n	8005756 <_malloc_r+0x32>
 80057f0:	4634      	mov	r4, r6
 80057f2:	6876      	ldr	r6, [r6, #4]
 80057f4:	e7b9      	b.n	800576a <_malloc_r+0x46>
 80057f6:	230c      	movs	r3, #12
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	4638      	mov	r0, r7
 80057fc:	f000 fd6a 	bl	80062d4 <__malloc_unlock>
 8005800:	e7a1      	b.n	8005746 <_malloc_r+0x22>
 8005802:	6025      	str	r5, [r4, #0]
 8005804:	e7de      	b.n	80057c4 <_malloc_r+0xa0>
 8005806:	bf00      	nop
 8005808:	20000210 	.word	0x20000210

0800580c <__sfputc_r>:
 800580c:	6893      	ldr	r3, [r2, #8]
 800580e:	3b01      	subs	r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	b410      	push	{r4}
 8005814:	6093      	str	r3, [r2, #8]
 8005816:	da08      	bge.n	800582a <__sfputc_r+0x1e>
 8005818:	6994      	ldr	r4, [r2, #24]
 800581a:	42a3      	cmp	r3, r4
 800581c:	db01      	blt.n	8005822 <__sfputc_r+0x16>
 800581e:	290a      	cmp	r1, #10
 8005820:	d103      	bne.n	800582a <__sfputc_r+0x1e>
 8005822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005826:	f000 bb33 	b.w	8005e90 <__swbuf_r>
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	1c58      	adds	r0, r3, #1
 800582e:	6010      	str	r0, [r2, #0]
 8005830:	7019      	strb	r1, [r3, #0]
 8005832:	4608      	mov	r0, r1
 8005834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005838:	4770      	bx	lr

0800583a <__sfputs_r>:
 800583a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583c:	4606      	mov	r6, r0
 800583e:	460f      	mov	r7, r1
 8005840:	4614      	mov	r4, r2
 8005842:	18d5      	adds	r5, r2, r3
 8005844:	42ac      	cmp	r4, r5
 8005846:	d101      	bne.n	800584c <__sfputs_r+0x12>
 8005848:	2000      	movs	r0, #0
 800584a:	e007      	b.n	800585c <__sfputs_r+0x22>
 800584c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005850:	463a      	mov	r2, r7
 8005852:	4630      	mov	r0, r6
 8005854:	f7ff ffda 	bl	800580c <__sfputc_r>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d1f3      	bne.n	8005844 <__sfputs_r+0xa>
 800585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005860 <_vfiprintf_r>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	460d      	mov	r5, r1
 8005866:	b09d      	sub	sp, #116	; 0x74
 8005868:	4614      	mov	r4, r2
 800586a:	4698      	mov	r8, r3
 800586c:	4606      	mov	r6, r0
 800586e:	b118      	cbz	r0, 8005878 <_vfiprintf_r+0x18>
 8005870:	6983      	ldr	r3, [r0, #24]
 8005872:	b90b      	cbnz	r3, 8005878 <_vfiprintf_r+0x18>
 8005874:	f7ff fe96 	bl	80055a4 <__sinit>
 8005878:	4b89      	ldr	r3, [pc, #548]	; (8005aa0 <_vfiprintf_r+0x240>)
 800587a:	429d      	cmp	r5, r3
 800587c:	d11b      	bne.n	80058b6 <_vfiprintf_r+0x56>
 800587e:	6875      	ldr	r5, [r6, #4]
 8005880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005882:	07d9      	lsls	r1, r3, #31
 8005884:	d405      	bmi.n	8005892 <_vfiprintf_r+0x32>
 8005886:	89ab      	ldrh	r3, [r5, #12]
 8005888:	059a      	lsls	r2, r3, #22
 800588a:	d402      	bmi.n	8005892 <_vfiprintf_r+0x32>
 800588c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800588e:	f7ff ff27 	bl	80056e0 <__retarget_lock_acquire_recursive>
 8005892:	89ab      	ldrh	r3, [r5, #12]
 8005894:	071b      	lsls	r3, r3, #28
 8005896:	d501      	bpl.n	800589c <_vfiprintf_r+0x3c>
 8005898:	692b      	ldr	r3, [r5, #16]
 800589a:	b9eb      	cbnz	r3, 80058d8 <_vfiprintf_r+0x78>
 800589c:	4629      	mov	r1, r5
 800589e:	4630      	mov	r0, r6
 80058a0:	f000 fb5a 	bl	8005f58 <__swsetup_r>
 80058a4:	b1c0      	cbz	r0, 80058d8 <_vfiprintf_r+0x78>
 80058a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a8:	07dc      	lsls	r4, r3, #31
 80058aa:	d50e      	bpl.n	80058ca <_vfiprintf_r+0x6a>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	b01d      	add	sp, #116	; 0x74
 80058b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b6:	4b7b      	ldr	r3, [pc, #492]	; (8005aa4 <_vfiprintf_r+0x244>)
 80058b8:	429d      	cmp	r5, r3
 80058ba:	d101      	bne.n	80058c0 <_vfiprintf_r+0x60>
 80058bc:	68b5      	ldr	r5, [r6, #8]
 80058be:	e7df      	b.n	8005880 <_vfiprintf_r+0x20>
 80058c0:	4b79      	ldr	r3, [pc, #484]	; (8005aa8 <_vfiprintf_r+0x248>)
 80058c2:	429d      	cmp	r5, r3
 80058c4:	bf08      	it	eq
 80058c6:	68f5      	ldreq	r5, [r6, #12]
 80058c8:	e7da      	b.n	8005880 <_vfiprintf_r+0x20>
 80058ca:	89ab      	ldrh	r3, [r5, #12]
 80058cc:	0598      	lsls	r0, r3, #22
 80058ce:	d4ed      	bmi.n	80058ac <_vfiprintf_r+0x4c>
 80058d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058d2:	f7ff ff06 	bl	80056e2 <__retarget_lock_release_recursive>
 80058d6:	e7e9      	b.n	80058ac <_vfiprintf_r+0x4c>
 80058d8:	2300      	movs	r3, #0
 80058da:	9309      	str	r3, [sp, #36]	; 0x24
 80058dc:	2320      	movs	r3, #32
 80058de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e6:	2330      	movs	r3, #48	; 0x30
 80058e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005aac <_vfiprintf_r+0x24c>
 80058ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058f0:	f04f 0901 	mov.w	r9, #1
 80058f4:	4623      	mov	r3, r4
 80058f6:	469a      	mov	sl, r3
 80058f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058fc:	b10a      	cbz	r2, 8005902 <_vfiprintf_r+0xa2>
 80058fe:	2a25      	cmp	r2, #37	; 0x25
 8005900:	d1f9      	bne.n	80058f6 <_vfiprintf_r+0x96>
 8005902:	ebba 0b04 	subs.w	fp, sl, r4
 8005906:	d00b      	beq.n	8005920 <_vfiprintf_r+0xc0>
 8005908:	465b      	mov	r3, fp
 800590a:	4622      	mov	r2, r4
 800590c:	4629      	mov	r1, r5
 800590e:	4630      	mov	r0, r6
 8005910:	f7ff ff93 	bl	800583a <__sfputs_r>
 8005914:	3001      	adds	r0, #1
 8005916:	f000 80aa 	beq.w	8005a6e <_vfiprintf_r+0x20e>
 800591a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591c:	445a      	add	r2, fp
 800591e:	9209      	str	r2, [sp, #36]	; 0x24
 8005920:	f89a 3000 	ldrb.w	r3, [sl]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80a2 	beq.w	8005a6e <_vfiprintf_r+0x20e>
 800592a:	2300      	movs	r3, #0
 800592c:	f04f 32ff 	mov.w	r2, #4294967295
 8005930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005934:	f10a 0a01 	add.w	sl, sl, #1
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	9307      	str	r3, [sp, #28]
 800593c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005940:	931a      	str	r3, [sp, #104]	; 0x68
 8005942:	4654      	mov	r4, sl
 8005944:	2205      	movs	r2, #5
 8005946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594a:	4858      	ldr	r0, [pc, #352]	; (8005aac <_vfiprintf_r+0x24c>)
 800594c:	f7fa fc40 	bl	80001d0 <memchr>
 8005950:	9a04      	ldr	r2, [sp, #16]
 8005952:	b9d8      	cbnz	r0, 800598c <_vfiprintf_r+0x12c>
 8005954:	06d1      	lsls	r1, r2, #27
 8005956:	bf44      	itt	mi
 8005958:	2320      	movmi	r3, #32
 800595a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595e:	0713      	lsls	r3, r2, #28
 8005960:	bf44      	itt	mi
 8005962:	232b      	movmi	r3, #43	; 0x2b
 8005964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005968:	f89a 3000 	ldrb.w	r3, [sl]
 800596c:	2b2a      	cmp	r3, #42	; 0x2a
 800596e:	d015      	beq.n	800599c <_vfiprintf_r+0x13c>
 8005970:	9a07      	ldr	r2, [sp, #28]
 8005972:	4654      	mov	r4, sl
 8005974:	2000      	movs	r0, #0
 8005976:	f04f 0c0a 	mov.w	ip, #10
 800597a:	4621      	mov	r1, r4
 800597c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005980:	3b30      	subs	r3, #48	; 0x30
 8005982:	2b09      	cmp	r3, #9
 8005984:	d94e      	bls.n	8005a24 <_vfiprintf_r+0x1c4>
 8005986:	b1b0      	cbz	r0, 80059b6 <_vfiprintf_r+0x156>
 8005988:	9207      	str	r2, [sp, #28]
 800598a:	e014      	b.n	80059b6 <_vfiprintf_r+0x156>
 800598c:	eba0 0308 	sub.w	r3, r0, r8
 8005990:	fa09 f303 	lsl.w	r3, r9, r3
 8005994:	4313      	orrs	r3, r2
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	46a2      	mov	sl, r4
 800599a:	e7d2      	b.n	8005942 <_vfiprintf_r+0xe2>
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	1d19      	adds	r1, r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	9103      	str	r1, [sp, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfbb      	ittet	lt
 80059a8:	425b      	neglt	r3, r3
 80059aa:	f042 0202 	orrlt.w	r2, r2, #2
 80059ae:	9307      	strge	r3, [sp, #28]
 80059b0:	9307      	strlt	r3, [sp, #28]
 80059b2:	bfb8      	it	lt
 80059b4:	9204      	strlt	r2, [sp, #16]
 80059b6:	7823      	ldrb	r3, [r4, #0]
 80059b8:	2b2e      	cmp	r3, #46	; 0x2e
 80059ba:	d10c      	bne.n	80059d6 <_vfiprintf_r+0x176>
 80059bc:	7863      	ldrb	r3, [r4, #1]
 80059be:	2b2a      	cmp	r3, #42	; 0x2a
 80059c0:	d135      	bne.n	8005a2e <_vfiprintf_r+0x1ce>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	1d1a      	adds	r2, r3, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	9203      	str	r2, [sp, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bfb8      	it	lt
 80059ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80059d2:	3402      	adds	r4, #2
 80059d4:	9305      	str	r3, [sp, #20]
 80059d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005abc <_vfiprintf_r+0x25c>
 80059da:	7821      	ldrb	r1, [r4, #0]
 80059dc:	2203      	movs	r2, #3
 80059de:	4650      	mov	r0, sl
 80059e0:	f7fa fbf6 	bl	80001d0 <memchr>
 80059e4:	b140      	cbz	r0, 80059f8 <_vfiprintf_r+0x198>
 80059e6:	2340      	movs	r3, #64	; 0x40
 80059e8:	eba0 000a 	sub.w	r0, r0, sl
 80059ec:	fa03 f000 	lsl.w	r0, r3, r0
 80059f0:	9b04      	ldr	r3, [sp, #16]
 80059f2:	4303      	orrs	r3, r0
 80059f4:	3401      	adds	r4, #1
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059fc:	482c      	ldr	r0, [pc, #176]	; (8005ab0 <_vfiprintf_r+0x250>)
 80059fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a02:	2206      	movs	r2, #6
 8005a04:	f7fa fbe4 	bl	80001d0 <memchr>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d03f      	beq.n	8005a8c <_vfiprintf_r+0x22c>
 8005a0c:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <_vfiprintf_r+0x254>)
 8005a0e:	bb1b      	cbnz	r3, 8005a58 <_vfiprintf_r+0x1f8>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	3307      	adds	r3, #7
 8005a14:	f023 0307 	bic.w	r3, r3, #7
 8005a18:	3308      	adds	r3, #8
 8005a1a:	9303      	str	r3, [sp, #12]
 8005a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1e:	443b      	add	r3, r7
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	e767      	b.n	80058f4 <_vfiprintf_r+0x94>
 8005a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a28:	460c      	mov	r4, r1
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	e7a5      	b.n	800597a <_vfiprintf_r+0x11a>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	3401      	adds	r4, #1
 8005a32:	9305      	str	r3, [sp, #20]
 8005a34:	4619      	mov	r1, r3
 8005a36:	f04f 0c0a 	mov.w	ip, #10
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a40:	3a30      	subs	r2, #48	; 0x30
 8005a42:	2a09      	cmp	r2, #9
 8005a44:	d903      	bls.n	8005a4e <_vfiprintf_r+0x1ee>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0c5      	beq.n	80059d6 <_vfiprintf_r+0x176>
 8005a4a:	9105      	str	r1, [sp, #20]
 8005a4c:	e7c3      	b.n	80059d6 <_vfiprintf_r+0x176>
 8005a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a52:	4604      	mov	r4, r0
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7f0      	b.n	8005a3a <_vfiprintf_r+0x1da>
 8005a58:	ab03      	add	r3, sp, #12
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	462a      	mov	r2, r5
 8005a5e:	4b16      	ldr	r3, [pc, #88]	; (8005ab8 <_vfiprintf_r+0x258>)
 8005a60:	a904      	add	r1, sp, #16
 8005a62:	4630      	mov	r0, r6
 8005a64:	f3af 8000 	nop.w
 8005a68:	4607      	mov	r7, r0
 8005a6a:	1c78      	adds	r0, r7, #1
 8005a6c:	d1d6      	bne.n	8005a1c <_vfiprintf_r+0x1bc>
 8005a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a70:	07d9      	lsls	r1, r3, #31
 8005a72:	d405      	bmi.n	8005a80 <_vfiprintf_r+0x220>
 8005a74:	89ab      	ldrh	r3, [r5, #12]
 8005a76:	059a      	lsls	r2, r3, #22
 8005a78:	d402      	bmi.n	8005a80 <_vfiprintf_r+0x220>
 8005a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7c:	f7ff fe31 	bl	80056e2 <__retarget_lock_release_recursive>
 8005a80:	89ab      	ldrh	r3, [r5, #12]
 8005a82:	065b      	lsls	r3, r3, #25
 8005a84:	f53f af12 	bmi.w	80058ac <_vfiprintf_r+0x4c>
 8005a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a8a:	e711      	b.n	80058b0 <_vfiprintf_r+0x50>
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <_vfiprintf_r+0x258>)
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	4630      	mov	r0, r6
 8005a98:	f000 f880 	bl	8005b9c <_printf_i>
 8005a9c:	e7e4      	b.n	8005a68 <_vfiprintf_r+0x208>
 8005a9e:	bf00      	nop
 8005aa0:	08006488 	.word	0x08006488
 8005aa4:	080064a8 	.word	0x080064a8
 8005aa8:	08006468 	.word	0x08006468
 8005aac:	080064c8 	.word	0x080064c8
 8005ab0:	080064d2 	.word	0x080064d2
 8005ab4:	00000000 	.word	0x00000000
 8005ab8:	0800583b 	.word	0x0800583b
 8005abc:	080064ce 	.word	0x080064ce

08005ac0 <_printf_common>:
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	4699      	mov	r9, r3
 8005ac8:	688a      	ldr	r2, [r1, #8]
 8005aca:	690b      	ldr	r3, [r1, #16]
 8005acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	bfb8      	it	lt
 8005ad4:	4613      	movlt	r3, r2
 8005ad6:	6033      	str	r3, [r6, #0]
 8005ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005adc:	4607      	mov	r7, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	b10a      	cbz	r2, 8005ae6 <_printf_common+0x26>
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	6033      	str	r3, [r6, #0]
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	0699      	lsls	r1, r3, #26
 8005aea:	bf42      	ittt	mi
 8005aec:	6833      	ldrmi	r3, [r6, #0]
 8005aee:	3302      	addmi	r3, #2
 8005af0:	6033      	strmi	r3, [r6, #0]
 8005af2:	6825      	ldr	r5, [r4, #0]
 8005af4:	f015 0506 	ands.w	r5, r5, #6
 8005af8:	d106      	bne.n	8005b08 <_printf_common+0x48>
 8005afa:	f104 0a19 	add.w	sl, r4, #25
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	6832      	ldr	r2, [r6, #0]
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dc26      	bgt.n	8005b56 <_printf_common+0x96>
 8005b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b0c:	1e13      	subs	r3, r2, #0
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	bf18      	it	ne
 8005b12:	2301      	movne	r3, #1
 8005b14:	0692      	lsls	r2, r2, #26
 8005b16:	d42b      	bmi.n	8005b70 <_printf_common+0xb0>
 8005b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	4638      	mov	r0, r7
 8005b20:	47c0      	blx	r8
 8005b22:	3001      	adds	r0, #1
 8005b24:	d01e      	beq.n	8005b64 <_printf_common+0xa4>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	68e5      	ldr	r5, [r4, #12]
 8005b2a:	6832      	ldr	r2, [r6, #0]
 8005b2c:	f003 0306 	and.w	r3, r3, #6
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	bf08      	it	eq
 8005b34:	1aad      	subeq	r5, r5, r2
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	6922      	ldr	r2, [r4, #16]
 8005b3a:	bf0c      	ite	eq
 8005b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b40:	2500      	movne	r5, #0
 8005b42:	4293      	cmp	r3, r2
 8005b44:	bfc4      	itt	gt
 8005b46:	1a9b      	subgt	r3, r3, r2
 8005b48:	18ed      	addgt	r5, r5, r3
 8005b4a:	2600      	movs	r6, #0
 8005b4c:	341a      	adds	r4, #26
 8005b4e:	42b5      	cmp	r5, r6
 8005b50:	d11a      	bne.n	8005b88 <_printf_common+0xc8>
 8005b52:	2000      	movs	r0, #0
 8005b54:	e008      	b.n	8005b68 <_printf_common+0xa8>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4652      	mov	r2, sl
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	47c0      	blx	r8
 8005b60:	3001      	adds	r0, #1
 8005b62:	d103      	bne.n	8005b6c <_printf_common+0xac>
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6c:	3501      	adds	r5, #1
 8005b6e:	e7c6      	b.n	8005afe <_printf_common+0x3e>
 8005b70:	18e1      	adds	r1, r4, r3
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	2030      	movs	r0, #48	; 0x30
 8005b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b7a:	4422      	add	r2, r4
 8005b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b84:	3302      	adds	r3, #2
 8005b86:	e7c7      	b.n	8005b18 <_printf_common+0x58>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4638      	mov	r0, r7
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d0e6      	beq.n	8005b64 <_printf_common+0xa4>
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7d9      	b.n	8005b4e <_printf_common+0x8e>
	...

08005b9c <_printf_i>:
 8005b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	7e0f      	ldrb	r7, [r1, #24]
 8005ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ba4:	2f78      	cmp	r7, #120	; 0x78
 8005ba6:	4691      	mov	r9, r2
 8005ba8:	4680      	mov	r8, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	469a      	mov	sl, r3
 8005bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bb2:	d807      	bhi.n	8005bc4 <_printf_i+0x28>
 8005bb4:	2f62      	cmp	r7, #98	; 0x62
 8005bb6:	d80a      	bhi.n	8005bce <_printf_i+0x32>
 8005bb8:	2f00      	cmp	r7, #0
 8005bba:	f000 80d8 	beq.w	8005d6e <_printf_i+0x1d2>
 8005bbe:	2f58      	cmp	r7, #88	; 0x58
 8005bc0:	f000 80a3 	beq.w	8005d0a <_printf_i+0x16e>
 8005bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bcc:	e03a      	b.n	8005c44 <_printf_i+0xa8>
 8005bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bd2:	2b15      	cmp	r3, #21
 8005bd4:	d8f6      	bhi.n	8005bc4 <_printf_i+0x28>
 8005bd6:	a101      	add	r1, pc, #4	; (adr r1, 8005bdc <_printf_i+0x40>)
 8005bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005bc5 	.word	0x08005bc5
 8005be8:	08005bc5 	.word	0x08005bc5
 8005bec:	08005bc5 	.word	0x08005bc5
 8005bf0:	08005bc5 	.word	0x08005bc5
 8005bf4:	08005c49 	.word	0x08005c49
 8005bf8:	08005bc5 	.word	0x08005bc5
 8005bfc:	08005bc5 	.word	0x08005bc5
 8005c00:	08005bc5 	.word	0x08005bc5
 8005c04:	08005bc5 	.word	0x08005bc5
 8005c08:	08005d55 	.word	0x08005d55
 8005c0c:	08005c79 	.word	0x08005c79
 8005c10:	08005d37 	.word	0x08005d37
 8005c14:	08005bc5 	.word	0x08005bc5
 8005c18:	08005bc5 	.word	0x08005bc5
 8005c1c:	08005d77 	.word	0x08005d77
 8005c20:	08005bc5 	.word	0x08005bc5
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005bc5 	.word	0x08005bc5
 8005c2c:	08005bc5 	.word	0x08005bc5
 8005c30:	08005d3f 	.word	0x08005d3f
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	1d1a      	adds	r2, r3, #4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	602a      	str	r2, [r5, #0]
 8005c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0a3      	b.n	8005d90 <_printf_i+0x1f4>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	6829      	ldr	r1, [r5, #0]
 8005c4c:	0606      	lsls	r6, r0, #24
 8005c4e:	f101 0304 	add.w	r3, r1, #4
 8005c52:	d50a      	bpl.n	8005c6a <_printf_i+0xce>
 8005c54:	680e      	ldr	r6, [r1, #0]
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	2e00      	cmp	r6, #0
 8005c5a:	da03      	bge.n	8005c64 <_printf_i+0xc8>
 8005c5c:	232d      	movs	r3, #45	; 0x2d
 8005c5e:	4276      	negs	r6, r6
 8005c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c64:	485e      	ldr	r0, [pc, #376]	; (8005de0 <_printf_i+0x244>)
 8005c66:	230a      	movs	r3, #10
 8005c68:	e019      	b.n	8005c9e <_printf_i+0x102>
 8005c6a:	680e      	ldr	r6, [r1, #0]
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c72:	bf18      	it	ne
 8005c74:	b236      	sxthne	r6, r6
 8005c76:	e7ef      	b.n	8005c58 <_printf_i+0xbc>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	6820      	ldr	r0, [r4, #0]
 8005c7c:	1d19      	adds	r1, r3, #4
 8005c7e:	6029      	str	r1, [r5, #0]
 8005c80:	0601      	lsls	r1, r0, #24
 8005c82:	d501      	bpl.n	8005c88 <_printf_i+0xec>
 8005c84:	681e      	ldr	r6, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <_printf_i+0xf2>
 8005c88:	0646      	lsls	r6, r0, #25
 8005c8a:	d5fb      	bpl.n	8005c84 <_printf_i+0xe8>
 8005c8c:	881e      	ldrh	r6, [r3, #0]
 8005c8e:	4854      	ldr	r0, [pc, #336]	; (8005de0 <_printf_i+0x244>)
 8005c90:	2f6f      	cmp	r7, #111	; 0x6f
 8005c92:	bf0c      	ite	eq
 8005c94:	2308      	moveq	r3, #8
 8005c96:	230a      	movne	r3, #10
 8005c98:	2100      	movs	r1, #0
 8005c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c9e:	6865      	ldr	r5, [r4, #4]
 8005ca0:	60a5      	str	r5, [r4, #8]
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	bfa2      	ittt	ge
 8005ca6:	6821      	ldrge	r1, [r4, #0]
 8005ca8:	f021 0104 	bicge.w	r1, r1, #4
 8005cac:	6021      	strge	r1, [r4, #0]
 8005cae:	b90e      	cbnz	r6, 8005cb4 <_printf_i+0x118>
 8005cb0:	2d00      	cmp	r5, #0
 8005cb2:	d04d      	beq.n	8005d50 <_printf_i+0x1b4>
 8005cb4:	4615      	mov	r5, r2
 8005cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cba:	fb03 6711 	mls	r7, r3, r1, r6
 8005cbe:	5dc7      	ldrb	r7, [r0, r7]
 8005cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cc4:	4637      	mov	r7, r6
 8005cc6:	42bb      	cmp	r3, r7
 8005cc8:	460e      	mov	r6, r1
 8005cca:	d9f4      	bls.n	8005cb6 <_printf_i+0x11a>
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d10b      	bne.n	8005ce8 <_printf_i+0x14c>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	07de      	lsls	r6, r3, #31
 8005cd4:	d508      	bpl.n	8005ce8 <_printf_i+0x14c>
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	6861      	ldr	r1, [r4, #4]
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	bfde      	ittt	le
 8005cde:	2330      	movle	r3, #48	; 0x30
 8005ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ce8:	1b52      	subs	r2, r2, r5
 8005cea:	6122      	str	r2, [r4, #16]
 8005cec:	f8cd a000 	str.w	sl, [sp]
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	aa03      	add	r2, sp, #12
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	f7ff fee2 	bl	8005ac0 <_printf_common>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d14c      	bne.n	8005d9a <_printf_i+0x1fe>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	b004      	add	sp, #16
 8005d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0a:	4835      	ldr	r0, [pc, #212]	; (8005de0 <_printf_i+0x244>)
 8005d0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d10:	6829      	ldr	r1, [r5, #0]
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d18:	6029      	str	r1, [r5, #0]
 8005d1a:	061d      	lsls	r5, r3, #24
 8005d1c:	d514      	bpl.n	8005d48 <_printf_i+0x1ac>
 8005d1e:	07df      	lsls	r7, r3, #31
 8005d20:	bf44      	itt	mi
 8005d22:	f043 0320 	orrmi.w	r3, r3, #32
 8005d26:	6023      	strmi	r3, [r4, #0]
 8005d28:	b91e      	cbnz	r6, 8005d32 <_printf_i+0x196>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f023 0320 	bic.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	2310      	movs	r3, #16
 8005d34:	e7b0      	b.n	8005c98 <_printf_i+0xfc>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f043 0320 	orr.w	r3, r3, #32
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	2378      	movs	r3, #120	; 0x78
 8005d40:	4828      	ldr	r0, [pc, #160]	; (8005de4 <_printf_i+0x248>)
 8005d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d46:	e7e3      	b.n	8005d10 <_printf_i+0x174>
 8005d48:	0659      	lsls	r1, r3, #25
 8005d4a:	bf48      	it	mi
 8005d4c:	b2b6      	uxthmi	r6, r6
 8005d4e:	e7e6      	b.n	8005d1e <_printf_i+0x182>
 8005d50:	4615      	mov	r5, r2
 8005d52:	e7bb      	b.n	8005ccc <_printf_i+0x130>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	6826      	ldr	r6, [r4, #0]
 8005d58:	6961      	ldr	r1, [r4, #20]
 8005d5a:	1d18      	adds	r0, r3, #4
 8005d5c:	6028      	str	r0, [r5, #0]
 8005d5e:	0635      	lsls	r5, r6, #24
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	d501      	bpl.n	8005d68 <_printf_i+0x1cc>
 8005d64:	6019      	str	r1, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <_printf_i+0x1d2>
 8005d68:	0670      	lsls	r0, r6, #25
 8005d6a:	d5fb      	bpl.n	8005d64 <_printf_i+0x1c8>
 8005d6c:	8019      	strh	r1, [r3, #0]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6123      	str	r3, [r4, #16]
 8005d72:	4615      	mov	r5, r2
 8005d74:	e7ba      	b.n	8005cec <_printf_i+0x150>
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	1d1a      	adds	r2, r3, #4
 8005d7a:	602a      	str	r2, [r5, #0]
 8005d7c:	681d      	ldr	r5, [r3, #0]
 8005d7e:	6862      	ldr	r2, [r4, #4]
 8005d80:	2100      	movs	r1, #0
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7fa fa24 	bl	80001d0 <memchr>
 8005d88:	b108      	cbz	r0, 8005d8e <_printf_i+0x1f2>
 8005d8a:	1b40      	subs	r0, r0, r5
 8005d8c:	6060      	str	r0, [r4, #4]
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	6123      	str	r3, [r4, #16]
 8005d92:	2300      	movs	r3, #0
 8005d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d98:	e7a8      	b.n	8005cec <_printf_i+0x150>
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	4649      	mov	r1, r9
 8005da0:	4640      	mov	r0, r8
 8005da2:	47d0      	blx	sl
 8005da4:	3001      	adds	r0, #1
 8005da6:	d0ab      	beq.n	8005d00 <_printf_i+0x164>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	079b      	lsls	r3, r3, #30
 8005dac:	d413      	bmi.n	8005dd6 <_printf_i+0x23a>
 8005dae:	68e0      	ldr	r0, [r4, #12]
 8005db0:	9b03      	ldr	r3, [sp, #12]
 8005db2:	4298      	cmp	r0, r3
 8005db4:	bfb8      	it	lt
 8005db6:	4618      	movlt	r0, r3
 8005db8:	e7a4      	b.n	8005d04 <_printf_i+0x168>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	47d0      	blx	sl
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d09b      	beq.n	8005d00 <_printf_i+0x164>
 8005dc8:	3501      	adds	r5, #1
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	9903      	ldr	r1, [sp, #12]
 8005dce:	1a5b      	subs	r3, r3, r1
 8005dd0:	42ab      	cmp	r3, r5
 8005dd2:	dcf2      	bgt.n	8005dba <_printf_i+0x21e>
 8005dd4:	e7eb      	b.n	8005dae <_printf_i+0x212>
 8005dd6:	2500      	movs	r5, #0
 8005dd8:	f104 0619 	add.w	r6, r4, #25
 8005ddc:	e7f5      	b.n	8005dca <_printf_i+0x22e>
 8005dde:	bf00      	nop
 8005de0:	080064d9 	.word	0x080064d9
 8005de4:	080064ea 	.word	0x080064ea

08005de8 <_sbrk_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d06      	ldr	r5, [pc, #24]	; (8005e04 <_sbrk_r+0x1c>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fb f926 	bl	8001044 <_sbrk>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_sbrk_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_sbrk_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	20000218 	.word	0x20000218

08005e08 <__sread>:
 8005e08:	b510      	push	{r4, lr}
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	f000 fab2 	bl	8006378 <_read_r>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	bfab      	itete	ge
 8005e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e1c:	181b      	addge	r3, r3, r0
 8005e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e22:	bfac      	ite	ge
 8005e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e26:	81a3      	strhlt	r3, [r4, #12]
 8005e28:	bd10      	pop	{r4, pc}

08005e2a <__swrite>:
 8005e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2e:	461f      	mov	r7, r3
 8005e30:	898b      	ldrh	r3, [r1, #12]
 8005e32:	05db      	lsls	r3, r3, #23
 8005e34:	4605      	mov	r5, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	4616      	mov	r6, r2
 8005e3a:	d505      	bpl.n	8005e48 <__swrite+0x1e>
 8005e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e40:	2302      	movs	r3, #2
 8005e42:	2200      	movs	r2, #0
 8005e44:	f000 f9c8 	bl	80061d8 <_lseek_r>
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	4632      	mov	r2, r6
 8005e56:	463b      	mov	r3, r7
 8005e58:	4628      	mov	r0, r5
 8005e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5e:	f000 b869 	b.w	8005f34 <_write_r>

08005e62 <__sseek>:
 8005e62:	b510      	push	{r4, lr}
 8005e64:	460c      	mov	r4, r1
 8005e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6a:	f000 f9b5 	bl	80061d8 <_lseek_r>
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	bf15      	itete	ne
 8005e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e7e:	81a3      	strheq	r3, [r4, #12]
 8005e80:	bf18      	it	ne
 8005e82:	81a3      	strhne	r3, [r4, #12]
 8005e84:	bd10      	pop	{r4, pc}

08005e86 <__sclose>:
 8005e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8a:	f000 b8d3 	b.w	8006034 <_close_r>
	...

08005e90 <__swbuf_r>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	460e      	mov	r6, r1
 8005e94:	4614      	mov	r4, r2
 8005e96:	4605      	mov	r5, r0
 8005e98:	b118      	cbz	r0, 8005ea2 <__swbuf_r+0x12>
 8005e9a:	6983      	ldr	r3, [r0, #24]
 8005e9c:	b90b      	cbnz	r3, 8005ea2 <__swbuf_r+0x12>
 8005e9e:	f7ff fb81 	bl	80055a4 <__sinit>
 8005ea2:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <__swbuf_r+0x98>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	d12b      	bne.n	8005f00 <__swbuf_r+0x70>
 8005ea8:	686c      	ldr	r4, [r5, #4]
 8005eaa:	69a3      	ldr	r3, [r4, #24]
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	071a      	lsls	r2, r3, #28
 8005eb2:	d52f      	bpl.n	8005f14 <__swbuf_r+0x84>
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	b36b      	cbz	r3, 8005f14 <__swbuf_r+0x84>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	1ac0      	subs	r0, r0, r3
 8005ebe:	6963      	ldr	r3, [r4, #20]
 8005ec0:	b2f6      	uxtb	r6, r6
 8005ec2:	4283      	cmp	r3, r0
 8005ec4:	4637      	mov	r7, r6
 8005ec6:	dc04      	bgt.n	8005ed2 <__swbuf_r+0x42>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 f948 	bl	8006160 <_fflush_r>
 8005ed0:	bb30      	cbnz	r0, 8005f20 <__swbuf_r+0x90>
 8005ed2:	68a3      	ldr	r3, [r4, #8]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	60a3      	str	r3, [r4, #8]
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	701e      	strb	r6, [r3, #0]
 8005ee0:	6963      	ldr	r3, [r4, #20]
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	4283      	cmp	r3, r0
 8005ee6:	d004      	beq.n	8005ef2 <__swbuf_r+0x62>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	07db      	lsls	r3, r3, #31
 8005eec:	d506      	bpl.n	8005efc <__swbuf_r+0x6c>
 8005eee:	2e0a      	cmp	r6, #10
 8005ef0:	d104      	bne.n	8005efc <__swbuf_r+0x6c>
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f000 f933 	bl	8006160 <_fflush_r>
 8005efa:	b988      	cbnz	r0, 8005f20 <__swbuf_r+0x90>
 8005efc:	4638      	mov	r0, r7
 8005efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <__swbuf_r+0x9c>)
 8005f02:	429c      	cmp	r4, r3
 8005f04:	d101      	bne.n	8005f0a <__swbuf_r+0x7a>
 8005f06:	68ac      	ldr	r4, [r5, #8]
 8005f08:	e7cf      	b.n	8005eaa <__swbuf_r+0x1a>
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <__swbuf_r+0xa0>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	bf08      	it	eq
 8005f10:	68ec      	ldreq	r4, [r5, #12]
 8005f12:	e7ca      	b.n	8005eaa <__swbuf_r+0x1a>
 8005f14:	4621      	mov	r1, r4
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 f81e 	bl	8005f58 <__swsetup_r>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0cb      	beq.n	8005eb8 <__swbuf_r+0x28>
 8005f20:	f04f 37ff 	mov.w	r7, #4294967295
 8005f24:	e7ea      	b.n	8005efc <__swbuf_r+0x6c>
 8005f26:	bf00      	nop
 8005f28:	08006488 	.word	0x08006488
 8005f2c:	080064a8 	.word	0x080064a8
 8005f30:	08006468 	.word	0x08006468

08005f34 <_write_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	; (8005f54 <_write_r+0x20>)
 8005f38:	4604      	mov	r4, r0
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7fa fb3d 	bl	80005c2 <_write>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_write_r+0x1e>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_write_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	20000218 	.word	0x20000218

08005f58 <__swsetup_r>:
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <__swsetup_r+0xcc>)
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	681d      	ldr	r5, [r3, #0]
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	b125      	cbz	r5, 8005f6e <__swsetup_r+0x16>
 8005f64:	69ab      	ldr	r3, [r5, #24]
 8005f66:	b913      	cbnz	r3, 8005f6e <__swsetup_r+0x16>
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f7ff fb1b 	bl	80055a4 <__sinit>
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <__swsetup_r+0xd0>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d10f      	bne.n	8005f94 <__swsetup_r+0x3c>
 8005f74:	686c      	ldr	r4, [r5, #4]
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f7c:	0719      	lsls	r1, r3, #28
 8005f7e:	d42c      	bmi.n	8005fda <__swsetup_r+0x82>
 8005f80:	06dd      	lsls	r5, r3, #27
 8005f82:	d411      	bmi.n	8005fa8 <__swsetup_r+0x50>
 8005f84:	2309      	movs	r3, #9
 8005f86:	6033      	str	r3, [r6, #0]
 8005f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	e03e      	b.n	8006012 <__swsetup_r+0xba>
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <__swsetup_r+0xd4>)
 8005f96:	429c      	cmp	r4, r3
 8005f98:	d101      	bne.n	8005f9e <__swsetup_r+0x46>
 8005f9a:	68ac      	ldr	r4, [r5, #8]
 8005f9c:	e7eb      	b.n	8005f76 <__swsetup_r+0x1e>
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <__swsetup_r+0xd8>)
 8005fa0:	429c      	cmp	r4, r3
 8005fa2:	bf08      	it	eq
 8005fa4:	68ec      	ldreq	r4, [r5, #12]
 8005fa6:	e7e6      	b.n	8005f76 <__swsetup_r+0x1e>
 8005fa8:	0758      	lsls	r0, r3, #29
 8005faa:	d512      	bpl.n	8005fd2 <__swsetup_r+0x7a>
 8005fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fae:	b141      	cbz	r1, 8005fc2 <__swsetup_r+0x6a>
 8005fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	d002      	beq.n	8005fbe <__swsetup_r+0x66>
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f991 	bl	80062e0 <_free_r>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f043 0308 	orr.w	r3, r3, #8
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	b94b      	cbnz	r3, 8005ff2 <__swsetup_r+0x9a>
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe8:	d003      	beq.n	8005ff2 <__swsetup_r+0x9a>
 8005fea:	4621      	mov	r1, r4
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 f92b 	bl	8006248 <__smakebuf_r>
 8005ff2:	89a0      	ldrh	r0, [r4, #12]
 8005ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff8:	f010 0301 	ands.w	r3, r0, #1
 8005ffc:	d00a      	beq.n	8006014 <__swsetup_r+0xbc>
 8005ffe:	2300      	movs	r3, #0
 8006000:	60a3      	str	r3, [r4, #8]
 8006002:	6963      	ldr	r3, [r4, #20]
 8006004:	425b      	negs	r3, r3
 8006006:	61a3      	str	r3, [r4, #24]
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	b943      	cbnz	r3, 800601e <__swsetup_r+0xc6>
 800600c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006010:	d1ba      	bne.n	8005f88 <__swsetup_r+0x30>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	0781      	lsls	r1, r0, #30
 8006016:	bf58      	it	pl
 8006018:	6963      	ldrpl	r3, [r4, #20]
 800601a:	60a3      	str	r3, [r4, #8]
 800601c:	e7f4      	b.n	8006008 <__swsetup_r+0xb0>
 800601e:	2000      	movs	r0, #0
 8006020:	e7f7      	b.n	8006012 <__swsetup_r+0xba>
 8006022:	bf00      	nop
 8006024:	2000000c 	.word	0x2000000c
 8006028:	08006488 	.word	0x08006488
 800602c:	080064a8 	.word	0x080064a8
 8006030:	08006468 	.word	0x08006468

08006034 <_close_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d06      	ldr	r5, [pc, #24]	; (8006050 <_close_r+0x1c>)
 8006038:	2300      	movs	r3, #0
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	602b      	str	r3, [r5, #0]
 8006040:	f7fa ffcb 	bl	8000fda <_close>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <_close_r+0x1a>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	b103      	cbz	r3, 800604e <_close_r+0x1a>
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	20000218 	.word	0x20000218

08006054 <__sflush_r>:
 8006054:	898a      	ldrh	r2, [r1, #12]
 8006056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605a:	4605      	mov	r5, r0
 800605c:	0710      	lsls	r0, r2, #28
 800605e:	460c      	mov	r4, r1
 8006060:	d458      	bmi.n	8006114 <__sflush_r+0xc0>
 8006062:	684b      	ldr	r3, [r1, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dc05      	bgt.n	8006074 <__sflush_r+0x20>
 8006068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	dc02      	bgt.n	8006074 <__sflush_r+0x20>
 800606e:	2000      	movs	r0, #0
 8006070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006076:	2e00      	cmp	r6, #0
 8006078:	d0f9      	beq.n	800606e <__sflush_r+0x1a>
 800607a:	2300      	movs	r3, #0
 800607c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006080:	682f      	ldr	r7, [r5, #0]
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	d032      	beq.n	80060ec <__sflush_r+0x98>
 8006086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	075a      	lsls	r2, r3, #29
 800608c:	d505      	bpl.n	800609a <__sflush_r+0x46>
 800608e:	6863      	ldr	r3, [r4, #4]
 8006090:	1ac0      	subs	r0, r0, r3
 8006092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006094:	b10b      	cbz	r3, 800609a <__sflush_r+0x46>
 8006096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006098:	1ac0      	subs	r0, r0, r3
 800609a:	2300      	movs	r3, #0
 800609c:	4602      	mov	r2, r0
 800609e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060a0:	6a21      	ldr	r1, [r4, #32]
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b0      	blx	r6
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	d106      	bne.n	80060ba <__sflush_r+0x66>
 80060ac:	6829      	ldr	r1, [r5, #0]
 80060ae:	291d      	cmp	r1, #29
 80060b0:	d82c      	bhi.n	800610c <__sflush_r+0xb8>
 80060b2:	4a2a      	ldr	r2, [pc, #168]	; (800615c <__sflush_r+0x108>)
 80060b4:	40ca      	lsrs	r2, r1
 80060b6:	07d6      	lsls	r6, r2, #31
 80060b8:	d528      	bpl.n	800610c <__sflush_r+0xb8>
 80060ba:	2200      	movs	r2, #0
 80060bc:	6062      	str	r2, [r4, #4]
 80060be:	04d9      	lsls	r1, r3, #19
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	6022      	str	r2, [r4, #0]
 80060c4:	d504      	bpl.n	80060d0 <__sflush_r+0x7c>
 80060c6:	1c42      	adds	r2, r0, #1
 80060c8:	d101      	bne.n	80060ce <__sflush_r+0x7a>
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	b903      	cbnz	r3, 80060d0 <__sflush_r+0x7c>
 80060ce:	6560      	str	r0, [r4, #84]	; 0x54
 80060d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060d2:	602f      	str	r7, [r5, #0]
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d0ca      	beq.n	800606e <__sflush_r+0x1a>
 80060d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060dc:	4299      	cmp	r1, r3
 80060de:	d002      	beq.n	80060e6 <__sflush_r+0x92>
 80060e0:	4628      	mov	r0, r5
 80060e2:	f000 f8fd 	bl	80062e0 <_free_r>
 80060e6:	2000      	movs	r0, #0
 80060e8:	6360      	str	r0, [r4, #52]	; 0x34
 80060ea:	e7c1      	b.n	8006070 <__sflush_r+0x1c>
 80060ec:	6a21      	ldr	r1, [r4, #32]
 80060ee:	2301      	movs	r3, #1
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b0      	blx	r6
 80060f4:	1c41      	adds	r1, r0, #1
 80060f6:	d1c7      	bne.n	8006088 <__sflush_r+0x34>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0c4      	beq.n	8006088 <__sflush_r+0x34>
 80060fe:	2b1d      	cmp	r3, #29
 8006100:	d001      	beq.n	8006106 <__sflush_r+0xb2>
 8006102:	2b16      	cmp	r3, #22
 8006104:	d101      	bne.n	800610a <__sflush_r+0xb6>
 8006106:	602f      	str	r7, [r5, #0]
 8006108:	e7b1      	b.n	800606e <__sflush_r+0x1a>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	e7ad      	b.n	8006070 <__sflush_r+0x1c>
 8006114:	690f      	ldr	r7, [r1, #16]
 8006116:	2f00      	cmp	r7, #0
 8006118:	d0a9      	beq.n	800606e <__sflush_r+0x1a>
 800611a:	0793      	lsls	r3, r2, #30
 800611c:	680e      	ldr	r6, [r1, #0]
 800611e:	bf08      	it	eq
 8006120:	694b      	ldreq	r3, [r1, #20]
 8006122:	600f      	str	r7, [r1, #0]
 8006124:	bf18      	it	ne
 8006126:	2300      	movne	r3, #0
 8006128:	eba6 0807 	sub.w	r8, r6, r7
 800612c:	608b      	str	r3, [r1, #8]
 800612e:	f1b8 0f00 	cmp.w	r8, #0
 8006132:	dd9c      	ble.n	800606e <__sflush_r+0x1a>
 8006134:	6a21      	ldr	r1, [r4, #32]
 8006136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006138:	4643      	mov	r3, r8
 800613a:	463a      	mov	r2, r7
 800613c:	4628      	mov	r0, r5
 800613e:	47b0      	blx	r6
 8006140:	2800      	cmp	r0, #0
 8006142:	dc06      	bgt.n	8006152 <__sflush_r+0xfe>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800614a:	81a3      	strh	r3, [r4, #12]
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e78e      	b.n	8006070 <__sflush_r+0x1c>
 8006152:	4407      	add	r7, r0
 8006154:	eba8 0800 	sub.w	r8, r8, r0
 8006158:	e7e9      	b.n	800612e <__sflush_r+0xda>
 800615a:	bf00      	nop
 800615c:	20400001 	.word	0x20400001

08006160 <_fflush_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	690b      	ldr	r3, [r1, #16]
 8006164:	4605      	mov	r5, r0
 8006166:	460c      	mov	r4, r1
 8006168:	b913      	cbnz	r3, 8006170 <_fflush_r+0x10>
 800616a:	2500      	movs	r5, #0
 800616c:	4628      	mov	r0, r5
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	b118      	cbz	r0, 800617a <_fflush_r+0x1a>
 8006172:	6983      	ldr	r3, [r0, #24]
 8006174:	b90b      	cbnz	r3, 800617a <_fflush_r+0x1a>
 8006176:	f7ff fa15 	bl	80055a4 <__sinit>
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <_fflush_r+0x6c>)
 800617c:	429c      	cmp	r4, r3
 800617e:	d11b      	bne.n	80061b8 <_fflush_r+0x58>
 8006180:	686c      	ldr	r4, [r5, #4]
 8006182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0ef      	beq.n	800616a <_fflush_r+0xa>
 800618a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800618c:	07d0      	lsls	r0, r2, #31
 800618e:	d404      	bmi.n	800619a <_fflush_r+0x3a>
 8006190:	0599      	lsls	r1, r3, #22
 8006192:	d402      	bmi.n	800619a <_fflush_r+0x3a>
 8006194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006196:	f7ff faa3 	bl	80056e0 <__retarget_lock_acquire_recursive>
 800619a:	4628      	mov	r0, r5
 800619c:	4621      	mov	r1, r4
 800619e:	f7ff ff59 	bl	8006054 <__sflush_r>
 80061a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061a4:	07da      	lsls	r2, r3, #31
 80061a6:	4605      	mov	r5, r0
 80061a8:	d4e0      	bmi.n	800616c <_fflush_r+0xc>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	059b      	lsls	r3, r3, #22
 80061ae:	d4dd      	bmi.n	800616c <_fflush_r+0xc>
 80061b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061b2:	f7ff fa96 	bl	80056e2 <__retarget_lock_release_recursive>
 80061b6:	e7d9      	b.n	800616c <_fflush_r+0xc>
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <_fflush_r+0x70>)
 80061ba:	429c      	cmp	r4, r3
 80061bc:	d101      	bne.n	80061c2 <_fflush_r+0x62>
 80061be:	68ac      	ldr	r4, [r5, #8]
 80061c0:	e7df      	b.n	8006182 <_fflush_r+0x22>
 80061c2:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <_fflush_r+0x74>)
 80061c4:	429c      	cmp	r4, r3
 80061c6:	bf08      	it	eq
 80061c8:	68ec      	ldreq	r4, [r5, #12]
 80061ca:	e7da      	b.n	8006182 <_fflush_r+0x22>
 80061cc:	08006488 	.word	0x08006488
 80061d0:	080064a8 	.word	0x080064a8
 80061d4:	08006468 	.word	0x08006468

080061d8 <_lseek_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	; (80061f8 <_lseek_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fa ff1e 	bl	8001028 <_lseek>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_lseek_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_lseek_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20000218 	.word	0x20000218

080061fc <__swhatbuf_r>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	460e      	mov	r6, r1
 8006200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006204:	2900      	cmp	r1, #0
 8006206:	b096      	sub	sp, #88	; 0x58
 8006208:	4614      	mov	r4, r2
 800620a:	461d      	mov	r5, r3
 800620c:	da08      	bge.n	8006220 <__swhatbuf_r+0x24>
 800620e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	061a      	lsls	r2, r3, #24
 8006218:	d410      	bmi.n	800623c <__swhatbuf_r+0x40>
 800621a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800621e:	e00e      	b.n	800623e <__swhatbuf_r+0x42>
 8006220:	466a      	mov	r2, sp
 8006222:	f000 f8bb 	bl	800639c <_fstat_r>
 8006226:	2800      	cmp	r0, #0
 8006228:	dbf1      	blt.n	800620e <__swhatbuf_r+0x12>
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006230:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006234:	425a      	negs	r2, r3
 8006236:	415a      	adcs	r2, r3
 8006238:	602a      	str	r2, [r5, #0]
 800623a:	e7ee      	b.n	800621a <__swhatbuf_r+0x1e>
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	2000      	movs	r0, #0
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	b016      	add	sp, #88	; 0x58
 8006244:	bd70      	pop	{r4, r5, r6, pc}
	...

08006248 <__smakebuf_r>:
 8006248:	898b      	ldrh	r3, [r1, #12]
 800624a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800624c:	079d      	lsls	r5, r3, #30
 800624e:	4606      	mov	r6, r0
 8006250:	460c      	mov	r4, r1
 8006252:	d507      	bpl.n	8006264 <__smakebuf_r+0x1c>
 8006254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	2301      	movs	r3, #1
 800625e:	6163      	str	r3, [r4, #20]
 8006260:	b002      	add	sp, #8
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	ab01      	add	r3, sp, #4
 8006266:	466a      	mov	r2, sp
 8006268:	f7ff ffc8 	bl	80061fc <__swhatbuf_r>
 800626c:	9900      	ldr	r1, [sp, #0]
 800626e:	4605      	mov	r5, r0
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff fa57 	bl	8005724 <_malloc_r>
 8006276:	b948      	cbnz	r0, 800628c <__smakebuf_r+0x44>
 8006278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627c:	059a      	lsls	r2, r3, #22
 800627e:	d4ef      	bmi.n	8006260 <__smakebuf_r+0x18>
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	e7e3      	b.n	8006254 <__smakebuf_r+0xc>
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <__smakebuf_r+0x7c>)
 800628e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	6020      	str	r0, [r4, #0]
 8006294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	6163      	str	r3, [r4, #20]
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	6120      	str	r0, [r4, #16]
 80062a2:	b15b      	cbz	r3, 80062bc <__smakebuf_r+0x74>
 80062a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 f889 	bl	80063c0 <_isatty_r>
 80062ae:	b128      	cbz	r0, 80062bc <__smakebuf_r+0x74>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	89a0      	ldrh	r0, [r4, #12]
 80062be:	4305      	orrs	r5, r0
 80062c0:	81a5      	strh	r5, [r4, #12]
 80062c2:	e7cd      	b.n	8006260 <__smakebuf_r+0x18>
 80062c4:	0800553d 	.word	0x0800553d

080062c8 <__malloc_lock>:
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <__malloc_lock+0x8>)
 80062ca:	f7ff ba09 	b.w	80056e0 <__retarget_lock_acquire_recursive>
 80062ce:	bf00      	nop
 80062d0:	2000020c 	.word	0x2000020c

080062d4 <__malloc_unlock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__malloc_unlock+0x8>)
 80062d6:	f7ff ba04 	b.w	80056e2 <__retarget_lock_release_recursive>
 80062da:	bf00      	nop
 80062dc:	2000020c 	.word	0x2000020c

080062e0 <_free_r>:
 80062e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062e2:	2900      	cmp	r1, #0
 80062e4:	d044      	beq.n	8006370 <_free_r+0x90>
 80062e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ea:	9001      	str	r0, [sp, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f1a1 0404 	sub.w	r4, r1, #4
 80062f2:	bfb8      	it	lt
 80062f4:	18e4      	addlt	r4, r4, r3
 80062f6:	f7ff ffe7 	bl	80062c8 <__malloc_lock>
 80062fa:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <_free_r+0x94>)
 80062fc:	9801      	ldr	r0, [sp, #4]
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	b933      	cbnz	r3, 8006310 <_free_r+0x30>
 8006302:	6063      	str	r3, [r4, #4]
 8006304:	6014      	str	r4, [r2, #0]
 8006306:	b003      	add	sp, #12
 8006308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800630c:	f7ff bfe2 	b.w	80062d4 <__malloc_unlock>
 8006310:	42a3      	cmp	r3, r4
 8006312:	d908      	bls.n	8006326 <_free_r+0x46>
 8006314:	6825      	ldr	r5, [r4, #0]
 8006316:	1961      	adds	r1, r4, r5
 8006318:	428b      	cmp	r3, r1
 800631a:	bf01      	itttt	eq
 800631c:	6819      	ldreq	r1, [r3, #0]
 800631e:	685b      	ldreq	r3, [r3, #4]
 8006320:	1949      	addeq	r1, r1, r5
 8006322:	6021      	streq	r1, [r4, #0]
 8006324:	e7ed      	b.n	8006302 <_free_r+0x22>
 8006326:	461a      	mov	r2, r3
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	b10b      	cbz	r3, 8006330 <_free_r+0x50>
 800632c:	42a3      	cmp	r3, r4
 800632e:	d9fa      	bls.n	8006326 <_free_r+0x46>
 8006330:	6811      	ldr	r1, [r2, #0]
 8006332:	1855      	adds	r5, r2, r1
 8006334:	42a5      	cmp	r5, r4
 8006336:	d10b      	bne.n	8006350 <_free_r+0x70>
 8006338:	6824      	ldr	r4, [r4, #0]
 800633a:	4421      	add	r1, r4
 800633c:	1854      	adds	r4, r2, r1
 800633e:	42a3      	cmp	r3, r4
 8006340:	6011      	str	r1, [r2, #0]
 8006342:	d1e0      	bne.n	8006306 <_free_r+0x26>
 8006344:	681c      	ldr	r4, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	6053      	str	r3, [r2, #4]
 800634a:	4421      	add	r1, r4
 800634c:	6011      	str	r1, [r2, #0]
 800634e:	e7da      	b.n	8006306 <_free_r+0x26>
 8006350:	d902      	bls.n	8006358 <_free_r+0x78>
 8006352:	230c      	movs	r3, #12
 8006354:	6003      	str	r3, [r0, #0]
 8006356:	e7d6      	b.n	8006306 <_free_r+0x26>
 8006358:	6825      	ldr	r5, [r4, #0]
 800635a:	1961      	adds	r1, r4, r5
 800635c:	428b      	cmp	r3, r1
 800635e:	bf04      	itt	eq
 8006360:	6819      	ldreq	r1, [r3, #0]
 8006362:	685b      	ldreq	r3, [r3, #4]
 8006364:	6063      	str	r3, [r4, #4]
 8006366:	bf04      	itt	eq
 8006368:	1949      	addeq	r1, r1, r5
 800636a:	6021      	streq	r1, [r4, #0]
 800636c:	6054      	str	r4, [r2, #4]
 800636e:	e7ca      	b.n	8006306 <_free_r+0x26>
 8006370:	b003      	add	sp, #12
 8006372:	bd30      	pop	{r4, r5, pc}
 8006374:	20000210 	.word	0x20000210

08006378 <_read_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d07      	ldr	r5, [pc, #28]	; (8006398 <_read_r+0x20>)
 800637c:	4604      	mov	r4, r0
 800637e:	4608      	mov	r0, r1
 8006380:	4611      	mov	r1, r2
 8006382:	2200      	movs	r2, #0
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fa fe0a 	bl	8000fa0 <_read>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_read_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_read_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000218 	.word	0x20000218

0800639c <_fstat_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d07      	ldr	r5, [pc, #28]	; (80063bc <_fstat_r+0x20>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	f7fa fe22 	bl	8000ff2 <_fstat>
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	d102      	bne.n	80063b8 <_fstat_r+0x1c>
 80063b2:	682b      	ldr	r3, [r5, #0]
 80063b4:	b103      	cbz	r3, 80063b8 <_fstat_r+0x1c>
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	bd38      	pop	{r3, r4, r5, pc}
 80063ba:	bf00      	nop
 80063bc:	20000218 	.word	0x20000218

080063c0 <_isatty_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d06      	ldr	r5, [pc, #24]	; (80063dc <_isatty_r+0x1c>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fa fe21 	bl	8001012 <_isatty>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_isatty_r+0x1a>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_isatty_r+0x1a>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	20000218 	.word	0x20000218

080063e0 <_init>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr

080063ec <_fini>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr
